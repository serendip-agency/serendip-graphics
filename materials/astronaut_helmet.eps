%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Astronaut-Helmet.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Wouter De Coster
%%CreationDate: 9/21/10
%%BoundingBox: 0 0 732 501
%%HiResBoundingBox: 0 0 731.6670 500.3340
%%CropBox: 0 0 731.6670 500.3340
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x386 R agm 4.4376 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.276720, Mon Feb 19 2007 22:13:43        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">RedGradient-Bubbles-BG</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-09-21T09:24:31+02:00</xap:CreateDate>
         <xap:ModifyDate>2010-09-21T09:24:31+02:00</xap:ModifyDate>
         <xap:MetadataDate>2010-09-21T09:24:31+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AA+tnn/C+tcLvWx4V4Xet&#xA;jwrwu9bHhXhd62PCvC71seFeF3rY8K8LvWx4V4Xetjwrwu9bHhXhd62PCvC71seFeF3rY8K8LvWx&#xA;4V4Xetjwrwu9bHhXhd62PCvC71seFeF3rY8K8LvWx4V4Xetjwrwu9bHhXhd62PCvC71seFeF3rY8&#xA;K8LvWx4V4Xetjwrwu9bHhXhd62PCvC71seFeF3rY8K8LvWx4V4UF62XcLkcLhLUgeONLwtmQUqDX&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:6A76DD5EF4C6DF11A6F091883E3916F7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6B76DD5EF4C6DF11A6F091883E3916F7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0AA5DA6AEFC6DF11A6F091883E3916F7</stRef:instanceID>
            <stRef:documentID>uuid:09A5DA6AEFC6DF11A6F091883E3916F7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>720.000000</stDim:w>
            <stDim:h>486.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>193</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>45</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>237</xapG:red>
                           <xapG:green>28</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>241</xapG:red>
                           <xapG:green>90</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>247</xapG:red>
                           <xapG:green>147</xapG:green>
                           <xapG:blue>30</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>251</xapG:red>
                           <xapG:green>176</xapG:green>
                           <xapG:blue>59</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>252</xapG:red>
                           <xapG:green>238</xapG:green>
                           <xapG:blue>33</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>217</xapG:red>
                           <xapG:green>224</xapG:green>
                           <xapG:blue>33</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>140</xapG:red>
                           <xapG:green>198</xapG:green>
                           <xapG:blue>63</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>57</xapG:red>
                           <xapG:green>181</xapG:green>
                           <xapG:blue>74</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>146</xapG:green>
                           <xapG:blue>69</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>104</xapG:green>
                           <xapG:blue>55</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>34</xapG:red>
                           <xapG:green>181</xapG:green>
                           <xapG:blue>115</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>169</xapG:green>
                           <xapG:blue>157</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>41</xapG:red>
                           <xapG:green>171</xapG:green>
                           <xapG:blue>226</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>113</xapG:green>
                           <xapG:blue>188</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>46</xapG:red>
                           <xapG:green>49</xapG:green>
                           <xapG:blue>146</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>27</xapG:red>
                           <xapG:green>20</xapG:green>
                           <xapG:blue>100</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>102</xapG:red>
                           <xapG:green>45</xapG:green>
                           <xapG:blue>145</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>39</xapG:green>
                           <xapG:blue>143</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>158</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>93</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>212</xapG:red>
                           <xapG:green>20</xapG:green>
                           <xapG:blue>90</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>237</xapG:red>
                           <xapG:green>30</xapG:green>
                           <xapG:blue>121</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>199</xapG:red>
                           <xapG:green>178</xapG:green>
                           <xapG:blue>153</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>153</xapG:red>
                           <xapG:green>134</xapG:green>
                           <xapG:blue>117</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>115</xapG:red>
                           <xapG:green>99</xapG:green>
                           <xapG:blue>87</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>83</xapG:red>
                           <xapG:green>71</xapG:green>
                           <xapG:blue>65</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>198</xapG:red>
                           <xapG:green>156</xapG:green>
                           <xapG:blue>109</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>166</xapG:red>
                           <xapG:green>124</xapG:green>
                           <xapG:blue>82</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>140</xapG:red>
                           <xapG:green>98</xapG:green>
                           <xapG:blue>57</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>117</xapG:red>
                           <xapG:green>76</xapG:green>
                           <xapG:blue>36</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>96</xapG:red>
                           <xapG:green>56</xapG:green>
                           <xapG:blue>19</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>66</xapG:red>
                           <xapG:green>33</xapG:green>
                           <xapG:blue>11</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=255 G=96 B=96 1</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>96</xapG:green>
                           <xapG:blue>96</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=240 G=0 B=0 1</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>240</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=215 G=0 B=0 1</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>215</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=229 G=163 B=30 1</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>229</xapG:red>
                           <xapG:green>163</xapG:green>
                           <xapG:blue>30</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500.334 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500.334 li
731.667 500.334 li
731.667 0 li
cp
clp
[1 0 0 1 0 0 ]ct
731.664 500.337 mo
0 500.337 li
0 0 li
731.664 0 li
731.664 500.337 li
248.76 449.721 mo
242.946 449.721 238.221 454.437 238.221 460.251 cv
238.221 466.065 242.946 470.772 248.76 470.772 cv
254.565 470.772 259.29 466.065 259.29 460.251 cv
259.29 460.251 li
259.29 460.251 li
259.29 454.437 254.565 449.721 248.76 449.721 cv
560.079 464.049 mo
559.764 464.436 li
559.44 464.814 li
560.898 466.038 562.671 466.632 564.435 466.632 cv
566.649 466.632 568.854 465.687 570.393 463.86 cv
571.617 462.402 572.211 460.62 572.211 458.856 cv
572.211 456.642 571.266 454.437 569.439 452.898 cv
567.981 451.683 566.208 451.08 564.444 451.08 cv
562.23 451.08 560.025 452.025 558.486 453.861 cv
557.262 455.319 556.668 457.092 556.668 458.856 cv
556.659 461.07 557.613 463.275 559.44 464.814 cv
559.764 464.436 li
560.079 464.049 li
558.486 462.708 557.667 460.791 557.667 458.856 cv
557.667 457.317 558.18 455.778 559.251 454.5 cv
560.592 452.907 562.509 452.079 564.444 452.079 cv
565.983 452.079 567.522 452.601 568.791 453.663 cv
570.393 455.004 571.212 456.921 571.212 458.856 cv
571.212 460.395 570.699 461.943 569.628 463.212 cv
568.287 464.814 566.37 465.633 564.435 465.633 cv
562.896 465.633 561.357 465.111 560.079 464.049 cv
148.383 414.882 mo
139.248 414.882 131.841 422.289 131.841 431.424 cv
131.841 440.559 139.248 447.966 148.383 447.966 cv
157.518 447.966 164.925 440.559 164.925 431.424 cv
164.925 431.424 li
164.925 431.424 li
164.925 422.289 157.518 414.882 148.383 414.882 cv
216.819 417.789 mo
211.005 417.789 206.289 422.496 206.289 428.319 cv
206.289 434.124 211.005 438.84 216.819 438.84 cv
222.633 438.84 227.349 434.124 227.349 428.319 cv
227.349 428.319 li
227.349 428.319 li
227.349 422.496 222.633 417.789 216.819 417.789 cv
543.168 432.72 mo
542.844 433.098 li
542.52 433.485 li
544.797 435.393 547.569 436.329 550.323 436.329 cv
553.779 436.329 557.226 434.844 559.629 431.991 cv
561.537 429.714 562.464 426.942 562.464 424.188 cv
562.464 420.723 560.988 417.285 558.126 414.882 cv
555.858 412.974 553.086 412.047 550.341 412.047 cv
546.876 412.047 543.429 413.523 541.026 416.385 cv
539.118 418.662 538.191 421.434 538.191 424.188 cv
538.191 427.644 539.667 431.082 542.52 433.485 cv
542.844 433.098 li
543.168 432.72 li
540.54 430.515 539.19 427.365 539.19 424.188 cv
539.19 421.659 540.045 419.112 541.8 417.024 cv
543.996 414.396 547.155 413.046 550.341 413.046 cv
552.861 413.046 555.399 413.901 557.487 415.647 cv
560.115 417.852 561.465 421.011 561.465 424.188 cv
561.465 426.717 560.61 429.255 558.864 431.343 cv
556.659 433.971 553.5 435.321 550.323 435.321 cv
547.794 435.321 545.256 434.475 543.168 432.72 cv
391.743 404.775 mo
391.743 410.913 396.729 415.881 402.858 415.89 cv
408.996 415.881 413.973 410.913 413.973 404.775 cv
413.973 398.637 408.996 393.669 402.858 393.669 cv
396.729 393.669 391.743 398.637 391.743 404.775 cv
391.743 404.775 li
391.743 404.775 li
391.743 404.775 li
571.635 409.086 mo
571.32 409.464 li
570.996 409.851 li
573.273 411.759 576.045 412.695 578.79 412.695 cv
582.255 412.695 585.702 411.21 588.105 408.357 cv
590.004 406.08 590.94 403.308 590.94 400.554 cv
590.94 397.089 589.464 393.651 586.602 391.248 cv
584.334 389.34 581.562 388.413 578.808 388.413 cv
575.352 388.413 571.905 389.889 569.502 392.751 cv
567.594 395.019 566.658 397.791 566.658 400.545 cv
566.658 404.01 568.134 407.448 570.996 409.851 cv
571.32 409.464 li
571.635 409.086 li
569.016 406.881 567.666 403.731 567.666 400.545 cv
567.666 398.016 568.521 395.478 570.267 393.39 cv
572.472 390.762 575.631 389.412 578.808 389.412 cv
581.337 389.412 583.875 390.267 585.963 392.013 cv
588.591 394.218 589.941 397.377 589.941 400.554 cv
589.941 403.083 589.086 405.621 587.331 407.709 cv
585.135 410.337 581.976 411.687 578.79 411.687 cv
576.261 411.687 573.723 410.841 571.635 409.086 cv
489.573 410.067 mo
489.249 410.445 li
488.934 410.832 li
490.383 412.056 492.156 412.65 493.92 412.65 cv
496.143 412.65 498.348 411.705 499.887 409.869 cv
501.111 408.411 501.705 406.638 501.705 404.874 cv
501.705 402.66 500.76 400.455 498.933 398.916 cv
497.475 397.692 495.702 397.098 493.938 397.098 cv
491.715 397.098 489.51 398.043 487.971 399.879 cv
486.756 401.328 486.153 403.11 486.153 404.874 cv
486.153 407.088 487.098 409.293 488.934 410.832 cv
489.249 410.445 li
489.573 410.067 li
487.98 408.726 487.152 406.809 487.152 404.874 cv
487.152 403.335 487.674 401.787 488.736 400.518 cv
490.086 398.916 492.003 398.097 493.938 398.097 cv
495.477 398.097 497.016 398.619 498.285 399.681 cv
499.887 401.022 500.706 402.939 500.706 404.874 cv
500.706 406.413 500.184 407.952 499.122 409.23 cv
497.781 410.823 495.855 411.651 493.92 411.651 cv
492.381 411.651 490.842 411.129 489.573 410.067 cv
280.692 376.731 mo
274.878 376.731 270.162 381.438 270.162 387.252 cv
270.162 393.066 274.878 397.782 280.692 397.782 cv
286.506 397.782 291.222 393.066 291.222 387.252 cv
291.222 387.252 li
291.222 387.252 li
291.222 381.438 286.506 376.731 280.692 376.731 cv
542.848 382.613 mo
542.844 382.617 li
544.302 383.841 546.084 384.435 547.839 384.435 cv
550.062 384.435 552.267 383.49 553.806 381.663 cv
555.021 380.205 555.624 378.423 555.624 376.668 cv
555.624 374.445 554.679 372.24 552.843 370.701 cv
551.394 369.486 549.612 368.883 547.857 368.883 cv
545.634 368.883 543.429 369.837 541.89 371.664 cv
540.666 373.122 540.072 374.895 540.072 376.659 cv
540.072 378.88 541.015 381.083 542.848 382.613 cv
581.589 371.475 mo
581.274 371.862 li
580.95 372.24 li
582.399 373.464 584.181 374.058 585.945 374.058 cv
588.159 374.058 590.364 373.113 591.903 371.277 cv
593.127 369.828 593.721 368.046 593.721 366.282 cv
593.721 364.068 592.776 361.863 590.949 360.324 cv
589.491 359.109 587.718 358.506 585.954 358.506 cv
583.74 358.506 581.535 359.451 579.996 361.287 cv
578.772 362.745 578.169 364.518 578.169 366.282 cv
578.169 368.505 579.114 370.71 580.95 372.24 cv
581.274 371.862 li
581.589 371.475 li
579.996 370.134 579.177 368.217 579.177 366.282 cv
579.177 364.743 579.69 363.204 580.761 361.926 cv
582.102 360.333 584.019 359.505 585.954 359.505 cv
587.493 359.505 589.032 360.027 590.301 361.089 cv
591.903 362.43 592.722 364.347 592.722 366.282 cv
592.722 367.821 592.2 369.369 591.138 370.638 cv
589.797 372.24 587.88 373.059 585.945 373.059 cv
584.406 373.059 582.858 372.537 581.589 371.475 cv
357.957 349.767 mo
357.957 355.905 362.934 360.873 369.072 360.873 cv
375.201 360.873 380.187 355.905 380.187 349.767 cv
380.187 343.629 375.201 338.661 369.072 338.652 cv
362.934 338.661 357.957 343.629 357.957 349.767 cv
357.957 349.767 li
357.957 349.767 li
357.957 349.767 li
463.896 358.272 mo
463.572 358.659 li
463.257 359.046 li
464.706 360.261 466.488 360.864 468.252 360.864 cv
470.466 360.864 472.671 359.919 474.21 358.083 cv
475.434 356.625 476.028 354.852 476.028 353.088 cv
476.028 350.865 475.083 348.66 473.256 347.13 cv
471.798 345.906 470.025 345.312 468.261 345.312 cv
466.047 345.312 463.833 346.257 462.303 348.084 cv
461.079 349.542 460.476 351.324 460.476 353.088 cv
460.476 355.302 461.421 357.507 463.257 359.046 cv
463.572 358.659 li
463.896 358.272 li
462.303 356.94 461.484 355.023 461.484 353.088 cv
461.484 351.549 461.997 350.001 463.068 348.732 cv
464.409 347.13 466.326 346.311 468.261 346.311 cv
469.8 346.311 471.339 346.824 472.608 347.895 cv
474.21 349.236 475.029 351.153 475.029 353.088 cv
475.029 354.627 474.507 356.166 473.445 357.435 cv
472.104 359.037 470.187 359.865 468.252 359.865 cv
466.713 359.865 465.165 359.343 463.896 358.272 cv
425.682 356.454 mo
425.367 356.841 li
425.043 357.219 li
426.501 358.443 428.274 359.037 430.038 359.037 cv
432.252 359.037 434.457 358.092 435.996 356.265 cv
437.22 354.807 437.814 353.025 437.814 351.261 cv
437.814 349.047 436.869 346.842 435.042 345.303 cv
433.584 344.088 431.811 343.485 430.047 343.485 cv
427.833 343.485 425.619 344.439 424.089 346.266 cv
422.865 347.724 422.262 349.497 422.262 351.261 cv
422.262 353.484 423.207 355.689 425.043 357.219 cv
425.367 356.841 li
425.682 356.454 li
424.089 355.113 423.27 353.196 423.27 351.261 cv
423.27 349.722 423.783 348.183 424.854 346.914 cv
426.195 345.312 428.112 344.493 430.047 344.484 cv
431.586 344.493 433.125 345.006 434.394 346.068 cv
435.996 347.409 436.815 349.326 436.815 351.261 cv
436.815 352.809 436.293 354.348 435.231 355.617 cv
433.89 357.219 431.973 358.038 430.038 358.038 cv
428.499 358.038 426.951 357.525 425.682 356.454 cv
496.539 355.419 mo
496.215 355.806 li
495.9 356.184 li
497.349 357.408 499.131 358.002 500.886 358.002 cv
503.109 358.002 505.314 357.057 506.853 355.221 cv
508.077 353.772 508.671 351.99 508.671 350.226 cv
508.671 348.012 507.726 345.807 505.899 344.268 cv
504.441 343.053 502.668 342.45 500.904 342.45 cv
498.681 342.45 496.476 343.395 494.937 345.231 cv
493.722 346.689 493.119 348.462 493.119 350.226 cv
493.119 352.44 494.064 354.645 495.9 356.184 cv
496.215 355.806 li
496.539 355.419 li
494.946 354.078 494.118 352.161 494.118 350.226 cv
494.118 348.687 494.64 347.148 495.711 345.87 cv
497.052 344.277 498.969 343.449 500.904 343.449 cv
502.443 343.449 503.982 343.971 505.251 345.033 cv
506.853 346.374 507.672 348.291 507.672 350.226 cv
507.672 351.765 507.15 353.313 506.088 354.582 cv
504.747 356.184 502.83 357.003 500.886 357.003 cv
499.356 357.003 497.808 356.481 496.539 355.419 cv
681.948 351.135 mo
681.948 351.135 li
690.183 351.135 696.861 344.457 696.861 336.213 cv
696.861 327.978 690.183 321.291 681.948 321.291 cv
673.704 321.291 667.026 327.978 667.026 336.213 cv
667.026 344.457 673.704 351.135 681.948 351.135 cv
623.376 337.977 mo
623.052 338.355 li
622.728 338.742 li
624.186 339.966 625.959 340.56 627.723 340.56 cv
629.937 340.56 632.151 339.615 633.681 337.779 cv
634.905 336.33 635.508 334.548 635.508 332.784 cv
635.508 330.57 634.563 328.365 632.727 326.826 cv
631.269 325.602 629.496 325.008 627.732 325.008 cv
625.518 325.008 623.313 325.953 621.774 327.789 cv
620.55 329.247 619.956 331.02 619.956 332.784 cv
619.956 334.998 620.901 337.203 622.728 338.742 cv
623.052 338.355 li
623.376 337.977 li
621.774 336.636 620.955 334.719 620.955 332.784 cv
620.955 331.245 621.477 329.706 622.539 328.428 cv
623.88 326.835 625.797 326.007 627.732 326.007 cv
629.271 326.007 630.819 326.529 632.088 327.591 cv
633.681 328.932 634.5 330.849 634.5 332.784 cv
634.5 334.323 633.987 335.871 632.916 337.14 cv
631.575 338.742 629.658 339.561 627.723 339.561 cv
626.184 339.561 624.645 339.039 623.376 337.977 cv
66.627 323.991 mo
66.627 328.284 70.11 331.758 74.403 331.758 cv
78.696 331.758 82.179 328.284 82.179 323.991 cv
82.179 319.689 78.696 316.215 74.403 316.215 cv
70.11 316.215 66.627 319.689 66.627 323.991 cv
66.627 323.991 li
66.627 323.991 li
66.627 323.991 li
472.923 329.634 mo
472.923 329.634 li
476.826 329.634 480.181 327.273 481.644 323.904 cv
481.91 323.914 482.176 323.919 482.445 323.919 cv
482.445 323.919 li
493.848 323.919 503.082 314.667 503.082 303.273 cv
503.082 303.124 503.08 302.975 503.077 302.827 cv
507.741 306.093 513.164 308.351 519.029 309.283 cv
518.97 309.768 518.94 310.256 518.94 310.743 cv
518.94 314.208 520.416 317.646 523.278 320.04 cv
523.602 319.662 li
523.917 319.275 li
521.298 317.079 519.948 313.92 519.939 310.743 cv
519.939 310.304 519.965 309.864 520.017 309.427 cv
521.684 309.647 523.387 309.762 525.114 309.762 cv
530.883 309.762 536.354 308.492 541.265 306.216 cv
541.9 307.649 542.223 309.196 542.223 310.752 cv
542.223 313.281 541.368 315.819 539.613 317.907 cv
537.408 320.526 534.258 321.885 531.072 321.885 cv
528.543 321.885 526.005 321.03 523.917 319.275 cv
523.602 319.662 li
523.278 320.04 li
525.546 321.948 528.318 322.884 531.072 322.884 cv
534.537 322.884 537.984 321.408 540.378 318.546 cv
542.286 316.278 543.222 313.497 543.222 310.752 cv
543.222 309.051 542.866 307.355 542.165 305.785 cv
554.84 299.504 563.553 286.439 563.553 271.332 cv
563.553 250.083 546.345 232.884 525.114 232.884 cv
503.883 232.884 486.666 250.083 486.666 271.332 cv
486.666 271.332 li
486.666 271.332 li
486.666 271.332 li
486.666 275.611 487.366 279.727 488.657 283.57 cv
486.696 282.952 484.61 282.618 482.445 282.618 cv
471.042 282.618 461.799 291.87 461.799 303.273 cv
461.799 307.451 463.042 311.342 465.179 314.593 cv
464.065 316.151 463.41 318.059 463.41 320.121 cv
463.41 325.368 467.667 329.634 472.923 329.634 cv
31.977 314.181 mo
31.977 320.877 37.413 326.313 44.109 326.313 cv
50.814 326.313 56.25 320.877 56.259 314.181 cv
56.259 307.467 50.814 302.04 44.109 302.04 cv
37.413 302.04 31.977 307.467 31.977 314.181 cv
31.977 314.181 li
31.977 314.181 li
31.977 314.181 li
569.232 326.142 mo
569.232 326.142 li
574.479 326.142 578.745 321.885 578.745 316.629 cv
578.745 311.373 574.479 307.116 569.232 307.116 cv
563.976 307.116 559.719 311.373 559.719 316.629 cv
559.719 321.885 563.976 326.142 569.232 326.142 cv
380.394 293.67 mo
372.843 293.67 366.714 299.799 366.714 307.35 cv
366.714 314.901 372.843 321.03 380.394 321.03 cv
387.945 321.03 394.065 314.901 394.065 307.35 cv
394.065 299.799 387.945 293.67 380.394 293.67 cv
380.394 294.165 li
380.394 294.669 li
383.895 294.669 387.063 296.091 389.358 298.386 cv
391.653 300.681 393.066 303.849 393.066 307.35 cv
393.066 310.851 391.653 314.019 389.358 316.314 cv
387.063 318.609 383.895 320.031 380.394 320.031 cv
376.893 320.031 373.725 318.609 371.43 316.314 cv
369.135 314.019 367.713 310.851 367.713 307.35 cv
367.713 303.849 369.135 300.681 371.43 298.386 cv
373.725 296.091 376.893 294.669 380.394 294.669 cv
380.394 294.165 li
380.394 293.67 li
86.022 299.313 mo
80.208 299.322 75.492 304.029 75.492 309.843 cv
75.492 315.657 80.208 320.373 86.022 320.373 cv
91.836 320.373 96.552 315.657 96.552 309.843 cv
96.552 309.843 li
96.552 309.843 li
96.552 304.029 91.836 299.322 86.022 299.313 cv
410.778 315.081 mo
410.454 315.468 li
410.139 315.846 li
412.407 317.754 415.179 318.69 417.933 318.69 cv
421.398 318.69 424.845 317.214 427.239 314.352 cv
428.752 312.547 429.653 310.43 429.962 308.258 cv
438.137 308.169 444.726 301.522 444.726 293.337 cv
444.726 285.093 438.057 278.415 429.813 278.415 cv
421.569 278.415 414.891 285.093 414.891 293.337 cv
414.891 293.824 414.915 294.306 414.96 294.781 cv
412.574 295.384 410.349 296.716 408.645 298.746 cv
406.737 301.023 405.801 303.795 405.801 306.549 cv
405.801 310.005 407.277 313.452 410.139 315.846 cv
410.454 315.468 li
410.778 315.081 li
408.159 312.876 406.8 309.726 406.8 306.549 cv
406.8 304.02 407.655 301.473 409.41 299.385 cv
410.946 297.555 412.945 296.345 415.09 295.779 cv
416.21 302.58 421.932 307.836 428.956 308.234 cv
428.658 310.186 427.838 312.081 426.474 313.704 cv
424.269 316.332 421.119 317.682 417.933 317.691 cv
415.404 317.691 412.866 316.836 410.778 315.081 cv
200.934 284.922 mo
191.79 284.922 184.383 292.329 184.383 301.473 cv
184.383 310.608 191.79 318.006 200.934 318.006 cv
210.06 318.006 217.476 310.608 217.476 301.473 cv
217.476 301.473 li
217.476 301.473 li
217.476 292.329 210.06 284.922 200.934 284.922 cv
638.127 317.133 mo
638.127 317.133 li
643.383 317.124 647.64 312.867 647.64 307.611 cv
647.64 302.364 643.383 298.098 638.127 298.098 cv
632.871 298.098 628.614 302.364 628.614 307.611 cv
628.614 312.867 632.871 317.124 638.127 317.133 cv
635.724 272.268 mo
635.724 285.642 646.578 296.478 659.952 296.478 cv
667.91 296.478 674.978 292.636 679.394 286.703 cv
680.94 287.789 682.822 288.429 684.855 288.432 cv
684.855 288.432 li
690.111 288.423 694.368 284.166 694.368 278.91 cv
694.368 273.663 690.111 269.397 684.855 269.397 cv
684.569 269.397 684.286 269.41 684.007 269.435 cv
682.604 257.388 672.36 248.049 659.952 248.049 cv
646.578 248.049 635.724 258.885 635.724 272.268 cv
635.724 272.268 li
635.724 272.268 li
635.724 272.268 li
62.262 252.774 mo
62.262 259.479 67.698 264.906 74.403 264.906 cv
81.099 264.906 86.544 259.479 86.544 252.774 cv
86.544 246.069 81.099 240.633 74.403 240.633 cv
67.698 240.633 62.262 246.069 62.262 252.774 cv
62.262 252.774 li
62.262 252.774 li
62.262 252.774 li
220.617 203.814 mo
208.701 203.814 199.044 213.489 199.044 225.405 cv
199.044 237.321 208.701 246.987 220.617 246.987 cv
232.551 246.987 242.208 237.321 242.208 225.405 cv
242.208 213.489 232.551 203.814 220.617 203.814 cv
220.617 204.318 li
220.617 204.813 li
226.305 204.822 231.453 207.126 235.179 210.852 cv
238.905 214.578 241.2 219.717 241.2 225.405 cv
241.2 231.093 238.905 236.232 235.179 239.958 cv
231.453 243.684 226.305 245.988 220.617 245.988 cv
214.929 245.988 209.79 243.684 206.064 239.958 cv
202.347 236.232 200.043 231.093 200.043 225.405 cv
200.043 219.717 202.347 214.578 206.064 210.852 cv
209.79 207.126 214.929 204.822 220.617 204.813 cv
220.617 204.318 li
220.617 203.814 li
40.149 214.758 mo
40.149 219.051 43.632 222.534 47.925 222.534 cv
52.218 222.534 55.701 219.051 55.701 214.758 cv
55.701 210.465 52.218 206.982 47.925 206.982 cv
43.632 206.982 40.149 210.465 40.149 214.758 cv
40.149 214.758 li
40.149 214.758 li
40.149 214.758 li
571.5 207.801 mo
571.5 207.801 li
589.572 207.801 604.224 193.149 604.224 175.068 cv
604.224 156.987 589.572 142.335 571.5 142.335 cv
553.41 142.335 538.767 156.987 538.767 175.068 cv
538.767 193.149 553.41 207.801 571.5 207.801 cv
63.315 184.32 mo
63.315 188.613 66.798 192.087 71.091 192.087 cv
75.384 192.087 78.867 188.613 78.867 184.32 cv
78.867 180.018 75.384 176.544 71.091 176.544 cv
66.798 176.544 63.315 180.018 63.315 184.32 cv
63.315 184.32 li
63.315 184.32 li
63.315 184.32 li
349.965 166.482 mo
349.965 179.856 360.81 190.692 374.184 190.692 cv
387.558 190.692 398.412 179.856 398.412 166.482 cv
398.412 153.108 387.558 142.272 374.184 142.272 cv
369.259 142.272 364.676 143.742 360.852 146.267 cv
359.022 144.943 356.775 144.162 354.348 144.162 cv
348.21 144.162 343.233 149.139 343.233 155.277 cv
343.233 155.277 li
343.233 155.277 li
343.233 155.277 li
343.233 159.86 346.015 163.798 349.985 165.493 cv
349.972 165.822 349.965 166.151 349.965 166.482 cv
349.965 166.482 li
349.965 166.482 li
349.965 166.482 li
131.769 163.404 mo
131.769 170.109 137.205 175.545 143.91 175.545 cv
150.615 175.545 156.051 170.109 156.051 163.404 cv
156.051 156.699 150.615 151.263 143.91 151.263 cv
137.205 151.263 131.769 156.699 131.769 163.404 cv
131.769 163.404 li
131.769 163.404 li
131.769 163.404 li
86.481 161.145 mo
86.481 165.447 89.964 168.921 94.257 168.921 cv
98.55 168.921 102.033 165.447 102.033 161.145 cv
102.033 156.852 98.55 153.378 94.257 153.378 cv
89.964 153.378 86.481 156.852 86.481 161.145 cv
86.481 161.145 li
86.481 161.145 li
86.481 161.145 li
320.634 139.779 mo
313.083 139.779 306.963 145.908 306.963 153.459 cv
306.963 161.01 313.083 167.139 320.634 167.139 cv
328.194 167.139 334.314 161.01 334.314 153.459 cv
334.314 145.908 328.194 139.779 320.634 139.779 cv
320.634 140.274 li
320.634 140.778 li
324.135 140.778 327.303 142.2 329.598 144.495 cv
331.893 146.79 333.315 149.958 333.315 153.459 cv
333.315 156.96 331.893 160.128 329.598 162.423 cv
327.303 164.718 324.135 166.14 320.634 166.14 cv
317.133 166.14 313.965 164.718 311.67 162.423 cv
309.384 160.128 307.962 156.96 307.962 153.459 cv
307.962 149.958 309.384 146.79 311.67 144.495 cv
313.965 142.2 317.133 140.778 320.634 140.778 cv
320.634 140.274 li
320.634 139.779 li
224.712 121.788 mo
217.152 121.788 211.032 127.917 211.032 135.468 cv
211.032 143.019 217.152 149.148 224.712 149.148 cv
232.263 149.148 238.383 143.019 238.383 135.468 cv
238.383 127.917 232.263 121.788 224.712 121.788 cv
224.712 122.292 li
224.712 122.787 li
228.213 122.787 231.381 124.209 233.676 126.504 cv
235.971 128.799 237.384 131.967 237.384 135.468 cv
237.384 138.969 235.971 142.137 233.676 144.432 cv
231.381 146.736 228.213 148.149 224.712 148.149 cv
221.211 148.149 218.043 146.736 215.748 144.432 cv
213.453 142.137 212.031 138.969 212.031 135.468 cv
212.031 131.967 213.453 128.799 215.748 126.504 cv
218.043 124.209 221.211 122.787 224.712 122.787 cv
224.712 122.292 li
224.712 121.788 li
40.149 131.364 mo
40.149 135.657 43.632 139.131 47.925 139.131 cv
52.218 139.131 55.701 135.657 55.701 131.364 cv
55.701 127.062 52.218 123.588 47.925 123.588 cv
43.632 123.588 40.149 127.062 40.149 131.364 cv
40.149 131.364 li
40.149 131.364 li
40.149 131.364 li
369.085 109.362 mo
371.184 116.658 377.914 121.995 385.884 121.995 cv
395.532 121.995 403.362 114.174 403.362 104.526 cv
403.362 100.994 402.314 97.7072 400.513 94.9591 cv
400.829 93.4909 400.995 91.9672 400.995 90.405 cv
400.995 78.489 391.338 68.814 379.404 68.814 cv
379.404 69.318 li
379.404 69.813 li
385.101 69.813 390.24 72.117 393.966 75.843 cv
397.692 79.578 399.996 84.717 399.996 90.405 cv
399.996 91.5731 399.898 92.7189 399.711 93.8343 cv
396.513 89.7051 391.508 87.048 385.884 87.048 cv
376.236 87.048 368.406 94.869 368.406 104.526 cv
368.406 104.526 li
368.406 104.526 li
368.406 104.526 li
368.406 105.721 368.526 106.889 368.755 108.017 cv
367.336 107.155 366.028 106.126 364.86 104.958 cv
361.134 101.232 358.83 96.084 358.83 90.405 cv
358.83 84.717 361.134 79.578 364.86 75.843 cv
368.586 72.117 373.725 69.813 379.404 69.813 cv
379.404 69.318 li
379.404 68.814 li
367.488 68.814 357.831 78.489 357.831 90.405 cv
357.831 98.5827 362.38 105.701 369.085 109.362 cv
57.4409 77.9519 mo
46.1232 78.6254 37.161 88.0161 37.161 99.495 cv
37.161 111.411 46.818 121.086 58.743 121.086 cv
70.668 121.086 80.325 111.411 80.325 99.495 cv
80.325 94.4425 78.5884 89.7945 75.6793 86.1163 cv
79.1801 83.9887 81.522 80.1413 81.522 75.744 cv
81.522 69.039 76.077 63.603 69.381 63.603 cv
62.676 63.603 57.24 69.039 57.24 75.744 cv
57.24 75.744 li
57.24 75.744 li
57.24 75.744 li
57.24 76.4982 57.3093 77.2359 57.4409 77.9519 cv
96.417 108.189 mo
96.417 112.482 99.9 115.965 104.193 115.965 cv
108.486 115.965 111.969 112.482 111.969 108.189 cv
111.969 103.896 108.486 100.413 104.193 100.413 cv
99.9 100.413 96.417 103.896 96.417 108.189 cv
96.417 108.189 li
96.417 108.189 li
96.417 108.189 li
182.745 79.821 mo
175.185 79.821 169.065 85.95 169.065 93.501 cv
169.065 101.052 175.185 107.181 182.745 107.181 cv
190.296 107.181 196.416 101.052 196.416 93.501 cv
196.416 89.1204 194.356 85.2188 191.152 82.7144 cv
194.475 81.8256 196.929 78.8029 196.929 75.204 cv
196.929 70.911 193.437 67.428 189.144 67.428 cv
184.86 67.428 181.368 70.911 181.368 75.204 cv
181.368 75.204 li
181.368 75.204 li
181.368 75.204 li
181.368 76.9347 181.936 78.5318 182.894 79.8229 cv
182.844 79.8223 182.795 79.821 182.745 79.821 cv
182.745 80.316 li
182.745 80.82 li
183.108 80.82 183.468 80.8362 183.823 80.8661 cv
185.216 82.1735 187.089 82.9757 189.144 82.98 cv
189.358 82.9796 189.57 82.9701 189.779 82.9528 cv
190.474 83.4174 191.12 83.9483 191.709 84.537 cv
194.004 86.832 195.417 90 195.417 93.501 cv
195.417 97.002 194.004 100.17 191.709 102.465 cv
189.414 104.769 186.246 106.182 182.745 106.182 cv
179.244 106.182 176.076 104.769 173.781 102.465 cv
171.486 100.17 170.073 97.002 170.064 93.501 cv
170.073 90 171.486 86.832 173.781 84.537 cv
176.076 82.242 179.244 80.82 182.745 80.82 cv
182.745 80.316 li
182.745 79.821 li
248.67 88.335 mo
248.67 92.628 252.153 96.102 256.446 96.102 cv
260.739 96.102 264.222 92.628 264.222 88.335 cv
264.222 84.033 260.739 80.559 256.446 80.559 cv
252.153 80.559 248.67 84.033 248.67 88.335 cv
248.67 88.335 li
248.67 88.335 li
248.67 88.335 li
128.853 85.68 mo
128.853 89.973 132.336 93.447 136.629 93.447 cv
140.922 93.447 144.405 89.973 144.405 85.68 cv
144.405 81.378 140.922 77.904 136.629 77.895 cv
132.336 77.904 128.853 81.378 128.853 85.68 cv
128.853 85.68 li
128.853 85.68 li
128.853 85.68 li
93.645 69.129 mo
93.645 75.825 99.081 81.261 105.786 81.261 cv
112.491 81.261 117.927 75.825 117.927 69.129 cv
117.927 62.415 112.491 56.988 105.786 56.979 cv
99.081 56.988 93.645 62.415 93.645 69.129 cv
93.645 69.129 li
93.645 69.129 li
93.645 69.129 li
439.362 45.036 mo
431.811 45.045 425.691 51.174 425.682 58.725 cv
425.691 66.276 431.811 72.405 439.362 72.405 cv
446.922 72.405 453.042 66.276 453.042 58.725 cv
453.042 51.174 446.922 45.036 439.362 45.036 cv
439.362 45.54 li
439.362 46.044 li
442.863 46.044 446.031 47.457 448.326 49.752 cv
450.621 52.056 452.043 55.224 452.043 58.725 cv
452.043 62.226 450.621 65.394 448.326 67.689 cv
446.031 69.984 442.863 71.406 439.362 71.406 cv
435.861 71.406 432.693 69.984 430.398 67.689 cv
428.103 65.394 426.69 62.226 426.69 58.725 cv
426.69 55.224 428.103 52.056 430.398 49.752 cv
432.693 47.457 435.861 46.044 439.362 46.044 cv
439.362 45.54 li
439.362 45.036 li
278.667 37.854 mo
271.116 37.854 264.996 43.983 264.996 51.534 cv
264.996 59.085 271.116 65.214 278.667 65.214 cv
286.227 65.214 292.347 59.085 292.347 51.534 cv
292.347 43.983 286.227 37.854 278.667 37.854 cv
278.667 38.349 li
278.667 38.853 li
282.168 38.853 285.336 40.275 287.631 42.57 cv
289.926 44.865 291.339 48.033 291.348 51.534 cv
291.339 55.035 289.926 58.203 287.631 60.498 cv
285.336 62.793 282.168 64.215 278.667 64.215 cv
275.166 64.215 271.998 62.793 269.703 60.498 cv
267.408 58.203 265.995 55.035 265.995 51.534 cv
265.995 48.033 267.408 44.865 269.703 42.57 cv
271.998 40.275 275.166 38.853 278.667 38.853 cv
278.667 38.349 li
278.667 37.854 li
127.602 37.854 mo
120.042 37.854 113.922 43.983 113.922 51.534 cv
113.922 59.085 120.042 65.214 127.602 65.214 cv
135.153 65.214 141.273 59.085 141.273 51.534 cv
141.273 43.983 135.153 37.854 127.602 37.854 cv
127.602 38.349 li
127.602 38.853 li
131.103 38.853 134.262 40.275 136.566 42.57 cv
138.852 44.865 140.274 48.033 140.274 51.534 cv
140.274 55.035 138.852 58.203 136.566 60.498 cv
134.262 62.793 131.103 64.215 127.602 64.215 cv
124.092 64.215 120.933 62.793 118.638 60.498 cv
116.343 58.203 114.921 55.035 114.921 51.534 cv
114.921 48.033 116.343 44.865 118.638 42.57 cv
120.933 40.275 124.092 38.853 127.602 38.853 cv
127.602 38.349 li
127.602 37.854 li
410.85 45.954 mo
410.85 50.247 414.333 53.73 418.626 53.73 cv
422.919 53.73 426.402 50.247 426.402 45.954 cv
426.402 41.661 422.919 38.187 418.626 38.187 cv
414.333 38.187 410.85 41.661 410.85 45.954 cv
410.85 45.954 li
410.85 45.954 li
410.85 45.954 li
467.667 39.339 mo
467.667 46.035 473.103 51.471 479.808 51.471 cv
486.504 51.471 491.949 46.035 491.949 39.339 cv
491.949 32.625 486.504 27.198 479.808 27.198 cv
473.103 27.198 467.667 32.625 467.667 39.339 cv
467.667 39.339 li
467.667 39.339 li
467.667 39.339 li
44.109 42.651 mo
44.109 46.944 47.601 50.418 51.894 50.418 cv
56.178 50.418 59.67 46.944 59.67 42.651 cv
59.67 38.349 56.178 34.875 51.894 34.875 cv
47.601 34.875 44.109 38.349 44.109 42.651 cv
44.109 42.651 li
44.109 42.651 li
44.109 42.651 li
248.76 469.773 mo
246.123 469.773 243.747 468.711 242.019 466.983 cv
240.291 465.264 239.22 462.879 239.22 460.251 cv
239.22 457.614 240.291 455.238 242.019 453.51 cv
243.747 451.791 246.123 450.72 248.76 450.72 cv
251.388 450.72 253.764 451.791 255.492 453.51 cv
257.22 455.238 258.291 457.614 258.291 460.251 cv
258.291 462.879 257.22 465.264 255.492 466.983 cv
253.764 468.711 251.388 469.773 248.76 469.773 cv
148.383 446.967 mo
144.09 446.967 140.202 445.23 137.394 442.413 cv
134.577 439.605 132.84 435.717 132.84 431.424 cv
132.84 427.131 134.577 423.252 137.394 420.435 cv
140.202 417.618 144.09 415.881 148.383 415.881 cv
152.676 415.881 156.555 417.618 159.372 420.435 cv
162.189 423.252 163.926 427.131 163.926 431.424 cv
163.926 435.717 162.189 439.605 159.372 442.413 cv
156.555 445.23 152.676 446.967 148.383 446.967 cv
216.819 437.841 mo
214.182 437.841 211.806 436.779 210.078 435.051 cv
208.35 433.323 207.288 430.947 207.288 428.319 cv
207.288 425.682 208.35 423.306 210.078 421.578 cv
211.806 419.85 214.182 418.788 216.819 418.788 cv
219.447 418.788 221.832 419.85 223.56 421.578 cv
225.279 423.306 226.35 425.682 226.35 428.319 cv
226.35 430.947 225.279 433.323 223.56 435.051 cv
221.832 436.779 219.447 437.841 216.819 437.841 cv
402.858 414.882 mo
400.068 414.882 397.539 413.757 395.712 411.921 cv
393.876 410.094 392.742 407.574 392.742 404.775 cv
392.742 401.985 393.876 399.456 395.712 397.629 cv
397.539 395.802 400.068 394.668 402.858 394.668 cv
405.657 394.668 408.177 395.802 410.013 397.629 cv
411.84 399.456 412.974 401.985 412.974 404.775 cv
412.974 407.574 411.84 410.094 410.013 411.921 cv
408.177 413.757 405.657 414.882 402.858 414.882 cv
280.692 396.783 mo
278.055 396.783 275.679 395.712 273.951 393.993 cv
272.223 392.265 271.161 389.889 271.161 387.252 cv
271.161 384.624 272.223 382.248 273.951 380.52 cv
275.679 378.792 278.055 377.73 280.692 377.73 cv
283.32 377.73 285.705 378.792 287.433 380.52 cv
289.152 382.248 290.223 384.624 290.223 387.252 cv
290.223 389.889 289.152 392.265 287.433 393.993 cv
285.705 395.712 283.32 396.783 280.692 396.783 cv
547.839 383.436 mo
546.3 383.436 544.761 382.923 543.492 381.852 cv
543.168 382.239 li
543.492 381.852 li
541.89 380.511 541.071 378.594 541.071 376.659 cv
541.071 375.12 541.593 373.581 542.655 372.312 cv
543.996 370.71 545.922 369.891 547.857 369.882 cv
549.396 369.891 550.935 370.404 552.204 371.466 cv
553.806 372.807 554.625 374.724 554.625 376.668 cv
554.625 378.207 554.103 379.746 553.041 381.015 cv
551.7 382.617 549.774 383.436 547.839 383.436 cv
369.072 359.874 mo
366.273 359.874 363.753 358.749 361.917 356.913 cv
360.09 355.086 358.956 352.557 358.956 349.767 cv
358.956 346.977 360.09 344.448 361.917 342.621 cv
363.753 340.785 366.273 339.66 369.072 339.66 cv
371.862 339.66 374.391 340.785 376.218 342.621 cv
378.054 344.448 379.179 346.977 379.188 349.767 cv
379.179 352.557 378.054 355.086 376.218 356.913 cv
374.391 358.749 371.862 359.874 369.072 359.874 cv
681.948 351.135 mo
681.948 350.64 li
681.948 350.136 li
678.096 350.136 674.622 348.579 672.102 346.059 cv
669.582 343.539 668.025 340.056 668.025 336.213 cv
668.025 332.37 669.582 328.896 672.102 326.376 cv
674.622 323.856 678.096 322.29 681.948 322.29 cv
685.791 322.29 689.265 323.856 691.785 326.376 cv
694.305 328.896 695.862 332.37 695.862 336.213 cv
695.862 340.056 694.305 343.539 691.785 346.059 cv
689.265 348.579 685.791 350.136 681.948 350.136 cv
681.948 350.64 li
681.948 351.135 li
681.948 351.135 li
74.403 330.759 mo
72.531 330.759 70.839 330.003 69.606 328.779 cv
68.382 327.546 67.626 325.863 67.626 323.991 cv
67.626 322.119 68.382 320.427 69.606 319.194 cv
70.839 317.97 72.531 317.214 74.403 317.214 cv
76.275 317.214 77.967 317.97 79.191 319.194 cv
80.415 320.427 81.18 322.119 81.18 323.991 cv
81.18 325.863 80.415 327.546 79.191 328.779 cv
77.967 330.003 76.275 330.759 74.403 330.759 cv
472.923 329.634 mo
472.923 329.139 li
472.923 328.635 li
470.565 328.635 468.441 327.681 466.902 326.142 cv
465.363 324.594 464.409 322.47 464.409 320.121 cv
464.409 318.407 464.917 316.809 465.789 315.472 cv
469.201 320.121 474.512 323.291 480.579 323.836 cv
480.162 324.693 479.605 325.472 478.935 326.142 cv
477.396 327.681 475.272 328.635 472.923 328.635 cv
472.923 329.139 li
472.923 329.634 li
472.923 329.634 li
569.232 326.142 mo
569.232 325.647 li
569.232 325.143 li
566.874 325.143 564.75 324.189 563.211 322.65 cv
561.672 321.111 560.718 318.978 560.718 316.629 cv
560.718 314.28 561.672 312.156 563.211 310.608 cv
564.75 309.069 566.874 308.115 569.232 308.115 cv
571.581 308.115 573.705 309.069 575.244 310.608 cv
576.792 312.156 577.737 314.28 577.737 316.629 cv
577.737 318.978 576.792 321.111 575.244 322.65 cv
573.705 324.189 571.581 325.143 569.232 325.143 cv
569.232 325.647 li
569.232 326.142 li
569.232 326.142 li
44.109 325.314 mo
41.04 325.314 38.259 324.072 36.234 322.056 cv
34.218 320.031 32.976 317.259 32.976 314.181 cv
32.976 311.094 34.218 308.313 36.234 306.297 cv
38.259 304.281 41.04 303.039 44.109 303.039 cv
47.187 303.039 49.977 304.281 51.993 306.297 cv
54.009 308.313 55.251 311.094 55.251 314.181 cv
55.251 317.259 54.009 320.031 51.993 322.056 cv
49.977 324.072 47.187 325.314 44.109 325.314 cv
482.445 323.919 mo
482.445 323.415 li
482.445 322.92 li
482.299 322.92 482.154 322.918 482.009 322.915 cv
482.281 322.031 482.427 321.093 482.427 320.121 cv
482.427 314.865 478.17 310.608 472.923 310.608 cv
470.107 310.608 467.579 311.83 465.837 313.773 cv
463.912 310.734 462.798 307.131 462.798 303.273 cv
462.798 297.846 464.994 292.932 468.549 289.377 cv
472.104 285.813 477.018 283.617 482.445 283.617 cv
484.775 283.617 487.009 284.022 489.081 284.766 cv
491.673 291.713 496.217 297.705 502.047 302.081 cv
502.071 302.475 502.083 302.873 502.083 303.273 cv
502.083 308.691 499.887 313.605 496.332 317.16 cv
492.777 320.715 487.872 322.92 482.445 322.92 cv
482.445 323.415 li
482.445 323.919 li
482.445 323.919 li
480.977 322.866 mo
476.135 322.507 471.78 320.391 468.549 317.16 cv
467.769 316.38 467.054 315.534 466.414 314.632 cv
466.569 314.448 466.732 314.27 466.902 314.1 cv
468.441 312.561 470.565 311.607 472.923 311.607 cv
475.272 311.607 477.396 312.561 478.935 314.1 cv
480.483 315.639 481.428 317.772 481.428 320.121 cv
481.428 321.082 481.27 322.004 480.977 322.866 cv
86.022 319.374 mo
83.394 319.374 81.009 318.303 79.29 316.584 cv
77.562 314.856 76.491 312.48 76.491 309.843 cv
76.491 307.215 77.562 304.83 79.29 303.111 cv
81.009 301.383 83.394 300.321 86.022 300.321 cv
88.659 300.321 91.035 301.383 92.763 303.111 cv
94.491 304.83 95.553 307.215 95.553 309.843 cv
95.553 312.48 94.491 314.856 92.763 316.584 cv
91.035 318.303 88.659 319.374 86.022 319.374 cv
638.127 317.133 mo
638.127 316.629 li
638.127 316.125 li
635.778 316.125 633.654 315.18 632.106 313.632 cv
630.567 312.093 629.613 309.969 629.613 307.611 cv
629.613 305.262 630.567 303.138 632.106 301.59 cv
633.654 300.051 635.778 299.097 638.127 299.097 cv
640.476 299.097 642.6 300.051 644.148 301.59 cv
645.687 303.138 646.641 305.262 646.641 307.611 cv
646.641 309.969 645.687 312.093 644.148 313.632 cv
642.6 315.18 640.476 316.125 638.127 316.125 cv
638.127 316.629 li
638.127 317.133 li
638.127 317.133 li
200.934 317.007 mo
196.632 317.007 192.753 315.27 189.936 312.453 cv
187.128 309.645 185.382 305.766 185.382 301.473 cv
185.382 297.171 187.128 293.292 189.936 290.475 cv
192.753 287.658 196.632 285.921 200.934 285.921 cv
205.218 285.921 209.106 287.658 211.923 290.475 cv
214.731 293.292 216.477 297.171 216.477 301.473 cv
216.477 305.766 214.731 309.645 211.923 312.453 cv
209.106 315.27 205.218 317.007 200.934 317.007 cv
525.114 308.763 mo
523.441 308.763 521.794 308.653 520.179 308.44 cv
520.544 306.708 521.329 305.039 522.549 303.588 cv
524.754 300.96 527.913 299.601 531.09 299.601 cv
533.619 299.601 536.157 300.456 538.245 302.211 cv
539.318 303.111 540.178 304.169 540.82 305.323 cv
536.043 307.531 530.723 308.763 525.114 308.763 cv
519.19 308.297 mo
513.206 307.347 507.695 304.981 503.011 301.551 cv
502.348 293.514 497.087 286.778 489.862 283.992 cv
488.44 280.039 487.665 275.777 487.665 271.332 cv
487.665 260.982 491.859 251.622 498.636 244.845 cv
505.413 238.068 514.773 233.883 525.114 233.883 cv
535.455 233.883 544.815 238.068 551.592 244.845 cv
558.369 251.622 562.554 260.982 562.554 271.332 cv
562.554 281.673 558.369 291.024 551.592 297.801 cv
548.724 300.669 545.393 303.073 541.721 304.892 cv
541.017 303.611 540.07 302.438 538.884 301.446 cv
536.616 299.538 533.844 298.602 531.09 298.602 cv
527.625 298.602 524.187 300.078 521.784 302.94 cv
520.443 304.54 519.583 306.385 519.19 308.297 cv
540.531 296.631 mo
540.531 296.631 li
545.778 296.622 550.035 292.365 550.035 287.109 cv
550.035 281.862 545.778 277.596 540.531 277.596 cv
535.275 277.596 531.018 281.862 531.018 287.109 cv
531.018 292.365 535.275 296.622 540.531 296.631 cv
430.062 307.249 mo
430.076 307.015 430.083 306.782 430.083 306.549 cv
430.083 303.093 428.607 299.646 425.745 297.243 cv
423.477 295.335 420.705 294.408 417.951 294.408 cv
417.279 294.408 416.607 294.464 415.944 294.575 cv
415.908 294.167 415.89 293.754 415.89 293.337 cv
415.89 289.485 417.447 286.011 419.967 283.491 cv
422.487 280.971 425.97 279.414 429.813 279.414 cv
433.656 279.414 437.13 280.971 439.65 283.491 cv
442.17 286.011 443.727 289.485 443.727 293.337 cv
443.727 297.18 442.17 300.654 439.65 303.174 cv
437.185 305.639 433.806 307.183 430.062 307.249 cv
429.063 307.231 mo
425.518 307.043 422.322 305.529 419.967 303.174 cv
417.945 301.152 416.543 298.515 416.068 295.567 cv
416.69 295.461 417.32 295.407 417.951 295.407 cv
420.48 295.407 423.018 296.262 425.106 298.008 cv
427.734 300.213 429.084 303.372 429.084 306.549 cv
429.084 306.776 429.077 307.004 429.063 307.231 cv
501.919 300.72 mo
500.768 299.812 499.672 298.837 498.636 297.801 cv
495.09 294.254 492.251 290.002 490.35 285.273 cv
492.595 286.262 494.62 287.661 496.332 289.377 cv
499.32 292.365 501.348 296.314 501.919 300.72 cv
540.531 296.631 mo
540.531 296.127 li
540.531 295.623 li
538.173 295.623 536.049 294.678 534.51 293.13 cv
532.971 291.591 532.017 289.467 532.017 287.109 cv
532.017 284.76 532.971 282.636 534.51 281.088 cv
536.049 279.549 538.173 278.595 540.531 278.595 cv
542.88 278.595 545.004 279.549 546.543 281.088 cv
548.082 282.636 549.036 284.76 549.036 287.109 cv
549.036 289.467 548.082 291.591 546.543 293.13 cv
545.004 294.678 542.88 295.623 540.531 295.623 cv
540.531 296.127 li
540.531 296.631 li
540.531 296.631 li
659.952 295.479 mo
653.535 295.479 647.739 292.878 643.527 288.684 cv
639.324 284.481 636.723 278.676 636.723 272.268 cv
636.723 265.851 639.324 260.055 643.527 255.852 cv
647.739 251.649 653.535 249.048 659.952 249.048 cv
666.36 249.048 672.165 251.649 676.368 255.852 cv
679.974 259.458 682.401 264.237 683.017 269.575 cv
678.642 270.432 675.342 274.291 675.342 278.91 cv
675.342 281.775 676.607 284.342 678.608 286.087 cv
677.925 287.007 677.177 287.875 676.368 288.684 cv
672.165 292.878 666.36 295.479 659.952 295.479 cv
684.855 288.432 mo
684.855 287.928 li
684.855 287.424 li
683.041 287.424 681.356 286.86 679.974 285.89 cv
682.622 282.01 684.171 277.32 684.171 272.268 cv
684.171 271.65 684.148 271.036 684.102 270.43 cv
684.35 270.408 684.601 270.396 684.855 270.396 cv
687.204 270.396 689.328 271.35 690.876 272.889 cv
692.415 274.437 693.369 276.561 693.369 278.91 cv
693.369 281.259 692.415 283.392 690.876 284.931 cv
689.328 286.479 687.204 287.424 684.855 287.424 cv
684.855 287.928 li
684.855 288.432 li
684.855 288.432 li
679.19 285.268 mo
679.068 285.159 678.949 285.047 678.834 284.931 cv
677.295 283.392 676.341 281.259 676.341 278.91 cv
676.341 276.561 677.295 274.437 678.834 272.889 cv
679.982 271.741 681.459 270.919 683.111 270.575 cv
683.151 271.134 683.172 271.699 683.172 272.268 cv
683.172 277.083 681.703 281.558 679.19 285.268 cv
74.403 263.907 mo
71.325 263.907 68.544 262.665 66.519 260.649 cv
64.503 258.633 63.261 255.852 63.261 252.774 cv
63.261 249.696 64.503 246.915 66.519 244.899 cv
68.544 242.883 71.325 241.632 74.403 241.632 cv
77.481 241.632 80.262 242.883 82.278 244.899 cv
84.294 246.915 85.545 249.696 85.545 252.774 cv
85.545 255.852 84.294 258.633 82.278 260.649 cv
80.262 262.665 77.481 263.907 74.403 263.907 cv
47.925 221.535 mo
46.053 221.535 44.361 220.779 43.128 219.546 cv
41.904 218.322 41.148 216.63 41.148 214.758 cv
41.148 212.886 41.904 211.194 43.128 209.97 cv
44.361 208.746 46.053 207.99 47.925 207.981 cv
49.797 207.99 51.489 208.746 52.713 209.97 cv
53.937 211.194 54.702 212.886 54.702 214.758 cv
54.702 216.63 53.937 218.322 52.713 219.546 cv
51.489 220.779 49.797 221.535 47.925 221.535 cv
571.5 207.801 mo
571.5 207.297 li
571.5 206.802 li
562.734 206.802 554.805 203.247 549.063 197.505 cv
543.321 191.763 539.766 183.834 539.766 175.068 cv
539.766 166.302 543.321 158.373 549.063 152.631 cv
554.805 146.889 562.734 143.334 571.5 143.334 cv
580.266 143.334 588.195 146.889 593.928 152.631 cv
599.67 158.373 603.225 166.302 603.225 175.068 cv
603.225 183.834 599.67 191.763 593.928 197.505 cv
588.195 203.247 580.266 206.802 571.5 206.802 cv
571.5 207.297 li
571.5 207.801 li
571.5 207.801 li
71.091 191.088 mo
69.219 191.088 67.527 190.332 66.294 189.108 cv
65.07 187.884 64.314 186.192 64.314 184.32 cv
64.314 182.448 65.07 180.756 66.294 179.523 cv
67.527 178.299 69.219 177.543 71.091 177.543 cv
72.963 177.543 74.655 178.299 75.879 179.523 cv
77.112 180.756 77.868 182.448 77.868 184.32 cv
77.868 186.192 77.112 187.884 75.879 189.108 cv
74.655 190.332 72.963 191.088 71.091 191.088 cv
374.184 189.693 mo
367.776 189.693 361.971 187.101 357.768 182.898 cv
353.565 178.695 350.964 172.899 350.964 166.482 cv
350.964 166.274 350.967 166.067 350.972 165.86 cv
352.037 166.199 353.171 166.383 354.348 166.383 cv
360.477 166.383 365.463 161.406 365.463 155.277 cv
365.463 151.947 363.995 148.96 361.674 146.923 cv
365.286 144.609 369.579 143.271 374.184 143.271 cv
380.592 143.271 386.397 145.863 390.6 150.066 cv
394.812 154.269 397.413 160.074 397.413 166.482 cv
397.413 172.899 394.812 178.695 390.6 182.898 cv
386.397 187.101 380.592 189.693 374.184 189.693 cv
143.91 174.546 mo
140.832 174.546 138.051 173.295 136.035 171.279 cv
134.019 169.263 132.768 166.482 132.768 163.404 cv
132.768 160.326 134.019 157.545 136.035 155.529 cv
138.051 153.513 140.832 152.271 143.91 152.271 cv
146.988 152.271 149.769 153.513 151.785 155.529 cv
153.801 157.545 155.052 160.326 155.052 163.404 cv
155.052 166.482 153.801 169.263 151.785 171.279 cv
149.769 173.295 146.988 174.546 143.91 174.546 cv
94.257 167.922 mo
92.385 167.922 90.693 167.166 89.469 165.942 cv
88.245 164.709 87.48 163.017 87.48 161.145 cv
87.48 159.273 88.245 157.59 89.469 156.357 cv
90.693 155.133 92.385 154.377 94.257 154.377 cv
96.129 154.377 97.821 155.133 99.054 156.357 cv
100.278 157.59 101.034 159.273 101.034 161.145 cv
101.034 163.017 100.278 164.709 99.054 165.942 cv
97.821 167.166 96.129 167.922 94.257 167.922 cv
354.348 165.384 mo
353.184 165.384 352.065 165.186 351.023 164.823 cv
351.429 159.075 353.931 153.903 357.768 150.066 cv
358.707 149.127 359.726 148.269 360.814 147.501 cv
361.05 147.698 361.277 147.905 361.494 148.122 cv
363.33 149.958 364.464 152.478 364.464 155.277 cv
364.464 158.067 363.33 160.587 361.494 162.423 cv
359.667 164.25 357.138 165.384 354.348 165.384 cv
350.051 164.427 mo
348.985 163.925 348.019 163.245 347.193 162.423 cv
345.366 160.587 344.232 158.067 344.232 155.277 cv
344.232 152.478 345.366 149.958 347.193 148.122 cv
349.029 146.295 351.558 145.161 354.348 145.161 cv
356.431 145.161 358.368 145.793 359.976 146.873 cv
354.431 150.895 350.658 157.209 350.051 164.427 cv
47.925 138.132 mo
46.053 138.132 44.361 137.376 43.128 136.152 cv
41.904 134.919 41.148 133.236 41.148 131.364 cv
41.148 129.492 41.904 127.8 43.128 126.567 cv
44.361 125.343 46.053 124.587 47.925 124.587 cv
49.797 124.587 51.489 125.343 52.713 126.567 cv
53.937 127.8 54.702 129.492 54.702 131.364 cv
54.702 133.236 53.937 134.919 52.713 136.152 cv
51.489 137.376 49.797 138.132 47.925 138.132 cv
385.884 120.996 mo
381.33 120.996 377.217 119.151 374.229 116.172 cv
372.504 114.447 371.16 112.342 370.333 109.992 cv
373.09 111.272 376.164 111.987 379.404 111.987 cv
389.285 111.987 397.604 105.361 400.175 96.3184 cv
401.567 98.7349 402.363 101.535 402.363 104.526 cv
402.363 109.08 400.518 113.193 397.53 116.172 cv
394.551 119.151 390.429 120.996 385.884 120.996 cv
58.743 120.087 mo
53.055 120.087 47.916 117.783 44.19 114.048 cv
40.464 110.322 38.169 105.183 38.169 99.495 cv
38.169 93.816 40.464 88.668 44.19 84.942 cv
47.6793 81.4527 52.4081 79.2106 57.6661 78.9397 cv
59.0695 84.0916 63.7826 87.876 69.381 87.876 cv
71.3235 87.876 73.16 87.4186 74.7896 86.6064 cv
77.6278 90.1354 79.326 94.6195 79.326 99.495 cv
79.326 105.183 77.022 110.322 73.296 114.048 cv
69.57 117.783 64.431 120.087 58.743 120.087 cv
104.193 114.966 mo
102.321 114.966 100.629 114.21 99.396 112.977 cv
98.172 111.753 97.416 110.061 97.416 108.189 cv
97.416 106.317 98.172 104.625 99.396 103.401 cv
100.629 102.168 102.321 101.412 104.193 101.412 cv
106.065 101.412 107.757 102.168 108.981 103.401 cv
110.205 104.625 110.97 106.317 110.97 108.189 cv
110.97 110.061 110.205 111.753 108.981 112.977 cv
107.757 114.21 106.065 114.966 104.193 114.966 cv
379.404 110.988 mo
375.988 110.988 372.768 110.154 369.933 108.679 cv
369.588 107.353 369.405 105.961 369.405 104.526 cv
369.405 99.972 371.25 95.859 374.229 92.871 cv
377.217 89.892 381.33 88.047 385.884 88.047 cv
390.429 88.047 394.551 89.892 397.53 92.871 cv
398.234 93.5751 398.874 94.3415 399.442 95.1616 cv
398.549 98.9333 396.618 102.306 393.966 104.958 cv
390.24 108.684 385.101 110.988 379.404 110.988 cv
256.446 95.103 mo
254.574 95.103 252.882 94.347 251.649 93.123 cv
250.425 91.89 249.669 90.207 249.669 88.335 cv
249.669 86.463 250.425 84.771 251.649 83.538 cv
252.882 82.314 254.574 81.558 256.446 81.558 cv
258.318 81.558 260.01 82.314 261.234 83.538 cv
262.467 84.771 263.223 86.463 263.223 88.335 cv
263.223 90.207 262.467 91.89 261.234 93.123 cv
260.01 94.347 258.318 95.103 256.446 95.103 cv
136.629 92.448 mo
134.757 92.448 133.065 91.692 131.841 90.468 cv
130.608 89.235 129.852 87.543 129.852 85.68 cv
129.852 83.799 130.608 82.116 131.841 80.883 cv
133.065 79.659 134.757 78.903 136.629 78.903 cv
138.501 78.903 140.193 79.659 141.426 80.883 cv
142.65 82.116 143.406 83.799 143.406 85.68 cv
143.406 87.543 142.65 89.235 141.426 90.468 cv
140.193 91.692 138.501 92.448 136.629 92.448 cv
69.381 86.877 mo
66.303 86.877 63.522 85.635 61.506 83.619 cv
60.2056 82.3244 59.2289 80.7139 58.6958 78.9123 cv
58.7114 78.9123 58.7274 78.912 58.743 78.912 cv
58.743 78.408 li
58.743 77.913 li
58.6455 77.913 58.5477 77.9137 58.4505 77.915 cv
58.3121 77.213 58.239 76.4872 58.239 75.744 cv
58.239 72.666 59.481 69.885 61.506 67.869 cv
63.522 65.853 66.303 64.602 69.381 64.602 cv
72.459 64.602 75.24 65.853 77.256 67.869 cv
79.272 69.885 80.523 72.666 80.523 75.744 cv
80.523 78.822 79.272 81.603 77.256 83.619 cv
76.593 84.282 75.8468 84.8605 75.035 85.3395 cv
71.0791 80.7902 65.2485 77.913 58.743 77.913 cv
58.743 78.408 li
58.743 78.912 li
64.431 78.912 69.57 81.216 73.296 84.942 cv
73.5807 85.2267 73.8572 85.52 74.1249 85.821 cv
72.6863 86.4983 71.0789 86.877 69.381 86.877 cv
190.017 81.9164 mo
188.318 80.846 186.366 80.1397 184.272 79.9065 cv
183.097 78.6898 182.367 77.0329 182.367 75.204 cv
182.367 73.332 183.132 71.64 184.356 70.407 cv
185.589 69.183 187.281 68.427 189.144 68.427 cv
191.016 68.427 192.708 69.183 193.941 70.407 cv
195.165 71.64 195.93 73.332 195.93 75.204 cv
195.93 77.076 195.165 78.768 193.941 79.992 cv
192.903 81.0227 191.539 81.7214 190.017 81.9164 cv
187.649 81.8055 mo
187.141 81.6906 186.653 81.5185 186.194 81.296 cv
186.692 81.4368 187.178 81.6074 187.649 81.8055 cv
105.786 80.262 mo
102.708 80.262 99.927 79.011 97.911 76.995 cv
95.895 74.979 94.644 72.198 94.644 69.129 cv
94.644 66.042 95.895 63.261 97.911 61.245 cv
99.927 59.229 102.708 57.987 105.786 57.987 cv
108.864 57.987 111.645 59.229 113.661 61.245 cv
115.677 63.261 116.928 66.042 116.928 69.129 cv
116.928 72.198 115.677 74.979 113.661 76.995 cv
111.645 79.011 108.864 80.262 105.786 80.262 cv
418.626 52.731 mo
416.754 52.731 415.062 51.975 413.838 50.742 cv
412.605 49.518 411.849 47.826 411.849 45.954 cv
411.849 44.082 412.605 42.39 413.838 41.166 cv
415.062 39.942 416.754 39.186 418.626 39.186 cv
420.498 39.186 422.19 39.942 423.423 41.166 cv
424.647 42.39 425.403 44.082 425.403 45.954 cv
425.403 47.826 424.647 49.518 423.423 50.742 cv
422.19 51.975 420.498 52.731 418.626 52.731 cv
479.808 50.472 mo
476.73 50.472 473.949 49.23 471.933 47.214 cv
469.908 45.198 468.666 42.417 468.666 39.339 cv
468.666 36.261 469.908 33.471 471.933 31.455 cv
473.949 29.439 476.73 28.197 479.808 28.197 cv
482.886 28.197 485.667 29.439 487.683 31.455 cv
489.699 33.471 490.95 36.261 490.95 39.339 cv
490.95 42.417 489.699 45.198 487.683 47.214 cv
485.667 49.23 482.886 50.472 479.808 50.472 cv
51.894 49.419 mo
50.022 49.419 48.33 48.663 47.097 47.439 cv
45.873 46.206 45.117 44.523 45.108 42.651 cv
45.117 40.77 45.873 39.087 47.097 37.854 cv
48.33 36.63 50.022 35.874 51.894 35.874 cv
53.757 35.874 55.449 36.63 56.682 37.854 cv
57.906 39.087 58.671 40.77 58.671 42.651 cv
58.671 44.523 57.906 46.206 56.682 47.439 cv
55.449 48.663 53.757 49.419 51.894 49.419 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq
#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq
#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq
#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq#+tnq
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#+tnq#,;+t#,M8!"fMA#"fhS&"g%_("g@q+"LA%-"L\70"LnC2"1eF3"2"R5"2=d8"2Op:"2b'<!lb0>
!lk6?!Qb9@!QtEB!R1QD!mglH!RUiH!Rq&K!S.2M!S@>O!87AP!8IMR!T!bU!8meV!9*qX!9=(Z!9F.[
!9X:]!9jF_!9sL`!:0Xb!:9^c!:Bdd!:Tpf!:^!g!:p-i!;$3j!;-9k!;?Em!;HKn!;QQo!;ZWp!;c]q
!;c]q!;lcr!;uis!<)ot!<2uu!<2uu!<<'!!<<'!!<<'!!<<'!!<<'!!<<'!!<<'!!<<'!!<<'!!<<'!
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!<<'!!<<'!!WW0"!rr9#"98B$"TSK%#64](#ljo*$31#+$NL,,$ig5.%KHG0%fcP1&HDb4&c_k5'*%t6
'EA(8'`\19('":;(B=C<)?9^?)?9^@)ZTgB*<6$E*WQ-F*rl6H+92?I+TMHL+ohQM,6.ZO,ldlR-3*uT
-NF)V-ia2X.0';Z.KBD\.KBD].f]M`/-#Vb/-#Vc/H>_e/cYhh0)tqj0E;%l0`V.o1&q7q1&q7r1B7@t
1]RJ"1]RJ#2#mS%2?3\(2ZNe*2ZNe+2uin.3<0"13WK+33WK+43rf4849,=:49,=;49,=<4TGF@4TGFA
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [0.021978 0.450549 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~"U,&5"U,&5"U,&4"9\i1"9\f/!s8W-!WiE)!WiE)!<E3%!!!!"!<E3$zzzzzzzzzzzzzzzzzzz!<E3&!
WrN-"U52;#RC_C$47.L%1NaV%hK9a&J>]h',)&o'bqK#(`4)-)&aG6*$$%?*ZcCF+<VgN+X/-V,UF``-
71)f-n$Jl.4H_r.Olnu.kE5'/M/S-0/#"50JG180etL>1,C^C1c.'I2)R9M2`EZT3&ilX3BB2^3]];_4
$,Mc~>
<~St;OFSt;RJU8+Q_W2co#Y->4=[C3QS]">Yi^VI\'`Poj;aND]McHjhae'uq!f@\d2gtgiEi8N_VjQ5Oe
kiqBulg4!+n*fc9o()DEp%J+Rq"X[\q>'maqu$BjrVc`ps8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
255 <~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!<E3%!<E3&!WiE)!WrN,!s8Z/"9\i1"U,&6"pYA<#7(S@#
RC_D$47.K$OdFQ%1WjY%hB3_&J5Wg',2/r'c%Q$(Dn#.)B'P6*$$(A+!2RI+<_pR,:"N\,pjue-n$Mo.
k</&/M8Y/0JYC=1G^jE2)[ER~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
525.114 309.762 mo
523.387 309.762 521.684 309.647 520.017 309.427 cv
520.056 309.096 520.11 308.767 520.179 308.44 cv
521.794 308.653 523.441 308.763 525.114 308.763 cv
530.723 308.763 536.043 307.531 540.82 305.323 cv
540.982 305.615 541.13 305.913 541.265 306.216 cv
536.354 308.492 530.883 309.762 525.114 309.762 cv
519.029 309.283 mo
513.164 308.351 507.741 306.093 503.077 302.827 cv
503.068 302.398 503.046 301.973 503.011 301.551 cv
507.695 304.981 513.206 307.347 519.19 308.297 cv
519.122 308.624 519.069 308.953 519.029 309.283 cv
542.165 305.785 mo
542.03 305.482 541.882 305.184 541.721 304.892 cv
545.393 303.073 548.724 300.669 551.592 297.801 cv
558.369 291.024 562.554 281.673 562.554 271.332 cv
562.554 260.982 558.369 251.622 551.592 244.845 cv
544.815 238.068 535.455 233.883 525.114 233.883 cv
514.773 233.883 505.413 238.068 498.636 244.845 cv
491.859 251.622 487.665 260.982 487.665 271.332 cv
487.665 275.777 488.44 280.039 489.862 283.992 cv
489.467 283.84 489.064 283.699 488.657 283.57 cv
487.366 279.727 486.666 275.611 486.666 271.332 cv
486.666 271.332 li
486.666 271.332 li
486.666 271.332 li
486.666 250.083 503.883 232.884 525.114 232.884 cv
546.345 232.884 563.553 250.083 563.553 271.332 cv
563.553 286.439 554.84 299.504 542.165 305.785 cv
502.047 302.081 mo
496.217 297.705 491.673 291.713 489.081 284.766 cv
489.511 284.921 489.934 285.09 490.35 285.273 cv
492.251 290.002 495.09 294.254 498.636 297.801 cv
499.672 298.837 500.768 299.812 501.919 300.72 cv
501.977 301.169 502.02 301.623 502.047 302.081 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8
#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8
#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8
#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8#%ml8
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#%ml8#&!r9"`"&;"`42="`OD@"E=A@"EFGA"EaYD"EseF"F'kG"+'tI"+:+K"+L7M"+^CO"+gIP!egRR
!f$^T!f-dU!fR'Y!fd3[!g*E^!g3K_!L*N`!L<Zb!LE`c!L`rf!Ls)h!M'/i!2'8k!29Dm!2BJn!2]\q
!2fbr!3,tu!36&!!3?,"!3Z>%!3cD&!3uP(!42\*!4Dh,!4Vt.!4`%/!4i+0!5&72!5/=3!5AI5!5SU7
!5\[8!5ng:!6"m;!6+s<!6>*>!6G0?!6Y<A!6bBB!6kHC!71ZF!7:`G!7CfH!7UrJ!7_#K!7q/M!8%5N
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!8%5N!8%5N!8%5N!8%5N!8%5N!S@>O!S@>O!n[GP"5!PQ"P<YS"kWbT#M8tV#hT(W$.f+W$J,4X$eG=Y
$eG=Y%+bFZ%G(O\%bCX]&(^a^&D$j_&_?s`'%R!`'@m*b'\33c(=iEe(=iEe(Y&He(tAQg):\Zh)V"ci
)q4fj*7Ook*Rk#m*Rk#m*n1,o*n1,o+4L5p+Og>r+Og>r+k-Gt,1HPu,LcZ",gu]#,gu]#-.;f%-IMi%
-IMi%-dhr'.+/&).FA)*.a\2+.a\2,/(";./C4>//^OG00$jP20$jP20$aJ20@'S40[B\60[9V61!T_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [0.021978 0.450549 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~"U,&5"U,&5"U,#3"9\i0!s8W-!s8W-!WiE)!WiE)!<E3%!<E3%!<E3%zzzzzzzzzzzzzzzzzzzzz!!**
%!WiH+"9\l4#6tJ>#RLeE$47+I$O[@O%1NdW%hB0^&.oKe&ebol'GV>t()@]&(Dmu,)&aD4)]Kb:*#ot
>*??1B*ZlIG+!;[L+X&$R,9nEX,U=W],paia-7:/h-n$Mn.4H_r.k<,$/1iG*/M/P+/hSe10/#"5~>
<~AS#FaAS#IcBPD6uD/X?3E,p&CG'8+UH[L6jIt3'$KS>/8Ll74OO-#HcPE_>tQC+)0S"-(BTV8*TV5:)g
WN)u!Xfeh2Z*L^C[C3QS\@K2_]Y2%o^qde(_o0L4`lH0Bb0%oNc-O__d*^:jeCE.$f%/F'f%/F'f%/F'
f%/F'f%/F'f%/F'f%/F'f%&=$e^`4#e^`4#e^`4#e^`4#e^`4"eC<!teC<!teC;sre'ldpe'ldodaHRl
daHRldaHRldaHRldaHRldaHRldaHOjdF$@hdEp7ed*U.dd*U+bcd0q`cd0q_cHa_\cHa_\c-=MXc-=JV
~>
255 <~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!$#!<E3%!<E3%!<E3&!WiE)!WiE)!WiH+!s8W-!s
A`0"9\l3"U,)7"pP89"pYA<#7(S@#RC_C$47+I$O[=M$O[=N$k3XU%LrsY%hB3_&J5Te&J>]h&ebol'G
M8s()@Z$~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
374.184 190.692 mo
360.81 190.692 349.965 179.856 349.965 166.482 cv
349.965 166.482 li
349.965 166.482 li
349.965 166.482 li
349.965 166.151 349.972 165.822 349.985 165.493 cv
350.306 165.631 350.636 165.753 350.972 165.86 cv
350.967 166.067 350.964 166.274 350.964 166.482 cv
350.964 172.899 353.565 178.695 357.768 182.898 cv
361.971 187.101 367.776 189.693 374.184 189.693 cv
380.592 189.693 386.397 187.101 390.6 182.898 cv
394.812 178.695 397.413 172.899 397.413 166.482 cv
397.413 160.074 394.812 154.269 390.6 150.066 cv
386.397 145.863 380.592 143.271 374.184 143.271 cv
369.579 143.271 365.286 144.609 361.674 146.923 cv
361.411 146.691 361.136 146.473 360.852 146.267 cv
364.676 143.742 369.259 142.272 374.184 142.272 cv
387.558 142.272 398.412 153.108 398.412 166.482 cv
398.412 179.856 387.558 190.692 374.184 190.692 cv
351.023 164.823 mo
350.691 164.707 350.367 164.575 350.051 164.427 cv
350.658 157.209 354.431 150.895 359.976 146.873 cv
360.266 147.068 360.546 147.278 360.814 147.501 cv
359.726 148.269 358.707 149.127 357.768 150.066 cv
353.931 153.903 351.429 159.075 351.023 164.823 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
418.626 53.73 mo
414.333 53.73 410.85 50.247 410.85 45.954 cv
410.85 45.954 li
410.85 45.954 li
410.85 45.954 li
410.85 41.661 414.333 38.187 418.626 38.187 cv
422.919 38.187 426.402 41.661 426.402 45.954 cv
426.402 50.247 422.919 53.73 418.626 53.73 cv
411.849 45.954 mo
411.849 47.826 412.605 49.518 413.838 50.742 cv
415.062 51.975 416.754 52.731 418.626 52.731 cv
420.498 52.731 422.19 51.975 423.423 50.742 cv
424.647 49.518 425.403 47.826 425.403 45.954 cv
425.403 44.082 424.647 42.39 423.423 41.166 cv
422.19 39.942 420.498 39.186 418.626 39.186 cv
416.754 39.186 415.062 39.942 413.838 41.166 cv
412.605 42.39 411.849 44.082 411.849 45.954 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
51.894 50.418 mo
47.601 50.418 44.109 46.944 44.109 42.651 cv
44.109 42.651 li
44.109 42.651 li
44.109 42.651 li
44.109 38.349 47.601 34.875 51.894 34.875 cv
56.178 34.875 59.67 38.349 59.67 42.651 cv
59.67 46.944 56.178 50.418 51.894 50.418 cv
45.108 42.651 mo
45.117 44.523 45.873 46.206 47.097 47.439 cv
48.33 48.663 50.022 49.419 51.894 49.419 cv
53.757 49.419 55.449 48.663 56.682 47.439 cv
57.906 46.206 58.671 44.523 58.671 42.651 cv
58.671 40.77 57.906 39.087 56.682 37.854 cv
55.449 36.63 53.757 35.874 51.894 35.874 cv
50.022 35.874 48.33 36.63 47.097 37.854 cv
45.873 39.087 45.117 40.77 45.108 42.651 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
189.144 82.98 mo
187.089 82.9757 185.216 82.1735 183.823 80.8661 cv
184.638 80.9349 185.431 81.0802 186.194 81.296 cv
186.653 81.5185 187.141 81.6906 187.649 81.8055 cv
188.399 82.1207 189.111 82.5059 189.779 82.9528 cv
189.57 82.9701 189.358 82.9796 189.144 82.98 cv
191.152 82.7144 mo
190.788 82.4299 190.409 82.1635 190.017 81.9164 cv
191.539 81.7214 192.903 81.0227 193.941 79.992 cv
195.165 78.768 195.93 77.076 195.93 75.204 cv
195.93 73.332 195.165 71.64 193.941 70.407 cv
192.708 69.183 191.016 68.427 189.144 68.427 cv
187.281 68.427 185.589 69.183 184.356 70.407 cv
183.132 71.64 182.367 73.332 182.367 75.204 cv
182.367 77.0329 183.097 78.6898 184.272 79.9065 cv
183.819 79.856 183.359 79.8279 182.894 79.8229 cv
181.936 78.5318 181.368 76.9347 181.368 75.204 cv
181.368 75.204 li
181.368 75.204 li
181.368 75.204 li
181.368 70.911 184.86 67.428 189.144 67.428 cv
193.437 67.428 196.929 70.911 196.929 75.204 cv
196.929 78.8029 194.475 81.8256 191.152 82.7144 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
47.925 139.131 mo
43.632 139.131 40.149 135.657 40.149 131.364 cv
40.149 131.364 li
40.149 131.364 li
40.149 131.364 li
40.149 127.062 43.632 123.588 47.925 123.588 cv
52.218 123.588 55.701 127.062 55.701 131.364 cv
55.701 135.657 52.218 139.131 47.925 139.131 cv
41.148 131.364 mo
41.148 133.236 41.904 134.919 43.128 136.152 cv
44.361 137.376 46.053 138.132 47.925 138.132 cv
49.797 138.132 51.489 137.376 52.713 136.152 cv
53.937 134.919 54.702 133.236 54.702 131.364 cv
54.702 129.492 53.937 127.8 52.713 126.567 cv
51.489 125.343 49.797 124.587 47.925 124.587 cv
46.053 124.587 44.361 125.343 43.128 126.567 cv
41.904 127.8 41.148 129.492 41.148 131.364 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
74.403 331.758 mo
70.11 331.758 66.627 328.284 66.627 323.991 cv
66.627 323.991 li
66.627 323.991 li
66.627 323.991 li
66.627 319.689 70.11 316.215 74.403 316.215 cv
78.696 316.215 82.179 319.689 82.179 323.991 cv
82.179 328.284 78.696 331.758 74.403 331.758 cv
67.626 323.991 mo
67.626 325.863 68.382 327.546 69.606 328.779 cv
70.839 330.003 72.531 330.759 74.403 330.759 cv
76.275 330.759 77.967 330.003 79.191 328.779 cv
80.415 327.546 81.18 325.863 81.18 323.991 cv
81.18 322.119 80.415 320.427 79.191 319.194 cv
77.967 317.97 76.275 317.214 74.403 317.214 cv
72.531 317.214 70.839 317.97 69.606 319.194 cv
68.382 320.427 67.626 322.119 67.626 323.991 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
47.925 222.534 mo
43.632 222.534 40.149 219.051 40.149 214.758 cv
40.149 214.758 li
40.149 214.758 li
40.149 214.758 li
40.149 210.465 43.632 206.982 47.925 206.982 cv
52.218 206.982 55.701 210.465 55.701 214.758 cv
55.701 219.051 52.218 222.534 47.925 222.534 cv
41.148 214.758 mo
41.148 216.63 41.904 218.322 43.128 219.546 cv
44.361 220.779 46.053 221.535 47.925 221.535 cv
49.797 221.535 51.489 220.779 52.713 219.546 cv
53.937 218.322 54.702 216.63 54.702 214.758 cv
54.702 212.886 53.937 211.194 52.713 209.97 cv
51.489 208.746 49.797 207.99 47.925 207.981 cv
46.053 207.99 44.361 208.746 43.128 209.97 cv
41.904 211.194 41.148 212.886 41.148 214.758 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
94.257 168.921 mo
89.964 168.921 86.481 165.447 86.481 161.145 cv
86.481 161.145 li
86.481 161.145 li
86.481 161.145 li
86.481 156.852 89.964 153.378 94.257 153.378 cv
98.55 153.378 102.033 156.852 102.033 161.145 cv
102.033 165.447 98.55 168.921 94.257 168.921 cv
87.48 161.145 mo
87.48 163.017 88.245 164.709 89.469 165.942 cv
90.693 167.166 92.385 167.922 94.257 167.922 cv
96.129 167.922 97.821 167.166 99.054 165.942 cv
100.278 164.709 101.034 163.017 101.034 161.145 cv
101.034 159.273 100.278 157.59 99.054 156.357 cv
97.821 155.133 96.129 154.377 94.257 154.377 cv
92.385 154.377 90.693 155.133 89.469 156.357 cv
88.245 157.59 87.48 159.273 87.48 161.145 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
71.091 192.087 mo
66.798 192.087 63.315 188.613 63.315 184.32 cv
63.315 184.32 li
63.315 184.32 li
63.315 184.32 li
63.315 180.018 66.798 176.544 71.091 176.544 cv
75.384 176.544 78.867 180.018 78.867 184.32 cv
78.867 188.613 75.384 192.087 71.091 192.087 cv
64.314 184.32 mo
64.314 186.192 65.07 187.884 66.294 189.108 cv
67.527 190.332 69.219 191.088 71.091 191.088 cv
72.963 191.088 74.655 190.332 75.879 189.108 cv
77.112 187.884 77.868 186.192 77.868 184.32 cv
77.868 182.448 77.112 180.756 75.879 179.523 cv
74.655 178.299 72.963 177.543 71.091 177.543 cv
69.219 177.543 67.527 178.299 66.294 179.523 cv
65.07 180.756 64.314 182.448 64.314 184.32 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
256.446 96.102 mo
252.153 96.102 248.67 92.628 248.67 88.335 cv
248.67 88.335 li
248.67 88.335 li
248.67 88.335 li
248.67 84.033 252.153 80.559 256.446 80.559 cv
260.739 80.559 264.222 84.033 264.222 88.335 cv
264.222 92.628 260.739 96.102 256.446 96.102 cv
249.669 88.335 mo
249.669 90.207 250.425 91.89 251.649 93.123 cv
252.882 94.347 254.574 95.103 256.446 95.103 cv
258.318 95.103 260.01 94.347 261.234 93.123 cv
262.467 91.89 263.223 90.207 263.223 88.335 cv
263.223 86.463 262.467 84.771 261.234 83.538 cv
260.01 82.314 258.318 81.558 256.446 81.558 cv
254.574 81.558 252.882 82.314 251.649 83.538 cv
250.425 84.771 249.669 86.463 249.669 88.335 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
104.193 115.965 mo
99.9 115.965 96.417 112.482 96.417 108.189 cv
96.417 108.189 li
96.417 108.189 li
96.417 108.189 li
96.417 103.896 99.9 100.413 104.193 100.413 cv
108.486 100.413 111.969 103.896 111.969 108.189 cv
111.969 112.482 108.486 115.965 104.193 115.965 cv
97.416 108.189 mo
97.416 110.061 98.172 111.753 99.396 112.977 cv
100.629 114.21 102.321 114.966 104.193 114.966 cv
106.065 114.966 107.757 114.21 108.981 112.977 cv
110.205 111.753 110.97 110.061 110.97 108.189 cv
110.97 106.317 110.205 104.625 108.981 103.401 cv
107.757 102.168 106.065 101.412 104.193 101.412 cv
102.321 101.412 100.629 102.168 99.396 103.401 cv
98.172 104.625 97.416 106.317 97.416 108.189 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
136.629 93.447 mo
132.336 93.447 128.853 89.973 128.853 85.68 cv
128.853 85.68 li
128.853 85.68 li
128.853 85.68 li
128.853 81.378 132.336 77.904 136.629 77.895 cv
140.922 77.904 144.405 81.378 144.405 85.68 cv
144.405 89.973 140.922 93.447 136.629 93.447 cv
129.852 85.68 mo
129.852 87.543 130.608 89.235 131.841 90.468 cv
133.065 91.692 134.757 92.448 136.629 92.448 cv
138.501 92.448 140.193 91.692 141.426 90.468 cv
142.65 89.235 143.406 87.543 143.406 85.68 cv
143.406 83.799 142.65 82.116 141.426 80.883 cv
140.193 79.659 138.501 78.903 136.629 78.903 cv
134.757 78.903 133.065 79.659 131.841 80.883 cv
130.608 82.116 129.852 83.799 129.852 85.68 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
659.952 296.478 mo
646.578 296.478 635.724 285.642 635.724 272.268 cv
635.724 272.268 li
635.724 272.268 li
635.724 272.268 li
635.724 258.885 646.578 248.049 659.952 248.049 cv
672.36 248.049 682.604 257.388 684.007 269.435 cv
683.672 269.465 683.342 269.512 683.017 269.575 cv
682.401 264.237 679.974 259.458 676.368 255.852 cv
672.165 251.649 666.36 249.048 659.952 249.048 cv
653.535 249.048 647.739 251.649 643.527 255.852 cv
639.324 260.055 636.723 265.851 636.723 272.268 cv
636.723 278.676 639.324 284.481 643.527 288.684 cv
647.739 292.878 653.535 295.479 659.952 295.479 cv
666.36 295.479 672.165 292.878 676.368 288.684 cv
677.177 287.875 677.925 287.007 678.608 286.087 cv
678.859 286.306 679.122 286.512 679.394 286.703 cv
674.978 292.636 667.91 296.478 659.952 296.478 cv
679.974 285.89 mo
679.7 285.698 679.438 285.49 679.19 285.268 cv
681.703 281.558 683.172 277.083 683.172 272.268 cv
683.172 271.699 683.151 271.134 683.111 270.575 cv
683.435 270.508 683.766 270.459 684.102 270.43 cv
684.148 271.036 684.171 271.65 684.171 272.268 cv
684.171 277.32 682.622 282.01 679.974 285.89 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
69.381 87.876 mo
63.7826 87.876 59.0695 84.0916 57.6661 78.9397 cv
58.0074 78.9221 58.3502 78.9131 58.6958 78.9123 cv
59.2289 80.7139 60.2056 82.3244 61.506 83.619 cv
63.522 85.635 66.303 86.877 69.381 86.877 cv
71.0789 86.877 72.6863 86.4983 74.1249 85.821 cv
74.3529 86.0772 74.5745 86.339 74.7896 86.6064 cv
73.16 87.4186 71.3235 87.876 69.381 87.876 cv
75.6793 86.1163 mo
75.4703 85.8521 75.2559 85.5935 75.035 85.3395 cv
75.8468 84.8605 76.593 84.282 77.256 83.619 cv
79.272 81.603 80.523 78.822 80.523 75.744 cv
80.523 72.666 79.272 69.885 77.256 67.869 cv
75.24 65.853 72.459 64.602 69.381 64.602 cv
66.303 64.602 63.522 65.853 61.506 67.869 cv
59.481 69.885 58.239 72.666 58.239 75.744 cv
58.239 76.4872 58.3121 77.213 58.4505 77.915 cv
58.1116 77.9195 57.7758 77.932 57.4409 77.9519 cv
57.3093 77.2359 57.24 76.4982 57.24 75.744 cv
57.24 75.744 li
57.24 75.744 li
57.24 75.744 li
57.24 69.039 62.676 63.603 69.381 63.603 cv
76.077 63.603 81.522 69.039 81.522 75.744 cv
81.522 80.1413 79.1801 83.9887 75.6793 86.1163 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
44.109 326.313 mo
37.413 326.313 31.977 320.877 31.977 314.181 cv
31.977 314.181 li
31.977 314.181 li
31.977 314.181 li
31.977 307.467 37.413 302.04 44.109 302.04 cv
50.814 302.04 56.259 307.467 56.259 314.181 cv
56.25 320.877 50.814 326.313 44.109 326.313 cv
32.976 314.181 mo
32.976 317.259 34.218 320.031 36.234 322.056 cv
38.259 324.072 41.04 325.314 44.109 325.314 cv
47.187 325.314 49.977 324.072 51.993 322.056 cv
54.009 320.031 55.251 317.259 55.251 314.181 cv
55.251 311.094 54.009 308.313 51.993 306.297 cv
49.977 304.281 47.187 303.039 44.109 303.039 cv
41.04 303.039 38.259 304.281 36.234 306.297 cv
34.218 308.313 32.976 311.094 32.976 314.181 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
74.403 264.906 mo
67.698 264.906 62.262 259.479 62.262 252.774 cv
62.262 252.774 li
62.262 252.774 li
62.262 252.774 li
62.262 246.069 67.698 240.633 74.403 240.633 cv
81.099 240.633 86.544 246.069 86.544 252.774 cv
86.544 259.479 81.099 264.906 74.403 264.906 cv
63.261 252.774 mo
63.261 255.852 64.503 258.633 66.519 260.649 cv
68.544 262.665 71.325 263.907 74.403 263.907 cv
77.481 263.907 80.262 262.665 82.278 260.649 cv
84.294 258.633 85.545 255.852 85.545 252.774 cv
85.545 249.696 84.294 246.915 82.278 244.899 cv
80.262 242.883 77.481 241.632 74.403 241.632 cv
71.325 241.632 68.544 242.883 66.519 244.899 cv
64.503 246.915 63.261 249.696 63.261 252.774 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
105.786 81.261 mo
99.081 81.261 93.645 75.825 93.645 69.129 cv
93.645 69.129 li
93.645 69.129 li
93.645 69.129 li
93.645 62.415 99.081 56.988 105.786 56.979 cv
112.491 56.988 117.927 62.415 117.927 69.129 cv
117.927 75.825 112.491 81.261 105.786 81.261 cv
94.644 69.129 mo
94.644 72.198 95.895 74.979 97.911 76.995 cv
99.927 79.011 102.708 80.262 105.786 80.262 cv
108.864 80.262 111.645 79.011 113.661 76.995 cv
115.677 74.979 116.928 72.198 116.928 69.129 cv
116.928 66.042 115.677 63.261 113.661 61.245 cv
111.645 59.229 108.864 57.987 105.786 57.987 cv
102.708 57.987 99.927 59.229 97.911 61.245 cv
95.895 63.261 94.644 66.042 94.644 69.129 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
143.91 175.545 mo
137.205 175.545 131.769 170.109 131.769 163.404 cv
131.769 163.404 li
131.769 163.404 li
131.769 163.404 li
131.769 156.699 137.205 151.263 143.91 151.263 cv
150.615 151.263 156.051 156.699 156.051 163.404 cv
156.051 170.109 150.615 175.545 143.91 175.545 cv
132.768 163.404 mo
132.768 166.482 134.019 169.263 136.035 171.279 cv
138.051 173.295 140.832 174.546 143.91 174.546 cv
146.988 174.546 149.769 173.295 151.785 171.279 cv
153.801 169.263 155.052 166.482 155.052 163.404 cv
155.052 160.326 153.801 157.545 151.785 155.529 cv
149.769 153.513 146.988 152.271 143.91 152.271 cv
140.832 152.271 138.051 153.513 136.035 155.529 cv
134.019 157.545 132.768 160.326 132.768 163.404 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
439.362 72.405 mo
431.811 72.405 425.691 66.276 425.682 58.725 cv
425.691 51.174 431.811 45.045 439.362 45.036 cv
439.362 45.54 li
439.362 46.044 li
435.861 46.044 432.693 47.457 430.398 49.752 cv
428.103 52.056 426.69 55.224 426.69 58.725 cv
426.69 62.226 428.103 65.394 430.398 67.689 cv
432.693 69.984 435.861 71.406 439.362 71.406 cv
442.863 71.406 446.031 69.984 448.326 67.689 cv
450.621 65.394 452.043 62.226 452.043 58.725 cv
452.043 55.224 450.621 52.056 448.326 49.752 cv
446.031 47.457 442.863 46.044 439.362 46.044 cv
439.362 45.54 li
439.362 45.036 li
446.922 45.036 453.042 51.174 453.042 58.725 cv
453.042 66.276 446.922 72.405 439.362 72.405 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
380.394 321.03 mo
372.843 321.03 366.714 314.901 366.714 307.35 cv
366.714 299.799 372.843 293.67 380.394 293.67 cv
380.394 294.165 li
380.394 294.669 li
376.893 294.669 373.725 296.091 371.43 298.386 cv
369.135 300.681 367.713 303.849 367.713 307.35 cv
367.713 310.851 369.135 314.019 371.43 316.314 cv
373.725 318.609 376.893 320.031 380.394 320.031 cv
383.895 320.031 387.063 318.609 389.358 316.314 cv
391.653 314.019 393.066 310.851 393.066 307.35 cv
393.066 303.849 391.653 300.681 389.358 298.386 cv
387.063 296.091 383.895 294.669 380.394 294.669 cv
380.394 294.165 li
380.394 293.67 li
387.945 293.67 394.065 299.799 394.065 307.35 cv
394.065 314.901 387.945 321.03 380.394 321.03 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
278.667 65.214 mo
271.116 65.214 264.996 59.085 264.996 51.534 cv
264.996 43.983 271.116 37.854 278.667 37.854 cv
278.667 38.349 li
278.667 38.853 li
275.166 38.853 271.998 40.275 269.703 42.57 cv
267.408 44.865 265.995 48.033 265.995 51.534 cv
265.995 55.035 267.408 58.203 269.703 60.498 cv
271.998 62.793 275.166 64.215 278.667 64.215 cv
282.168 64.215 285.336 62.793 287.631 60.498 cv
289.926 58.203 291.339 55.035 291.348 51.534 cv
291.339 48.033 289.926 44.865 287.631 42.57 cv
285.336 40.275 282.168 38.853 278.667 38.853 cv
278.667 38.349 li
278.667 37.854 li
286.227 37.854 292.347 43.983 292.347 51.534 cv
292.347 59.085 286.227 65.214 278.667 65.214 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
127.602 65.214 mo
120.042 65.214 113.922 59.085 113.922 51.534 cv
113.922 43.983 120.042 37.854 127.602 37.854 cv
127.602 38.349 li
127.602 38.853 li
124.092 38.853 120.933 40.275 118.638 42.57 cv
116.343 44.865 114.921 48.033 114.921 51.534 cv
114.921 55.035 116.343 58.203 118.638 60.498 cv
120.933 62.793 124.092 64.215 127.602 64.215 cv
131.103 64.215 134.262 62.793 136.566 60.498 cv
138.852 58.203 140.274 55.035 140.274 51.534 cv
140.274 48.033 138.852 44.865 136.566 42.57 cv
134.262 40.275 131.103 38.853 127.602 38.853 cv
127.602 38.349 li
127.602 37.854 li
135.153 37.854 141.273 43.983 141.273 51.534 cv
141.273 59.085 135.153 65.214 127.602 65.214 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
224.712 149.148 mo
217.152 149.148 211.032 143.019 211.032 135.468 cv
211.032 127.917 217.152 121.788 224.712 121.788 cv
224.712 122.292 li
224.712 122.787 li
221.211 122.787 218.043 124.209 215.748 126.504 cv
213.453 128.799 212.031 131.967 212.031 135.468 cv
212.031 138.969 213.453 142.137 215.748 144.432 cv
218.043 146.736 221.211 148.149 224.712 148.149 cv
228.213 148.149 231.381 146.736 233.676 144.432 cv
235.971 142.137 237.384 138.969 237.384 135.468 cv
237.384 131.967 235.971 128.799 233.676 126.504 cv
231.381 124.209 228.213 122.787 224.712 122.787 cv
224.712 122.292 li
224.712 121.788 li
232.263 121.788 238.383 127.917 238.383 135.468 cv
238.383 143.019 232.263 149.148 224.712 149.148 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
182.745 107.181 mo
175.185 107.181 169.065 101.052 169.065 93.501 cv
169.065 85.95 175.185 79.821 182.745 79.821 cv
182.745 80.316 li
182.745 80.82 li
179.244 80.82 176.076 82.242 173.781 84.537 cv
171.486 86.832 170.073 90 170.064 93.501 cv
170.073 97.002 171.486 100.17 173.781 102.465 cv
176.076 104.769 179.244 106.182 182.745 106.182 cv
186.246 106.182 189.414 104.769 191.709 102.465 cv
194.004 100.17 195.417 97.002 195.417 93.501 cv
195.417 90 194.004 86.832 191.709 84.537 cv
191.12 83.9483 190.474 83.4174 189.779 82.9528 cv
190.25 82.9139 190.709 82.8331 191.152 82.7144 cv
194.356 85.2188 196.416 89.1204 196.416 93.501 cv
196.416 101.052 190.296 107.181 182.745 107.181 cv
189.144 81.972 mo
188.631 81.972 188.13 81.9143 187.649 81.8055 cv
187.178 81.6074 186.692 81.4368 186.194 81.296 cv
185.511 80.9648 184.89 80.5224 184.356 79.992 cv
184.328 79.9638 184.3 79.9351 184.272 79.9065 cv
186.366 80.1397 188.318 80.846 190.017 81.9164 cv
189.731 81.953 189.44 81.972 189.144 81.972 cv
183.823 80.8661 mo
183.468 80.8362 183.108 80.82 182.745 80.82 cv
182.745 80.316 li
182.745 79.821 li
182.795 79.821 182.844 79.8223 182.894 79.8229 cv
183.172 80.1978 183.484 80.5472 183.823 80.8661 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
189.779 82.9528 mo
189.111 82.5059 188.399 82.1207 187.649 81.8055 cv
188.13 81.9143 188.631 81.972 189.144 81.972 cv
189.44 81.972 189.731 81.953 190.017 81.9164 cv
190.409 82.1635 190.788 82.4299 191.152 82.7144 cv
190.709 82.8331 190.25 82.9139 189.779 82.9528 cv
186.194 81.296 mo
185.431 81.0802 184.638 80.9349 183.823 80.8661 cv
183.484 80.5472 183.172 80.1978 182.894 79.8229 cv
183.359 79.8279 183.819 79.856 184.272 79.9065 cv
184.3 79.9351 184.328 79.9638 184.356 79.992 cv
184.89 80.5224 185.511 80.9648 186.194 81.296 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t
#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t
#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t
#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t#>G-t
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#>G-t#>P3u##G7!##P="##bI$##kO%##tU&#$:g)#$Ls+"^:p+"^M'-"^V-."^_3/"CV60"C_<1"ChB2
"D%N4"D.T5"D@`7")@i9")Io:")Ru;")e,=")n2>!ce5?!cn;@!d"AA!d4MC!I+PD!I4VE!I=\F!IOhH
!Ik%K!It+L!J(1M!J:=O!/(:O!/:FQ!/CLR!/UXT!/gdV!0$pX!0.!Y!0@-[!0I3\!0dE_!0mK`!1*Wb
!13]c!1<cd!1Nof!1Wug!1j,i!1s2j!20>l!29Dm!2KPo!2]\q!2fbr!3#nt!3,tu!36&!!3H2#!3Q8$
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!3Q8$!3Q8$!3Q8$!3H2#!3H2#!Nc;$!Nc;$"0DM&"KVP&"KVP&"fqY'#-7b(#HRk)#HRk)$*+"*$EF++
$EF++$`a4,%&s7,%B9@-%B9@-%]TI/&#oR0&#oR0&?,U0&ZG^1&ubg2&ubg2'<(p3'W:s4'W:s4(8q06
(T797(oI<7(oI<7)5dE8)Q*N9)Q*N9)l<Q:*2WZ;*Mi];*Mi];*i/f<+/Ai=+/Ai=+J\r>+enu>,,5)@
,,5)@,GG,@,bb5B,bb5B-)(>C-D:AD-_UJE-_UJE.%gMF.A-VG.A-VG.\?YH/"ZbI/=leJ/=leJ/Y2nK
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [0.021978 0.450549 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~"pP89"pP89"pP57"U,&5"U,&5"U,#3"9\i1"9S`.!s8W-!s8W,!WiE)!WiE)!<E3%!<E3$zzzzzzzzzz
zzzzzzzz!!*-'!s8W-"9\l3"pP89"pYD?#mgnE$47.K$k*OQ%1NaV%LrsZ%hK9`&J5Te&eYik',)#n'c
%Q$(Ddl((`4,.)&X>2)B0V8*#oq=*??1B*ZcCF+<VdM+X&!Q+sS<W,9nHZ,palb-71&e-R^Ak-n-So.O
lr!.k</%~>
<~91qoN91qrP9hnJ\;,U:j;cQn$=]np4>[:WA?XR8M@UiqZAS5[kC27U$DJjB3EH-#?FEMbNGBeCZH[U?l
It3*%JqJ`1L51SAMMmFQNfT6`PEV5rQBml)R@9S6S=Q7DTV/!QUSXfaVl6PnWiN5&XK8M)XK8M(X/i;%
X/i;%X/i8#WiE)!WiE)!WiE(uWMukrWMukrW2QYnW2QYnW2QYnW2HPkVl-GjVl-GjVl$>gVP^5fVP^2d
V5:#bV5:#bV50o_Una][USFTZU8"BVU8"BUTqS0RTqJ'OTV.sNTV.pLT:_aJT:VXGSt;OFSXl=BS=H+>
~>
255 <~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!$#!<E3%!<E3%!<E3%!<E3%!<E6'!WiE)!
WiE)!WiH+!s8W-!s8W."9\i1"9er4"U,&5"pP89"pP8:#6tJ=#7(S@#RC_C#mgnE~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
320.634 167.139 mo
313.083 167.139 306.963 161.01 306.963 153.459 cv
306.963 145.908 313.083 139.779 320.634 139.779 cv
320.634 140.274 li
320.634 140.778 li
317.133 140.778 313.965 142.2 311.67 144.495 cv
309.384 146.79 307.962 149.958 307.962 153.459 cv
307.962 156.96 309.384 160.128 311.67 162.423 cv
313.965 164.718 317.133 166.14 320.634 166.14 cv
324.135 166.14 327.303 164.718 329.598 162.423 cv
331.893 160.128 333.315 156.96 333.315 153.459 cv
333.315 149.958 331.893 146.79 329.598 144.495 cv
327.303 142.2 324.135 140.778 320.634 140.778 cv
320.634 140.274 li
320.634 139.779 li
328.194 139.779 334.314 145.908 334.314 153.459 cv
334.314 161.01 328.194 167.139 320.634 167.139 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
379.404 111.987 mo
376.164 111.987 373.09 111.272 370.333 109.992 cv
370.182 109.562 370.048 109.124 369.933 108.679 cv
372.768 110.154 375.988 110.988 379.404 110.988 cv
385.101 110.988 390.24 108.684 393.966 104.958 cv
396.618 102.306 398.549 98.9333 399.442 95.1616 cv
399.702 95.5363 399.946 95.9222 400.175 96.3184 cv
397.604 105.361 389.285 111.987 379.404 111.987 cv
369.085 109.362 mo
362.38 105.701 357.831 98.5827 357.831 90.405 cv
357.831 78.489 367.488 68.814 379.404 68.814 cv
379.404 69.318 li
379.404 69.813 li
373.725 69.813 368.586 72.117 364.86 75.843 cv
361.134 79.578 358.83 84.717 358.83 90.405 cv
358.83 96.084 361.134 101.232 364.86 104.958 cv
366.028 106.126 367.336 107.155 368.755 108.017 cv
368.848 108.472 368.958 108.92 369.085 109.362 cv
400.513 94.9591 mo
400.261 94.5734 399.993 94.198 399.711 93.8343 cv
399.898 92.7189 399.996 91.5731 399.996 90.405 cv
399.996 84.717 397.692 79.578 393.966 75.843 cv
390.24 72.117 385.101 69.813 379.404 69.813 cv
379.404 69.318 li
379.404 68.814 li
391.338 68.814 400.995 78.489 400.995 90.405 cv
400.995 91.9672 400.829 93.4909 400.513 94.9591 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
58.743 121.086 mo
46.818 121.086 37.161 111.411 37.161 99.495 cv
37.161 88.0161 46.1232 78.6254 57.4409 77.9519 cv
57.5024 78.2864 57.5778 78.6155 57.6661 78.9397 cv
52.4081 79.2106 47.6793 81.4527 44.19 84.942 cv
40.464 88.668 38.169 93.816 38.169 99.495 cv
38.169 105.183 40.464 110.322 44.19 114.048 cv
47.916 117.783 53.055 120.087 58.743 120.087 cv
64.431 120.087 69.57 117.783 73.296 114.048 cv
77.022 110.322 79.326 105.183 79.326 99.495 cv
79.326 94.6195 77.6278 90.1354 74.7896 86.6064 cv
75.0933 86.455 75.3906 86.2918 75.6793 86.1163 cv
78.5884 89.7945 80.325 94.4425 80.325 99.495 cv
80.325 111.411 70.668 121.086 58.743 121.086 cv
74.1249 85.821 mo
73.8572 85.52 73.5807 85.2267 73.296 84.942 cv
69.57 81.216 64.431 78.912 58.743 78.912 cv
58.743 78.408 li
58.743 77.913 li
65.2485 77.913 71.0791 80.7902 75.035 85.3395 cv
74.74 85.5135 74.4366 85.6742 74.1249 85.821 cv
58.6958 78.9123 mo
58.5992 78.5857 58.5171 78.2534 58.4505 77.915 cv
58.5477 77.9137 58.6455 77.913 58.743 77.913 cv
58.743 78.408 li
58.743 78.912 li
58.7274 78.912 58.7114 78.9123 58.6958 78.9123 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
74.7896 86.6064 mo
74.5745 86.339 74.3529 86.0772 74.1249 85.821 cv
74.4366 85.6742 74.74 85.5135 75.035 85.3395 cv
75.2559 85.5935 75.4703 85.8521 75.6793 86.1163 cv
75.3906 86.2918 75.0933 86.455 74.7896 86.6064 cv
57.6661 78.9397 mo
57.5778 78.6155 57.5024 78.2864 57.4409 77.9519 cv
57.7758 77.932 58.1116 77.9195 58.4505 77.915 cv
58.5171 78.2534 58.5992 78.5857 58.6958 78.9123 cv
58.3502 78.9131 58.0074 78.9221 57.6661 78.9397 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
220.617 246.987 mo
208.701 246.987 199.044 237.321 199.044 225.405 cv
199.044 213.489 208.701 203.814 220.617 203.814 cv
220.617 204.318 li
220.617 204.813 li
214.929 204.822 209.79 207.126 206.064 210.852 cv
202.347 214.578 200.043 219.717 200.043 225.405 cv
200.043 231.093 202.347 236.232 206.064 239.958 cv
209.79 243.684 214.929 245.988 220.617 245.988 cv
226.305 245.988 231.453 243.684 235.179 239.958 cv
238.905 236.232 241.2 231.093 241.2 225.405 cv
241.2 219.717 238.905 214.578 235.179 210.852 cv
231.453 207.126 226.305 204.822 220.617 204.813 cv
220.617 204.318 li
220.617 203.814 li
232.551 203.814 242.208 213.489 242.208 225.405 cv
242.208 237.321 232.551 246.987 220.617 246.987 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
479.808 51.471 mo
473.103 51.471 467.667 46.035 467.667 39.339 cv
467.667 39.339 li
467.667 39.339 li
467.667 39.339 li
467.667 32.625 473.103 27.198 479.808 27.198 cv
486.504 27.198 491.949 32.625 491.949 39.339 cv
491.949 46.035 486.504 51.471 479.808 51.471 cv
468.666 39.339 mo
468.666 42.417 469.908 45.198 471.933 47.214 cv
473.949 49.23 476.73 50.472 479.808 50.472 cv
482.886 50.472 485.667 49.23 487.683 47.214 cv
489.699 45.198 490.95 42.417 490.95 39.339 cv
490.95 36.261 489.699 33.471 487.683 31.455 cv
485.667 29.439 482.886 28.197 479.808 28.197 cv
476.73 28.197 473.949 29.439 471.933 31.455 cv
469.908 33.471 468.666 36.261 468.666 39.339 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
354.348 166.383 mo
353.171 166.383 352.037 166.199 350.972 165.86 cv
350.981 165.512 350.999 165.167 351.023 164.823 cv
352.065 165.186 353.184 165.384 354.348 165.384 cv
357.138 165.384 359.667 164.25 361.494 162.423 cv
363.33 160.587 364.464 158.067 364.464 155.277 cv
364.464 152.478 363.33 149.958 361.494 148.122 cv
361.277 147.905 361.05 147.698 360.814 147.501 cv
361.096 147.302 361.383 147.109 361.674 146.923 cv
363.995 148.96 365.463 151.947 365.463 155.277 cv
365.463 161.406 360.477 166.383 354.348 166.383 cv
349.985 165.493 mo
346.015 163.798 343.233 159.86 343.233 155.277 cv
343.233 155.277 li
343.233 155.277 li
343.233 155.277 li
343.233 149.139 348.21 144.162 354.348 144.162 cv
356.775 144.162 359.022 144.943 360.852 146.267 cv
360.556 146.463 360.263 146.665 359.976 146.873 cv
358.368 145.793 356.431 145.161 354.348 145.161 cv
351.558 145.161 349.029 146.295 347.193 148.122 cv
345.366 149.958 344.232 152.478 344.232 155.277 cv
344.232 158.067 345.366 160.587 347.193 162.423 cv
348.019 163.245 348.985 163.925 350.051 164.427 cv
350.022 164.78 349.999 165.136 349.985 165.493 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
350.972 165.86 mo
350.636 165.753 350.306 165.631 349.985 165.493 cv
349.999 165.136 350.022 164.78 350.051 164.427 cv
350.367 164.575 350.691 164.707 351.023 164.823 cv
350.999 165.167 350.981 165.512 350.972 165.86 cv
360.814 147.501 mo
360.546 147.278 360.266 147.068 359.976 146.873 cv
360.263 146.665 360.556 146.463 360.852 146.267 cv
361.136 146.473 361.411 146.691 361.674 146.923 cv
361.383 147.109 361.096 147.302 360.814 147.501 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
402.858 415.89 mo
396.729 415.881 391.743 410.913 391.743 404.775 cv
391.743 404.775 li
391.743 404.775 li
391.743 404.775 li
391.743 398.637 396.729 393.669 402.858 393.669 cv
408.996 393.669 413.973 398.637 413.973 404.775 cv
413.973 410.913 408.996 415.881 402.858 415.89 cv
392.742 404.775 mo
392.742 407.574 393.876 410.094 395.712 411.921 cv
397.539 413.757 400.068 414.882 402.858 414.882 cv
405.657 414.882 408.177 413.757 410.013 411.921 cv
411.84 410.094 412.974 407.574 412.974 404.775 cv
412.974 401.985 411.84 399.456 410.013 397.629 cv
408.177 395.802 405.657 394.668 402.858 394.668 cv
400.068 394.668 397.539 395.802 395.712 397.629 cv
393.876 399.456 392.742 401.985 392.742 404.775 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
369.072 360.873 mo
362.934 360.873 357.957 355.905 357.957 349.767 cv
357.957 349.767 li
357.957 349.767 li
357.957 349.767 li
357.957 343.629 362.934 338.661 369.072 338.652 cv
375.201 338.661 380.187 343.629 380.187 349.767 cv
380.187 355.905 375.201 360.873 369.072 360.873 cv
358.956 349.767 mo
358.956 352.557 360.09 355.086 361.917 356.913 cv
363.753 358.749 366.273 359.874 369.072 359.874 cv
371.862 359.874 374.391 358.749 376.218 356.913 cv
378.054 355.086 379.179 352.557 379.188 349.767 cv
379.179 346.977 378.054 344.448 376.218 342.621 cv
374.391 340.785 371.862 339.66 369.072 339.66 cv
366.273 339.66 363.753 340.785 361.917 342.621 cv
360.09 344.448 358.956 346.977 358.956 349.767 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
385.884 121.995 mo
377.914 121.995 371.184 116.658 369.085 109.362 cv
369.493 109.585 369.909 109.795 370.333 109.992 cv
371.16 112.342 372.504 114.447 374.229 116.172 cv
377.217 119.151 381.33 120.996 385.884 120.996 cv
390.429 120.996 394.551 119.151 397.53 116.172 cv
400.518 113.193 402.363 109.08 402.363 104.526 cv
402.363 101.535 401.567 98.7349 400.175 96.3184 cv
400.302 95.8711 400.415 95.4177 400.513 94.9591 cv
402.314 97.7072 403.362 100.994 403.362 104.526 cv
403.362 114.174 395.532 121.995 385.884 121.995 cv
369.933 108.679 mo
369.533 108.471 369.14 108.25 368.755 108.017 cv
368.526 106.889 368.406 105.721 368.406 104.526 cv
368.406 104.526 li
368.406 104.526 li
368.406 104.526 li
368.406 94.869 376.236 87.048 385.884 87.048 cv
391.508 87.048 396.513 89.7051 399.711 93.8343 cv
399.636 94.2818 399.546 94.7243 399.442 95.1616 cv
398.874 94.3415 398.234 93.5751 397.53 92.871 cv
394.551 89.892 390.429 88.047 385.884 88.047 cv
381.33 88.047 377.217 89.892 374.229 92.871 cv
371.25 95.859 369.405 99.972 369.405 104.526 cv
369.405 105.961 369.588 107.353 369.933 108.679 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
370.333 109.992 mo
369.909 109.795 369.493 109.585 369.085 109.362 cv
368.958 108.92 368.848 108.472 368.755 108.017 cv
369.14 108.25 369.533 108.471 369.933 108.679 cv
370.048 109.124 370.182 109.562 370.333 109.992 cv
400.175 96.3184 mo
399.946 95.9222 399.702 95.5363 399.442 95.1616 cv
399.546 94.7243 399.636 94.2818 399.711 93.8343 cv
399.993 94.198 400.261 94.5734 400.513 94.9591 cv
400.415 95.4177 400.302 95.8711 400.175 96.3184 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
571.5 207.801 mo
571.5 207.801 li
571.5 207.801 li
571.5 207.801 li
571.5 207.801 mo
553.41 207.801 538.767 193.149 538.767 175.068 cv
538.767 156.987 553.41 142.335 571.5 142.335 cv
589.572 142.335 604.224 156.987 604.224 175.068 cv
604.224 193.149 589.572 207.801 571.5 207.801 cv
571.5 207.297 li
571.5 206.802 li
580.266 206.802 588.195 203.247 593.928 197.505 cv
599.67 191.763 603.225 183.834 603.225 175.068 cv
603.225 166.302 599.67 158.373 593.928 152.631 cv
588.195 146.889 580.266 143.334 571.5 143.334 cv
562.734 143.334 554.805 146.889 549.063 152.631 cv
543.321 158.373 539.766 166.302 539.766 175.068 cv
539.766 183.834 543.321 191.763 549.063 197.505 cv
554.805 203.247 562.734 206.802 571.5 206.802 cv
571.5 207.297 li
571.5 207.801 li
571.5 207.801 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
482.445 323.919 mo
482.176 323.919 481.91 323.914 481.644 323.904 cv
481.783 323.583 481.905 323.253 482.009 322.915 cv
482.154 322.918 482.299 322.92 482.445 322.92 cv
482.445 323.415 li
482.445 323.919 li
482.445 323.919 li
482.445 323.919 mo
482.445 323.415 li
482.445 322.92 li
487.872 322.92 492.777 320.715 496.332 317.16 cv
499.887 313.605 502.083 308.691 502.083 303.273 cv
502.083 302.873 502.071 302.475 502.047 302.081 cv
502.386 302.335 502.73 302.584 503.077 302.827 cv
503.08 302.975 503.082 303.124 503.082 303.273 cv
503.082 314.667 493.848 323.919 482.445 323.919 cv
465.179 314.593 mo
463.042 311.342 461.799 307.451 461.799 303.273 cv
461.799 291.87 471.042 282.618 482.445 282.618 cv
484.61 282.618 486.696 282.952 488.657 283.57 cv
488.791 283.972 488.933 284.371 489.081 284.766 cv
487.009 284.022 484.775 283.617 482.445 283.617 cv
477.018 283.617 472.104 285.813 468.549 289.377 cv
464.994 292.932 462.798 297.846 462.798 303.273 cv
462.798 307.131 463.912 310.734 465.837 313.773 cv
465.603 314.034 465.383 314.307 465.179 314.593 cv
503.011 301.551 mo
502.641 301.281 502.278 301.004 501.919 300.72 cv
501.348 296.314 499.32 292.365 496.332 289.377 cv
494.62 287.661 492.595 286.262 490.35 285.273 cv
490.18 284.85 490.017 284.423 489.862 283.992 cv
497.087 286.778 502.348 293.514 503.011 301.551 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
503.077 302.827 mo
502.73 302.584 502.386 302.335 502.047 302.081 cv
502.02 301.623 501.977 301.169 501.919 300.72 cv
502.278 301.004 502.641 301.281 503.011 301.551 cv
503.046 301.973 503.068 302.398 503.077 302.827 cv
490.35 285.273 mo
489.934 285.09 489.511 284.921 489.081 284.766 cv
488.933 284.371 488.791 283.972 488.657 283.57 cv
489.064 283.699 489.467 283.84 489.862 283.992 cv
490.017 284.423 490.18 284.85 490.35 285.273 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
480.579 323.836 mo
474.512 323.291 469.201 320.121 465.789 315.472 cv
465.981 315.179 466.189 314.899 466.414 314.632 cv
467.054 315.534 467.769 316.38 468.549 317.16 cv
471.78 320.391 476.135 322.507 480.977 322.866 cv
480.864 323.199 480.731 323.522 480.579 323.836 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
472.923 329.634 mo
467.667 329.634 463.41 325.368 463.41 320.121 cv
463.41 318.059 464.065 316.151 465.179 314.593 cv
465.375 314.892 465.578 315.184 465.789 315.472 cv
464.917 316.809 464.409 318.407 464.409 320.121 cv
464.409 322.47 465.363 324.594 466.902 326.142 cv
468.441 327.681 470.565 328.635 472.923 328.635 cv
472.923 329.139 li
472.923 329.634 li
472.923 329.634 li
472.923 329.634 mo
472.923 329.139 li
472.923 328.635 li
475.272 328.635 477.396 327.681 478.935 326.142 cv
479.605 325.472 480.162 324.693 480.579 323.836 cv
480.931 323.867 481.286 323.89 481.644 323.904 cv
480.181 327.273 476.826 329.634 472.923 329.634 cv
482.009 322.915 mo
481.663 322.907 481.319 322.891 480.977 322.866 cv
481.27 322.004 481.428 321.082 481.428 320.121 cv
481.428 317.772 480.483 315.639 478.935 314.1 cv
477.396 312.561 475.272 311.607 472.923 311.607 cv
470.565 311.607 468.441 312.561 466.902 314.1 cv
466.732 314.27 466.569 314.448 466.414 314.632 cv
466.214 314.351 466.022 314.065 465.837 313.773 cv
467.579 311.83 470.107 310.608 472.923 310.608 cv
478.17 310.608 482.427 314.865 482.427 320.121 cv
482.427 321.093 482.281 322.031 482.009 322.915 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
481.644 323.904 mo
481.286 323.89 480.931 323.867 480.579 323.836 cv
480.731 323.522 480.864 323.199 480.977 322.866 cv
481.319 322.891 481.663 322.907 482.009 322.915 cv
481.905 323.253 481.783 323.583 481.644 323.904 cv
465.789 315.472 mo
465.578 315.184 465.375 314.892 465.179 314.593 cv
465.383 314.307 465.603 314.034 465.837 313.773 cv
466.022 314.065 466.214 314.351 466.414 314.632 cv
466.189 314.899 465.981 315.179 465.789 315.472 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
540.531 296.631 mo
540.531 296.631 li
540.531 296.631 li
540.531 296.631 li
540.531 296.631 mo
535.275 296.622 531.018 292.365 531.018 287.109 cv
531.018 281.862 535.275 277.596 540.531 277.596 cv
545.778 277.596 550.035 281.862 550.035 287.109 cv
550.035 292.365 545.778 296.622 540.531 296.631 cv
540.531 296.127 li
540.531 295.623 li
542.88 295.623 545.004 294.678 546.543 293.13 cv
548.082 291.591 549.036 289.467 549.036 287.109 cv
549.036 284.76 548.082 282.636 546.543 281.088 cv
545.004 279.549 542.88 278.595 540.531 278.595 cv
538.173 278.595 536.049 279.549 534.51 281.088 cv
532.971 282.636 532.017 284.76 532.017 287.109 cv
532.017 289.467 532.971 291.591 534.51 293.13 cv
536.049 294.678 538.173 295.623 540.531 295.623 cv
540.531 296.127 li
540.531 296.631 li
540.531 296.631 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
684.855 288.432 mo
682.822 288.429 680.94 287.789 679.394 286.703 cv
679.593 286.436 679.786 286.166 679.974 285.89 cv
681.356 286.86 683.041 287.424 684.855 287.424 cv
684.855 287.928 li
684.855 288.432 li
684.855 288.432 li
684.855 288.432 mo
684.855 287.928 li
684.855 287.424 li
687.204 287.424 689.328 286.479 690.876 284.931 cv
692.415 283.392 693.369 281.259 693.369 278.91 cv
693.369 276.561 692.415 274.437 690.876 272.889 cv
689.328 271.35 687.204 270.396 684.855 270.396 cv
684.601 270.396 684.35 270.408 684.102 270.43 cv
684.077 270.096 684.045 269.765 684.007 269.435 cv
684.286 269.41 684.569 269.397 684.855 269.397 cv
690.111 269.397 694.368 273.663 694.368 278.91 cv
694.368 284.166 690.111 288.423 684.855 288.432 cv
678.608 286.087 mo
676.607 284.342 675.342 281.775 675.342 278.91 cv
675.342 274.291 678.642 270.432 683.017 269.575 cv
683.056 269.906 683.087 270.24 683.111 270.575 cv
681.459 270.919 679.982 271.741 678.834 272.889 cv
677.295 274.437 676.341 276.561 676.341 278.91 cv
676.341 281.259 677.295 283.392 678.834 284.931 cv
678.949 285.047 679.068 285.159 679.19 285.268 cv
679.002 285.546 678.808 285.819 678.608 286.087 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
679.394 286.703 mo
679.122 286.512 678.859 286.306 678.608 286.087 cv
678.808 285.819 679.002 285.546 679.19 285.268 cv
679.438 285.49 679.7 285.698 679.974 285.89 cv
679.786 286.166 679.593 286.436 679.394 286.703 cv
683.111 270.575 mo
683.087 270.24 683.056 269.906 683.017 269.575 cv
683.342 269.512 683.672 269.465 684.007 269.435 cv
684.045 269.765 684.077 270.096 684.102 270.43 cv
683.766 270.459 683.435 270.508 683.111 270.575 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
569.232 326.142 mo
569.232 326.142 li
569.232 326.142 li
569.232 326.142 li
569.232 326.142 mo
563.976 326.142 559.719 321.885 559.719 316.629 cv
559.719 311.373 563.976 307.116 569.232 307.116 cv
574.479 307.116 578.745 311.373 578.745 316.629 cv
578.745 321.885 574.479 326.142 569.232 326.142 cv
569.232 325.647 li
569.232 325.143 li
571.581 325.143 573.705 324.189 575.244 322.65 cv
576.792 321.111 577.737 318.978 577.737 316.629 cv
577.737 314.28 576.792 312.156 575.244 310.608 cv
573.705 309.069 571.581 308.115 569.232 308.115 cv
566.874 308.115 564.75 309.069 563.211 310.608 cv
561.672 312.156 560.718 314.28 560.718 316.629 cv
560.718 318.978 561.672 321.111 563.211 322.65 cv
564.75 324.189 566.874 325.143 569.232 325.143 cv
569.232 325.647 li
569.232 326.142 li
569.232 326.142 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
638.127 317.133 mo
638.127 317.133 li
638.127 317.133 li
638.127 317.133 li
638.127 317.133 mo
632.871 317.124 628.614 312.867 628.614 307.611 cv
628.614 302.364 632.871 298.098 638.127 298.098 cv
643.383 298.098 647.64 302.364 647.64 307.611 cv
647.64 312.867 643.383 317.124 638.127 317.133 cv
638.127 316.629 li
638.127 316.125 li
640.476 316.125 642.6 315.18 644.148 313.632 cv
645.687 312.093 646.641 309.969 646.641 307.611 cv
646.641 305.262 645.687 303.138 644.148 301.59 cv
642.6 300.051 640.476 299.097 638.127 299.097 cv
635.778 299.097 633.654 300.051 632.106 301.59 cv
630.567 303.138 629.613 305.262 629.613 307.611 cv
629.613 309.969 630.567 312.093 632.106 313.632 cv
633.654 315.18 635.778 316.125 638.127 316.125 cv
638.127 316.629 li
638.127 317.133 li
638.127 317.133 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
681.948 351.135 mo
681.948 351.135 li
681.948 351.135 li
681.948 351.135 li
681.948 351.135 mo
673.704 351.135 667.026 344.457 667.026 336.213 cv
667.026 327.978 673.704 321.291 681.948 321.291 cv
690.183 321.291 696.861 327.978 696.861 336.213 cv
696.861 344.457 690.183 351.135 681.948 351.135 cv
681.948 350.64 li
681.948 350.136 li
685.791 350.136 689.265 348.579 691.785 346.059 cv
694.305 343.539 695.862 340.056 695.862 336.213 cv
695.862 332.37 694.305 328.896 691.785 326.376 cv
689.265 323.856 685.791 322.29 681.948 322.29 cv
678.096 322.29 674.622 323.856 672.102 326.376 cv
669.582 328.896 668.025 332.37 668.025 336.213 cv
668.025 340.056 669.582 343.539 672.102 346.059 cv
674.622 348.579 678.096 350.136 681.948 350.136 cv
681.948 350.64 li
681.948 351.135 li
681.948 351.135 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
429.962 308.258 mo
430.009 307.922 430.043 307.586 430.062 307.249 cv
433.806 307.183 437.185 305.639 439.65 303.174 cv
442.17 300.654 443.727 297.18 443.727 293.337 cv
443.727 289.485 442.17 286.011 439.65 283.491 cv
437.13 280.971 433.656 279.414 429.813 279.414 cv
425.97 279.414 422.487 280.971 419.967 283.491 cv
417.447 286.011 415.89 289.485 415.89 293.337 cv
415.89 293.754 415.908 294.167 415.944 294.575 cv
415.614 294.63 415.286 294.699 414.96 294.781 cv
414.915 294.306 414.891 293.824 414.891 293.337 cv
414.891 285.093 421.569 278.415 429.813 278.415 cv
438.057 278.415 444.726 285.093 444.726 293.337 cv
444.726 301.522 438.137 308.169 429.962 308.258 cv
428.956 308.234 mo
421.932 307.836 416.21 302.58 415.09 295.779 cv
415.413 295.693 415.739 295.623 416.068 295.567 cv
416.543 298.515 417.945 301.152 419.967 303.174 cv
422.322 305.529 425.518 307.043 429.063 307.231 cv
429.042 307.566 429.007 307.901 428.956 308.234 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
86.022 320.373 mo
80.208 320.373 75.492 315.657 75.492 309.843 cv
75.492 304.029 80.208 299.322 86.022 299.313 cv
91.836 299.322 96.552 304.029 96.552 309.843 cv
96.552 309.843 li
96.552 309.843 li
96.552 309.843 li
96.552 315.657 91.836 320.373 86.022 320.373 cv
86.022 300.321 mo
83.394 300.321 81.009 301.383 79.29 303.111 cv
77.562 304.83 76.491 307.215 76.491 309.843 cv
76.491 312.48 77.562 314.856 79.29 316.584 cv
81.009 318.303 83.394 319.374 86.022 319.374 cv
88.659 319.374 91.035 318.303 92.763 316.584 cv
94.491 314.856 95.553 312.48 95.553 309.843 cv
95.553 307.215 94.491 304.83 92.763 303.111 cv
91.035 301.383 88.659 300.321 86.022 300.321 cv
96.552 309.843 mo
96.552 309.843 li
96.552 309.843 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
280.692 397.782 mo
274.878 397.782 270.162 393.066 270.162 387.252 cv
270.162 381.438 274.878 376.731 280.692 376.731 cv
286.506 376.731 291.222 381.438 291.222 387.252 cv
291.222 387.252 li
291.222 387.252 li
291.222 387.252 li
291.222 393.066 286.506 397.782 280.692 397.782 cv
280.692 377.73 mo
278.055 377.73 275.679 378.792 273.951 380.52 cv
272.223 382.248 271.161 384.624 271.161 387.252 cv
271.161 389.889 272.223 392.265 273.951 393.993 cv
275.679 395.712 278.055 396.783 280.692 396.783 cv
283.32 396.783 285.705 395.712 287.433 393.993 cv
289.152 392.265 290.223 389.889 290.223 387.252 cv
290.223 384.624 289.152 382.248 287.433 380.52 cv
285.705 378.792 283.32 377.73 280.692 377.73 cv
291.222 387.252 mo
291.222 387.252 li
291.222 387.252 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
216.819 438.84 mo
211.005 438.84 206.289 434.124 206.289 428.319 cv
206.289 422.496 211.005 417.789 216.819 417.789 cv
222.633 417.789 227.349 422.496 227.349 428.319 cv
227.349 428.319 li
227.349 428.319 li
227.349 428.319 li
227.349 434.124 222.633 438.84 216.819 438.84 cv
216.819 418.788 mo
214.182 418.788 211.806 419.85 210.078 421.578 cv
208.35 423.306 207.288 425.682 207.288 428.319 cv
207.288 430.947 208.35 433.323 210.078 435.051 cv
211.806 436.779 214.182 437.841 216.819 437.841 cv
219.447 437.841 221.832 436.779 223.56 435.051 cv
225.279 433.323 226.35 430.947 226.35 428.319 cv
226.35 425.682 225.279 423.306 223.56 421.578 cv
221.832 419.85 219.447 418.788 216.819 418.788 cv
227.349 428.319 mo
227.349 428.319 li
227.349 428.319 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
248.76 470.772 mo
242.946 470.772 238.221 466.065 238.221 460.251 cv
238.221 454.437 242.946 449.721 248.76 449.721 cv
254.565 449.721 259.29 454.437 259.29 460.251 cv
259.29 460.251 li
259.29 460.251 li
259.29 460.251 li
259.29 466.065 254.565 470.772 248.76 470.772 cv
248.76 450.72 mo
246.123 450.72 243.747 451.791 242.019 453.51 cv
240.291 455.238 239.22 457.614 239.22 460.251 cv
239.22 462.879 240.291 465.264 242.019 466.983 cv
243.747 468.711 246.123 469.773 248.76 469.773 cv
251.388 469.773 253.764 468.711 255.492 466.983 cv
257.22 465.264 258.291 462.879 258.291 460.251 cv
258.291 457.614 257.22 455.238 255.492 453.51 cv
253.764 451.791 251.388 450.72 248.76 450.72 cv
259.29 460.251 mo
259.29 460.251 li
259.29 460.251 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
200.934 318.006 mo
191.79 318.006 184.383 310.608 184.383 301.473 cv
184.383 292.329 191.79 284.922 200.934 284.922 cv
210.06 284.922 217.476 292.329 217.476 301.473 cv
217.476 301.473 li
217.476 301.473 li
217.476 301.473 li
217.476 310.608 210.06 318.006 200.934 318.006 cv
200.934 285.921 mo
196.632 285.921 192.753 287.658 189.936 290.475 cv
187.128 293.292 185.382 297.171 185.382 301.473 cv
185.382 305.766 187.128 309.645 189.936 312.453 cv
192.753 315.27 196.632 317.007 200.934 317.007 cv
205.218 317.007 209.106 315.27 211.923 312.453 cv
214.731 309.645 216.477 305.766 216.477 301.473 cv
216.477 297.171 214.731 293.292 211.923 290.475 cv
209.106 287.658 205.218 285.921 200.934 285.921 cv
217.476 301.473 mo
217.476 301.473 li
217.476 301.473 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
148.383 447.966 mo
139.248 447.966 131.841 440.559 131.841 431.424 cv
131.841 422.289 139.248 414.882 148.383 414.882 cv
157.518 414.882 164.925 422.289 164.925 431.424 cv
164.925 431.424 li
164.925 431.424 li
164.925 431.424 li
164.925 440.559 157.518 447.966 148.383 447.966 cv
148.383 415.881 mo
144.09 415.881 140.202 417.618 137.394 420.435 cv
134.577 423.252 132.84 427.131 132.84 431.424 cv
132.84 435.717 134.577 439.605 137.394 442.413 cv
140.202 445.23 144.09 446.967 148.383 446.967 cv
152.676 446.967 156.555 445.23 159.372 442.413 cv
162.189 439.605 163.926 435.717 163.926 431.424 cv
163.926 427.131 162.189 423.252 159.372 420.435 cv
156.555 417.618 152.676 415.881 148.383 415.881 cv
164.925 431.424 mo
164.925 431.424 li
164.925 431.424 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
564.435 466.632 mo
562.671 466.632 560.898 466.038 559.44 464.814 cv
559.764 464.436 li
560.079 464.049 li
561.357 465.111 562.896 465.633 564.435 465.633 cv
566.37 465.633 568.287 464.814 569.628 463.212 cv
570.699 461.943 571.212 460.395 571.212 458.856 cv
571.212 456.921 570.393 455.004 568.791 453.663 cv
567.522 452.601 565.983 452.079 564.444 452.079 cv
562.509 452.079 560.592 452.907 559.251 454.5 cv
558.18 455.778 557.667 457.317 557.667 458.856 cv
557.667 460.791 558.486 462.708 560.079 464.049 cv
559.764 464.436 li
559.44 464.814 li
557.613 463.275 556.659 461.07 556.668 458.856 cv
556.668 457.092 557.262 455.319 558.486 453.861 cv
560.025 452.025 562.23 451.08 564.444 451.08 cv
566.208 451.08 567.981 451.683 569.439 452.898 cv
571.266 454.437 572.211 456.642 572.211 458.856 cv
572.211 460.62 571.617 462.402 570.393 463.86 cv
568.854 465.687 566.649 466.632 564.435 466.632 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
627.723 340.56 mo
625.959 340.56 624.186 339.966 622.728 338.742 cv
623.052 338.355 li
623.376 337.977 li
624.645 339.039 626.184 339.561 627.723 339.561 cv
629.658 339.561 631.575 338.742 632.916 337.14 cv
633.987 335.871 634.5 334.323 634.5 332.784 cv
634.5 330.849 633.681 328.932 632.088 327.591 cv
630.819 326.529 629.271 326.007 627.732 326.007 cv
625.797 326.007 623.88 326.835 622.539 328.428 cv
621.477 329.706 620.955 331.245 620.955 332.784 cv
620.955 334.719 621.774 336.636 623.376 337.977 cv
623.052 338.355 li
622.728 338.742 li
620.901 337.203 619.956 334.998 619.956 332.784 cv
619.956 331.02 620.55 329.247 621.774 327.789 cv
623.313 325.953 625.518 325.008 627.732 325.008 cv
629.496 325.008 631.269 325.602 632.727 326.826 cv
634.563 328.365 635.508 330.57 635.508 332.784 cv
635.508 334.548 634.905 336.33 633.681 337.779 cv
632.151 339.615 629.937 340.56 627.723 340.56 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
493.92 412.65 mo
492.156 412.65 490.383 412.056 488.934 410.832 cv
489.249 410.445 li
489.573 410.067 li
490.842 411.129 492.381 411.651 493.92 411.651 cv
495.855 411.651 497.781 410.823 499.122 409.23 cv
500.184 407.952 500.706 406.413 500.706 404.874 cv
500.706 402.939 499.887 401.022 498.285 399.681 cv
497.016 398.619 495.477 398.097 493.938 398.097 cv
492.003 398.097 490.086 398.916 488.736 400.518 cv
487.674 401.787 487.152 403.335 487.152 404.874 cv
487.152 406.809 487.98 408.726 489.573 410.067 cv
489.249 410.445 li
488.934 410.832 li
487.098 409.293 486.153 407.088 486.153 404.874 cv
486.153 403.11 486.756 401.328 487.971 399.879 cv
489.51 398.043 491.715 397.098 493.938 397.098 cv
495.702 397.098 497.475 397.692 498.933 398.916 cv
500.76 400.455 501.705 402.66 501.705 404.874 cv
501.705 406.638 501.111 408.411 499.887 409.869 cv
498.348 411.705 496.143 412.65 493.92 412.65 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
430.038 359.037 mo
428.274 359.037 426.501 358.443 425.043 357.219 cv
425.367 356.841 li
425.682 356.454 li
426.951 357.525 428.499 358.038 430.038 358.038 cv
431.973 358.038 433.89 357.219 435.231 355.617 cv
436.293 354.348 436.815 352.809 436.815 351.261 cv
436.815 349.326 435.996 347.409 434.394 346.068 cv
433.125 345.006 431.586 344.493 430.047 344.484 cv
428.112 344.493 426.195 345.312 424.854 346.914 cv
423.783 348.183 423.27 349.722 423.27 351.261 cv
423.27 353.196 424.089 355.113 425.682 356.454 cv
425.367 356.841 li
425.043 357.219 li
423.207 355.689 422.262 353.484 422.262 351.261 cv
422.262 349.497 422.865 347.724 424.089 346.266 cv
425.619 344.439 427.833 343.485 430.047 343.485 cv
431.811 343.485 433.584 344.088 435.042 345.303 cv
436.869 346.842 437.814 349.047 437.814 351.261 cv
437.814 353.025 437.22 354.807 435.996 356.265 cv
434.457 358.092 432.252 359.037 430.038 359.037 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
500.886 358.002 mo
499.131 358.002 497.349 357.408 495.9 356.184 cv
496.215 355.806 li
496.539 355.419 li
497.808 356.481 499.356 357.003 500.886 357.003 cv
502.83 357.003 504.747 356.184 506.088 354.582 cv
507.15 353.313 507.672 351.765 507.672 350.226 cv
507.672 348.291 506.853 346.374 505.251 345.033 cv
503.982 343.971 502.443 343.449 500.904 343.449 cv
498.969 343.449 497.052 344.277 495.711 345.87 cv
494.64 347.148 494.118 348.687 494.118 350.226 cv
494.118 352.161 494.946 354.078 496.539 355.419 cv
496.215 355.806 li
495.9 356.184 li
494.064 354.645 493.119 352.44 493.119 350.226 cv
493.119 348.462 493.722 346.689 494.937 345.231 cv
496.476 343.395 498.681 342.45 500.904 342.45 cv
502.668 342.45 504.441 343.053 505.899 344.268 cv
507.726 345.807 508.671 348.012 508.671 350.226 cv
508.671 351.99 508.077 353.772 506.853 355.221 cv
505.314 357.057 503.109 358.002 500.886 358.002 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
468.252 360.864 mo
466.488 360.864 464.706 360.261 463.257 359.046 cv
463.572 358.659 li
463.896 358.272 li
465.165 359.343 466.713 359.865 468.252 359.865 cv
470.187 359.865 472.104 359.037 473.445 357.435 cv
474.507 356.166 475.029 354.627 475.029 353.088 cv
475.029 351.153 474.21 349.236 472.608 347.895 cv
471.339 346.824 469.8 346.311 468.261 346.311 cv
466.326 346.311 464.409 347.13 463.068 348.732 cv
461.997 350.001 461.484 351.549 461.484 353.088 cv
461.484 355.023 462.303 356.94 463.896 358.272 cv
463.572 358.659 li
463.257 359.046 li
461.421 357.507 460.476 355.302 460.476 353.088 cv
460.476 351.324 461.079 349.542 462.303 348.084 cv
463.833 346.257 466.047 345.312 468.261 345.312 cv
470.025 345.312 471.798 345.906 473.256 347.13 cv
475.083 348.66 476.028 350.865 476.028 353.088 cv
476.028 354.852 475.434 356.625 474.21 358.083 cv
472.671 359.919 470.466 360.864 468.252 360.864 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
547.839 384.435 mo
546.084 384.435 544.302 383.841 542.844 382.617 cv
542.848 382.613 li
541.015 381.083 540.072 378.88 540.072 376.659 cv
540.072 374.895 540.666 373.122 541.89 371.664 cv
543.429 369.837 545.634 368.883 547.857 368.883 cv
549.612 368.883 551.394 369.486 552.843 370.701 cv
554.679 372.24 555.624 374.445 555.624 376.668 cv
555.624 378.423 555.021 380.205 553.806 381.663 cv
552.267 383.49 550.062 384.435 547.839 384.435 cv
543.492 381.852 mo
544.761 382.923 546.3 383.436 547.839 383.436 cv
549.774 383.436 551.7 382.617 553.041 381.015 cv
554.103 379.746 554.625 378.207 554.625 376.668 cv
554.625 374.724 553.806 372.807 552.204 371.466 cv
550.935 370.404 549.396 369.891 547.857 369.882 cv
545.922 369.891 543.996 370.71 542.655 372.312 cv
541.593 373.581 541.071 375.12 541.071 376.659 cv
541.071 378.594 541.89 380.511 543.492 381.852 cv
543.168 382.239 li
543.492 381.852 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
585.945 374.058 mo
584.181 374.058 582.399 373.464 580.95 372.24 cv
581.274 371.862 li
581.589 371.475 li
582.858 372.537 584.406 373.059 585.945 373.059 cv
587.88 373.059 589.797 372.24 591.138 370.638 cv
592.2 369.369 592.722 367.821 592.722 366.282 cv
592.722 364.347 591.903 362.43 590.301 361.089 cv
589.032 360.027 587.493 359.505 585.954 359.505 cv
584.019 359.505 582.102 360.333 580.761 361.926 cv
579.69 363.204 579.177 364.743 579.177 366.282 cv
579.177 368.217 579.996 370.134 581.589 371.475 cv
581.274 371.862 li
580.95 372.24 li
579.114 370.71 578.169 368.505 578.169 366.282 cv
578.169 364.518 578.772 362.745 579.996 361.287 cv
581.535 359.451 583.74 358.506 585.954 358.506 cv
587.718 358.506 589.491 359.109 590.949 360.324 cv
592.776 361.863 593.721 364.068 593.721 366.282 cv
593.721 368.046 593.127 369.828 591.903 371.277 cv
590.364 373.113 588.159 374.058 585.945 374.058 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
550.323 436.329 mo
547.569 436.329 544.797 435.393 542.52 433.485 cv
542.844 433.098 li
543.168 432.72 li
545.256 434.475 547.794 435.321 550.323 435.321 cv
553.5 435.321 556.659 433.971 558.864 431.343 cv
560.61 429.255 561.465 426.717 561.465 424.188 cv
561.465 421.011 560.115 417.852 557.487 415.647 cv
555.399 413.901 552.861 413.046 550.341 413.046 cv
547.155 413.046 543.996 414.396 541.8 417.024 cv
540.045 419.112 539.19 421.659 539.19 424.188 cv
539.19 427.365 540.54 430.515 543.168 432.72 cv
542.844 433.098 li
542.52 433.485 li
539.667 431.082 538.191 427.644 538.191 424.188 cv
538.191 421.434 539.118 418.662 541.026 416.385 cv
543.429 413.523 546.876 412.047 550.341 412.047 cv
553.086 412.047 555.858 412.974 558.126 414.882 cv
560.988 417.285 562.464 420.723 562.464 424.188 cv
562.464 426.942 561.537 429.714 559.629 431.991 cv
557.226 434.844 553.779 436.329 550.323 436.329 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
417.933 318.69 mo
415.179 318.69 412.407 317.754 410.139 315.846 cv
410.454 315.468 li
410.778 315.081 li
412.866 316.836 415.404 317.691 417.933 317.691 cv
421.119 317.682 424.269 316.332 426.474 313.704 cv
427.838 312.081 428.658 310.186 428.956 308.234 cv
429.24 308.251 429.525 308.259 429.813 308.259 cv
429.813 308.259 li
429.863 308.259 429.912 308.258 429.962 308.258 cv
429.653 310.43 428.752 312.547 427.239 314.352 cv
424.845 317.214 421.398 318.69 417.933 318.69 cv
410.139 315.846 mo
407.277 313.452 405.801 310.005 405.801 306.549 cv
405.801 303.795 406.737 301.023 408.645 298.746 cv
410.349 296.716 412.574 295.384 414.96 294.781 cv
414.993 295.117 415.036 295.45 415.09 295.779 cv
412.945 296.345 410.946 297.555 409.41 299.385 cv
407.655 301.473 406.8 304.02 406.8 306.549 cv
406.8 309.726 408.159 312.876 410.778 315.081 cv
410.454 315.468 li
410.139 315.846 li
429.813 308.259 mo
429.813 307.755 li
429.813 307.251 li
429.561 307.251 429.311 307.244 429.063 307.231 cv
429.077 307.004 429.084 306.776 429.084 306.549 cv
429.084 303.372 427.734 300.213 425.106 298.008 cv
423.018 296.262 420.48 295.407 417.951 295.407 cv
417.32 295.407 416.69 295.461 416.068 295.567 cv
416.015 295.24 415.974 294.909 415.944 294.575 cv
416.607 294.464 417.279 294.408 417.951 294.408 cv
420.705 294.408 423.477 295.335 425.745 297.243 cv
428.607 299.646 430.083 303.093 430.083 306.549 cv
430.083 306.782 430.076 307.015 430.062 307.249 cv
429.979 307.25 429.896 307.251 429.813 307.251 cv
429.813 307.755 li
429.813 308.259 li
429.813 308.259 li
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
429.813 308.259 mo
429.813 308.259 li
429.813 308.259 li
429.813 308.259 li
429.813 308.259 mo
429.525 308.259 429.24 308.251 428.956 308.234 cv
429.007 307.901 429.042 307.566 429.063 307.231 cv
429.311 307.244 429.561 307.251 429.813 307.251 cv
429.813 307.755 li
429.813 308.259 li
429.813 308.259 li
429.813 308.259 mo
429.813 307.755 li
429.813 307.251 li
429.896 307.251 429.979 307.25 430.062 307.249 cv
430.043 307.586 430.009 307.922 429.962 308.258 cv
429.912 308.258 429.863 308.259 429.813 308.259 cv
415.09 295.779 mo
415.036 295.45 414.993 295.117 414.96 294.781 cv
415.286 294.699 415.614 294.63 415.944 294.575 cv
415.974 294.909 416.015 295.24 416.068 295.567 cv
415.739 295.623 415.413 295.693 415.09 295.779 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
578.79 412.695 mo
576.045 412.695 573.273 411.759 570.996 409.851 cv
571.32 409.464 li
571.635 409.086 li
573.723 410.841 576.261 411.687 578.79 411.687 cv
581.976 411.687 585.135 410.337 587.331 407.709 cv
589.086 405.621 589.941 403.083 589.941 400.554 cv
589.941 397.377 588.591 394.218 585.963 392.013 cv
583.875 390.267 581.337 389.412 578.808 389.412 cv
575.631 389.412 572.472 390.762 570.267 393.39 cv
568.521 395.478 567.666 398.016 567.666 400.545 cv
567.666 403.731 569.016 406.881 571.635 409.086 cv
571.32 409.464 li
570.996 409.851 li
568.134 407.448 566.658 404.01 566.658 400.545 cv
566.658 397.791 567.594 395.019 569.502 392.751 cv
571.905 389.889 575.352 388.413 578.808 388.413 cv
581.562 388.413 584.334 389.34 586.602 391.248 cv
589.464 393.651 590.94 397.089 590.94 400.554 cv
590.94 403.308 590.004 406.08 588.105 408.357 cv
585.702 411.21 582.255 412.695 578.79 412.695 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
531.072 322.884 mo
528.318 322.884 525.546 321.948 523.278 320.04 cv
523.602 319.662 li
523.917 319.275 li
526.005 321.03 528.543 321.885 531.072 321.885 cv
534.258 321.885 537.408 320.526 539.613 317.907 cv
541.368 315.819 542.223 313.281 542.223 310.752 cv
542.223 309.196 541.9 307.649 541.265 306.216 cv
541.567 306.076 541.867 305.933 542.165 305.785 cv
542.866 307.355 543.222 309.051 543.222 310.752 cv
543.222 313.497 542.286 316.278 540.378 318.546 cv
537.984 321.408 534.537 322.884 531.072 322.884 cv
523.278 320.04 mo
520.416 317.646 518.94 314.208 518.94 310.743 cv
518.94 310.256 518.97 309.768 519.029 309.283 cv
519.357 309.335 519.686 309.383 520.017 309.427 cv
519.965 309.864 519.939 310.304 519.939 310.743 cv
519.948 313.92 521.298 317.079 523.917 319.275 cv
523.602 319.662 li
523.278 320.04 li
520.179 308.44 mo
519.848 308.397 519.518 308.349 519.19 308.297 cv
519.583 306.385 520.443 304.54 521.784 302.94 cv
524.187 300.078 527.625 298.602 531.09 298.602 cv
533.844 298.602 536.616 299.538 538.884 301.446 cv
540.07 302.438 541.017 303.611 541.721 304.892 cv
541.423 305.039 541.122 305.183 540.82 305.323 cv
540.178 304.169 539.318 303.111 538.245 302.211 cv
536.157 300.456 533.619 299.601 531.09 299.601 cv
527.913 299.601 524.754 300.96 522.549 303.588 cv
521.329 305.039 520.544 306.708 520.179 308.44 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
520.017 309.427 mo
519.686 309.383 519.357 309.335 519.029 309.283 cv
519.069 308.953 519.122 308.624 519.19 308.297 cv
519.518 308.349 519.848 308.397 520.179 308.44 cv
520.11 308.767 520.056 309.096 520.017 309.427 cv
541.265 306.216 mo
541.13 305.913 540.982 305.615 540.82 305.323 cv
541.122 305.183 541.423 305.039 541.721 304.892 cv
541.882 305.184 542.03 305.482 542.165 305.785 cv
541.867 305.933 541.567 306.076 541.265 306.216 cv
level3{
gsave
clp
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.4871e-05 398.877 -398.877 -3.4871e-05 365.833 -29.8809 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
672.524 280.354 mo
708.707 217.681 687.235 137.552 624.569 101.373 cv
561.9 65.1904 481.773 86.6602 445.592 149.332 cv
409.415 211.993 430.882 292.123 493.55 328.303 cv
505.488 335.196 518.062 339.983 530.851 342.806 cv
522.684 358.407 508.169 367.125 491.519 369.244 cv
529.439 380.038 561.483 358.394 577.2 344.569 cv
615.771 339.148 651.542 316.695 672.524 280.354 cv
cp
0.0627451 0 0.964706 0 cmyk
ef
529.331 153.723 mo
518.624 153.723 li
518.084 153.723 517.815 154.02 517.815 154.611 cv
517.815 154.678 519.249 155.954 522.12 158.44 cv
523.517 159.637 524.216 161.208 524.216 163.156 cv
524.216 165.615 523.147 167.761 521.015 169.589 cv
518.974 171.366 516.715 172.253 514.238 172.253 cv
499.127 172.253 li
500.648 163.818 li
510.624 163.818 li
511.164 163.818 511.434 163.515 511.434 162.909 cv
511.434 162.857 510.085 161.697 507.384 159.432 cv
506.226 158.444 505.646 157.068 505.646 155.304 cv
505.646 152.696 506.66 150.378 508.688 148.35 cv
510.729 146.309 513.061 145.288 515.681 145.288 cv
530.853 145.288 li
529.331 153.723 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
559.654 153.229 mo
559.654 155.969 558.476 158.477 556.118 160.757 cv
553.774 163.021 551.213 164.153 548.434 164.153 cv
539.327 164.153 li
537.866 172.253 li
527.79 172.253 li
530.319 157.753 li
546.834 157.753 li
547.427 157.753 547.979 157.518 548.493 157.045 cv
549.007 156.562 549.265 156.023 549.265 155.434 cv
549.265 155.198 549.218 154.978 549.126 154.775 cv
549.033 154.571 548.911 154.391 548.76 154.233 cv
548.608 154.077 548.428 153.954 548.216 153.862 cv
548.005 153.77 547.782 153.723 547.546 153.723 cv
531.029 153.723 li
532.552 145.288 li
551.772 145.288 li
553.985 145.288 555.849 146.065 557.362 147.619 cv
558.892 149.186 559.654 151.057 559.654 153.229 cv
cp
f
572.632 154.277 mo
569.196 162.139 li
573.306 162.139 li
572.632 154.277 li
cp
574.175 172.253 mo
573.917 168.875 li
566.232 168.875 li
564.75 172.253 li
554.321 172.253 li
566.153 145.288 li
582.332 145.288 li
584.624 172.253 li
574.175 172.253 li
cp
f
612.774 153.723 mo
601.81 153.723 li
600.271 153.723 598.86 154.321 597.582 155.518 cv
596.292 156.7 595.647 158.055 595.647 159.579 cv
595.647 160.789 596.075 161.8 596.932 162.617 cv
597.773 163.418 598.821 163.818 600.072 163.818 cv
611.016 163.818 li
609.495 172.253 li
598.552 172.253 li
595.193 172.253 592.361 171.22 590.057 169.152 cv
587.62 166.992 586.402 164.259 586.402 160.953 cv
586.402 156.779 588.193 153.091 591.774 149.892 cv
595.238 146.823 599.091 145.288 603.331 145.288 cv
614.295 145.288 li
612.774 153.723 li
cp
f
641.418 153.723 mo
624.567 153.723 li
624.331 155.225 li
634.444 155.225 li
633.161 162.317 li
623.046 162.317 li
622.81 163.818 li
639.681 163.818 li
638.159 172.253 li
611.213 172.253 li
615.974 145.288 li
642.938 145.288 li
641.418 153.723 li
cp
f
511.523 212.136 mo
501.146 212.136 li
506.05 184.359 li
516.47 184.359 li
511.523 212.136 li
cp
f
544.41 193.048 mo
533.382 193.048 li
532.824 193.048 532.547 193.354 532.547 193.962 cv
532.547 194.032 534.025 195.346 536.981 197.906 cv
538.42 199.14 539.14 200.759 539.14 202.765 cv
539.14 205.298 538.04 207.508 535.841 209.392 cv
533.739 211.222 531.413 212.136 528.863 212.136 cv
513.295 212.136 li
514.862 203.447 li
525.138 203.447 li
525.695 203.447 525.973 203.135 525.973 202.511 cv
525.973 202.457 524.582 201.262 521.801 198.929 cv
520.607 197.912 520.011 196.493 520.011 194.676 cv
520.011 191.99 521.056 189.603 523.144 187.513 cv
525.247 185.41 527.647 184.359 530.348 184.359 cv
545.978 184.359 li
544.41 193.048 li
cp
f
577.314 193.618 mo
573.773 201.717 li
578.007 201.717 li
577.314 193.618 li
cp
578.901 212.136 mo
578.637 208.657 li
570.721 208.657 li
569.195 212.136 li
558.45 212.136 li
570.641 184.359 li
587.307 184.359 li
589.667 212.136 li
578.901 212.136 li
cp
f
524.675 250.774 mo
509.569 250.774 li
506.028 250.774 503.04 249.685 500.611 247.503 cv
498.039 245.252 496.754 242.385 496.754 238.898 cv
496.754 234.468 498.645 230.564 502.423 227.189 cv
506.075 223.952 510.14 222.334 514.611 222.334 cv
518.5 222.334 521.715 223.629 524.259 226.218 cv
516.611 232.73 li
515.652 231.731 514.45 231.23 513.008 231.23 cv
511.382 231.23 509.895 231.861 508.548 233.124 cv
507.188 234.37 506.507 235.799 506.507 237.407 cv
506.507 238.683 506.958 239.748 507.86 240.61 cv
508.751 241.456 509.854 241.878 511.173 241.878 cv
515.61 241.878 li
516.527 236.544 li
527.195 236.544 li
524.675 250.774 li
cp
f
560.157 230.398 mo
560.157 232.647 559.38 234.758 557.824 236.731 cv
556.353 238.62 554.526 239.96 552.345 240.752 cv
552.65 241.503 553.205 241.878 554.012 241.878 cv
560.053 241.878 li
558.449 250.774 li
549.219 250.774 li
546.83 250.774 544.669 249.587 542.739 247.212 cv
538.654 242.232 li
537.114 250.774 li
526.487 250.774 li
529.154 235.498 li
546.571 235.498 li
547.198 235.498 547.781 235.248 548.323 234.748 cv
548.864 234.234 549.137 233.665 549.137 233.042 cv
549.137 232.792 549.086 232.559 548.989 232.344 cv
548.894 232.13 548.763 231.939 548.604 231.773 cv
548.444 231.606 548.255 231.474 548.03 231.376 cv
547.811 231.28 547.573 231.23 547.322 231.23 cv
529.904 231.23 li
531.509 222.334 li
551.781 222.334 li
554.103 222.334 556.074 223.105 557.699 224.646 cv
559.338 226.188 560.157 228.105 560.157 230.398 cv
cp
f
592.118 231.23 mo
574.347 231.23 li
574.097 232.814 li
584.765 232.814 li
583.41 240.294 li
572.742 240.294 li
572.491 241.878 li
590.285 241.878 li
588.682 250.774 li
560.262 250.774 li
565.281 222.334 li
593.725 222.334 li
592.118 231.23 li
cp
f
609.808 231.814 mo
606.184 240.107 li
610.517 240.107 li
609.808 231.814 li
cp
611.434 250.774 mo
611.163 247.212 li
603.057 247.212 li
601.495 250.774 li
590.493 250.774 li
602.975 222.334 li
620.038 222.334 li
622.455 250.774 li
611.434 250.774 li
cp
f
653.438 231.23 mo
643.646 231.23 li
640.209 250.774 li
629.539 250.774 li
632.979 231.23 li
623.205 231.23 li
624.81 222.334 li
655.043 222.334 li
653.438 231.23 li
cp
f
527.752 270.716 mo
527.752 273.718 526.461 276.468 523.878 278.965 cv
521.307 281.448 518.499 282.69 515.454 282.69 cv
505.472 282.69 li
503.868 291.568 li
492.826 291.568 li
495.599 275.674 li
513.7 275.674 li
514.35 275.674 514.955 275.416 515.519 274.898 cv
516.081 274.368 516.363 273.778 516.363 273.132 cv
516.363 272.873 516.313 272.632 516.211 272.41 cv
516.11 272.187 515.978 271.989 515.812 271.816 cv
515.645 271.645 515.446 271.51 515.216 271.408 cv
514.984 271.308 514.739 271.257 514.479 271.257 cv
496.378 271.257 li
498.044 262.012 li
519.113 262.012 li
521.539 262.012 523.582 262.863 525.24 264.566 cv
526.915 266.284 527.752 268.334 527.752 270.716 cv
cp
f
553.758 291.568 mo
526.085 291.568 li
531.304 262.012 li
542.39 262.012 li
538.796 282.322 li
555.425 282.322 li
553.758 291.568 li
cp
f
574.416 271.863 mo
570.646 280.481 li
575.151 280.481 li
574.416 271.863 li
cp
576.104 291.568 mo
575.822 287.864 li
567.399 287.864 li
565.775 291.568 li
554.343 291.568 li
567.313 262.012 li
585.047 262.012 li
587.558 291.568 li
576.104 291.568 li
cp
f
618.414 271.257 mo
606.397 271.257 li
604.708 271.257 603.163 271.912 601.763 273.225 cv
600.348 274.52 599.641 276.005 599.641 277.676 cv
599.641 279.001 600.11 280.11 601.049 281.005 cv
601.973 281.883 603.119 282.322 604.491 282.322 cv
616.487 282.322 li
614.819 291.568 li
602.823 291.568 li
599.144 291.568 596.04 290.436 593.514 288.168 cv
590.843 285.801 589.507 282.805 589.507 279.182 cv
589.507 274.605 591.471 270.563 595.397 267.057 cv
599.193 263.692 603.415 262.012 608.064 262.012 cv
620.082 262.012 li
618.414 271.257 li
cp
f
649.811 271.257 mo
631.341 271.257 li
631.082 272.902 li
642.168 272.902 li
640.76 280.676 li
629.674 280.676 li
629.414 282.322 li
647.906 282.322 li
646.238 291.568 li
616.703 291.568 li
621.923 262.012 li
651.479 262.012 li
649.811 271.257 li
cp
f
370.214 183.337 mo
362.727 183.099 358.429 187.601 356.075 192.977 cv
354.151 197.371 353.94 204.355 355.561 209.688 cv
356.991 214.399 359.38 218.705 362.888 221.9 cv
366.608 225.288 371.271 227.739 376.899 227.171 cv
387.317 226.115 392.939 214.944 390.139 202.619 cv
388.887 197.112 386.401 193.132 383.326 189.893 cv
380.583 187.003 376.106 183.526 370.214 183.337 cv
cp
379.728 183.337 mo
382.253 184.823 384.208 186.728 385.897 188.607 cv
390.726 193.982 395.304 204.035 392.967 214.574 cv
391.062 223.164 384.761 230.777 374.071 229.999 cv
368.38 229.584 362.771 226.075 359.288 222.028 cv
355.696 217.855 352.987 212.75 351.962 206.604 cv
350.739 199.279 352.766 192.327 355.561 188.221 cv
358.602 183.757 363.833 180.088 370.857 180.638 cv
373.968 180.881 377.425 181.983 379.728 183.337 cv
cp
347.462 158.528 mo
343.733 157.957 341.135 160.34 340.265 163.156 cv
338.207 169.804 343.179 177.078 348.362 177.553 cv
352.946 177.973 355.376 174.126 355.561 170.097 cv
355.751 165.946 353.521 162.246 351.704 160.585 cv
350.733 159.697 349.309 158.812 347.462 158.528 cv
cp
353.376 158.4 mo
356.195 160.836 358.637 165.977 358.261 170.869 cv
357.855 176.125 354.105 181.002 347.849 180.253 cv
342.476 179.609 337.708 173.849 337.179 167.784 cv
336.556 160.646 340.464 155.622 346.306 155.7 cv
349.483 155.743 351.754 156.999 353.376 158.4 cv
cp
116.855 338.23 mo
118.241 342.147 118.27 345.211 119.557 348.643 cv
119.664 348.932 119.72 349.133 119.813 349.286 cv
125.529 358.707 134.37 367.822 142.694 374.995 cv
146.995 378.702 151.786 382.091 156.576 385.406 cv
166.087 391.988 176.983 397.576 188.456 401.988 cv
197.395 405.427 206.289 408.076 216.605 410.344 cv
226.223 412.455 237.112 414.26 248.484 414.715 cv
264.731 415.366 280.149 415.19 295.017 413.687 cv
298.819 413.302 302.56 413.247 306.2 412.659 cv
309.655 412.099 313.072 411.414 316.483 410.859 cv
326.669 409.195 336.486 406.608 345.534 403.531 cv
366.149 396.523 384.856 385.473 397.209 370.366 cv
400.806 365.97 404.323 361.193 406.721 355.585 cv
407.917 352.785 408.28 349.085 408.905 345.559 cv
411.854 328.941 414.872 310.467 416.233 292.342 cv
417.429 276.433 417.675 260.776 415.848 245.938 cv
413.179 224.264 409.318 203.586 403.765 185.265 cv
403.251 183.572 402.77 182.035 402.222 180.638 cv
401.634 179.138 400.802 178.239 399.779 177.038 cv
390.802 166.496 376.767 159.884 361.858 154.415 cv
343.862 147.813 323.322 144.349 301.059 142.46 cv
279.883 140.664 254.278 140.493 233.06 142.589 cv
197.848 146.067 167.858 153.909 141.794 167.013 cv
136.574 169.636 131.546 172.368 127.269 175.625 cv
125.898 176.668 124.365 180.823 123.541 182.823 cv
117.65 197.1 113.329 211.722 110.815 229.483 cv
109.598 238.085 109.272 247.416 109.273 257.378 cv
109.273 270.063 109.694 282.812 110.558 295.684 cv
110.836 299.841 111.356 304.868 111.844 309.309 cv
112.028 310.992 111.925 312.686 112.357 313.68 cv
112.822 314.748 115.771 316.203 117.37 317.151 cv
129.699 324.453 143.137 331.112 157.476 336.047 cv
165.991 338.978 174.736 341.149 183.956 343.244 cv
193.255 345.357 202.972 347.512 212.878 348.386 cv
218.429 340.803 229.459 336.718 242.442 337.203 cv
252.09 337.564 259.052 340.865 260.567 349.544 cv
261.154 352.9 261.389 359.687 259.925 362.397 cv
255.356 370.858 233.847 370.157 223.418 367.025 cv
220.54 366.16 218.016 365.068 215.321 363.813 cv
213.883 363.142 212.664 362.657 210.95 362.525 cv
202.479 361.873 193.944 360.932 185.755 359.569 cv
159.622 355.219 138.145 345.905 116.855 338.23 cv
cp
295.917 132.691 mo
313.869 134.019 330.367 136.262 345.792 140.147 cv
366.136 145.271 384.664 152.881 398.108 164.313 cv
401.437 167.143 404.669 170.538 406.464 174.981 cv
408.239 179.377 409.733 184.333 411.091 189.508 cv
416.343 209.517 420.294 231.75 422.018 255.065 cv
422.899 266.989 422.532 278.845 421.632 291.7 cv
420.394 309.366 417.759 326.01 415.075 342.346 cv
414.169 347.867 413.589 353.566 411.991 358.412 cv
410.507 362.91 408.142 367.105 405.563 371.01 cv
401.745 376.793 397.302 382.148 392.452 386.564 cv
387.422 391.144 382.056 395.377 375.999 398.903 cv
368.035 403.542 359.712 408.137 350.29 411.372 cv
340.92 414.592 331.077 417.716 320.211 419.599 cv
314.985 420.504 309.503 421.781 303.887 422.299 cv
298.151 422.826 292.308 423.404 286.404 423.971 cv
280.247 424.559 273.952 424.362 267.767 424.483 cv
236.011 425.109 208.912 419.79 186.269 410.73 cv
168.299 403.539 151.798 393.839 138.709 381.809 cv
130.158 373.948 122.423 366.114 116.342 356.485 cv
115.085 354.493 114.478 352.081 113.771 349.415 cv
107.09 324.22 104.003 296.308 104.002 263.548 cv
104.002 257.03 103.729 250.918 104.002 245.038 cv
104.287 238.921 104.732 233.146 105.544 227.427 cv
108.005 210.102 111.582 195.82 117.242 181.924 cv
119.113 177.33 120.905 172.381 123.283 168.813 cv
124.36 167.196 126.616 165.84 128.554 164.57 cv
130.718 163.151 132.697 162.007 134.595 160.971 cv
163.709 145.091 198.359 135.933 240.001 132.563 cv
251.67 131.618 265.037 131.196 277.534 131.792 cv
283.825 132.091 289.972 132.252 295.917 132.691 cv
cp
59.6543 133.848 mo
59.6309 133.703 59.5264 133.776 59.5264 133.848 cv
53.0059 134.816 47.7373 139.417 48.2148 146.702 cv
48.6025 152.63 52.5508 155.795 57.5986 157.372 cv
57.667 156.648 56.7988 155.914 56.4414 155.187 cv
53.3096 148.805 54.332 137.48 59.6543 133.848 cv
cp
71.2236 131.406 mo
74.3037 133.478 75.8584 135.722 77.1357 138.476 cv
84.1416 153.577 68.2383 166.918 54.3848 161.999 cv
48.8174 160.022 43.3975 155.018 42.8154 147.474 cv
42.2813 140.533 45.4424 135.863 48.6006 132.949 cv
51.4297 130.338 56.0664 128.31 61.0684 128.321 cv
65.5361 128.331 68.6836 129.698 71.2236 131.406 cv
cp
466.493 133.462 mo
466.239 133.642 466.91 134.131 467.265 134.491 cv
469.897 137.162 471.885 141.652 471.636 147.346 cv
471.471 151.089 470.366 154.392 468.679 156.857 cv
474.144 155.739 478.062 151.318 478.062 145.546 cv
478.062 138.845 472.97 134.261 466.493 133.462 cv
cp
478.319 133.206 mo
481.155 136.041 483.94 140.741 483.461 146.959 cv
482.692 156.936 473.903 163.52 464.18 162.77 cv
455.161 162.076 447.423 154.847 447.468 145.032 cv
447.487 141.134 448.802 137.897 450.554 135.391 cv
453.401 131.317 459.274 127.328 467.007 128.064 cv
472.126 128.551 475.771 130.656 478.319 133.206 cv
cp
322.268 445.95 mo
332.389 447.483 341.357 450.171 350.419 452.765 cv
348.501 448.811 346.739 444.703 344.763 440.81 cv
337.245 442.504 329.475 443.944 322.268 445.95 cv
cp
392.967 420.627 mo
378.166 426.821 363.354 433.005 348.62 439.267 cv
350.693 443.791 352.795 448.288 354.918 452.765 cv
370.071 446.621 385.104 440.359 400.294 434.254 cv
397.948 429.616 395.572 425.006 392.967 420.627 cv
cp
404.278 413.943 mo
401.66 415.438 399.304 417.196 396.694 418.699 cv
398.569 422.266 400.526 425.75 402.351 429.367 cv
403.273 424.506 403.659 419.108 404.278 413.943 cv
cp
105.159 353.014 mo
104.874 357.835 105.886 365.622 104.13 369.597 cv
103.621 370.75 102.588 371.306 101.303 371.396 cv
111.313 386.088 123.526 399.1 138.837 408.675 cv
143.87 411.819 149.296 414.595 154.904 417.415 cv
165.817 422.899 177.553 427.937 189.611 432.582 cv
201.702 437.237 214.618 441.353 228.045 443.894 cv
251.249 448.283 279.593 446.493 304.657 445.307 cv
306.481 445.221 308.181 444.796 309.928 444.409 cv
319.87 442.199 330.655 439.773 340.393 437.595 cv
346.776 436.167 352.553 433.226 358.389 430.782 cv
367.146 427.115 375.817 423.452 384.739 419.728 cv
387.606 418.53 390.633 417.402 393.353 415.999 cv
397.87 413.672 401.788 410.235 406.335 407.772 cv
415.618 393.318 426.407 380.37 430.759 360.984 cv
428.187 360.984 425.617 360.984 423.046 360.984 cv
422.126 368.497 418.097 374.602 414.177 380.265 cv
402.882 396.581 386.325 409.213 367.387 417.928 cv
348.007 426.846 326.11 432.625 300.544 435.538 cv
274.858 438.464 245.692 437.484 222.004 432.97 cv
189.989 426.866 164.572 415.846 142.051 400.316 cv
133.835 394.653 126.523 388.134 119.299 380.908 cv
117.038 378.646 114.005 375.731 112.872 373.324 cv
111.403 370.207 110.304 366.646 109.016 363.297 cv
107.662 359.778 106.394 356.43 105.159 353.014 cv
cp
74.8232 347.229 mo
74.5771 352.36 75.6504 357.287 76.4932 361.754 cv
76.8076 356.556 75.6641 351.702 74.8232 347.229 cv
cp
78.6787 341.317 mo
81.0273 348.694 82.8076 358.26 81.7646 367.797 cv
87.5547 367.161 93.4668 366.646 99.374 366.125 cv
100.421 356.57 99.6006 345.385 95.9043 339.774 cv
90.0576 340.183 84.3643 340.747 78.6787 341.317 cv
cp
434.229 297.354 mo
432.23 318.624 427.948 337.606 423.945 356.87 cv
425.874 356.87 427.802 356.87 429.729 356.87 cv
430.772 351.171 433.169 346.649 435.258 341.446 cv
440.269 328.963 442.092 314.057 443.355 297.612 cv
440.211 297.629 437.249 297.463 434.229 297.354 cv
cp
84.7207 297.612 mo
85.9873 310.399 87.5723 322.868 89.6045 334.891 cv
92.7158 334.786 96.5967 333.596 99.2461 334.633 cv
96.6504 322.661 94.6006 310.141 93.0762 297.098 cv
90.6631 297.643 87.418 297.354 84.7207 297.612 cv
cp
89.8623 224.728 mo
89.7529 224.705 89.7412 224.778 89.7344 224.856 cv
86.5557 233.665 85.3281 246.051 85.877 258.149 cv
86.4141 269.951 87.1992 282.024 91.0186 290.156 cv
92.1309 288.57 92.6201 286.358 93.0762 284.116 cv
89.4248 284.809 89.3086 281.871 88.9629 278.203 cv
87.7246 265.085 87.7783 251.014 89.3486 238.225 cv
89.7783 234.72 89.8174 231.716 92.1768 230.641 cv
91.4434 228.631 91.04 226.292 89.8623 224.728 cv
cp
435.771 224.471 mo
434.659 226.143 434.161 228.43 433.458 230.512 cv
433.823 231.08 435.016 231.432 435.386 232.055 cv
435.987 233.069 436.12 235.765 436.414 237.968 cv
438.044 250.188 438.216 264.012 436.929 277.045 cv
436.565 280.72 436.921 285.001 432.558 284.116 cv
433.081 286.207 433.559 288.343 434.485 290.028 cv
438.429 282.259 439.18 270.266 439.757 258.149 cv
440.034 252.301 439.638 246.127 439.114 240.154 cv
438.606 234.369 437.757 228.423 435.771 224.471 cv
cp
68.1377 224.343 mo
60.3164 243.555 63.6436 274.22 69.6816 292.599 cv
75.1729 292.521 80.5527 292.331 85.877 292.085 cv
79.0947 274.667 78.6543 242.438 84.207 223.7 cv
78.9053 223.968 73.4697 224.104 68.1377 224.343 cv
cp
439.757 292.085 mo
445.115 292.338 450.534 292.532 456.081 292.599 cv
462.239 274.293 465.455 243.839 457.753 224.343 cv
453.054 223.952 447.205 224.243 442.585 223.828 cv
442.346 223.806 442.21 223.564 441.813 223.7 cv
441.267 223.886 441.716 224.563 441.941 225.243 cv
443.331 229.438 444.083 234.676 444.513 239.767 cv
446.042 257.873 444.862 280.129 439.757 292.085 cv
cp
56.6982 170.869 mo
56.6748 170.723 56.5703 170.797 56.5703 170.869 cv
51.4795 172.294 47.5098 175.659 46.9287 181.281 cv
46.124 189.073 51.6357 193.66 58.626 194.393 cv
58.6816 193.938 58.0908 193.735 57.8555 193.493 cv
53.1875 188.659 51.8213 177.218 56.6982 170.869 cv
cp
467.907 194.005 mo
474.995 193.233 479.877 188.385 479.347 181.409 cv
478.907 175.6 474.759 171.848 469.45 170.354 cv
469.192 170.354 li
470.825 172.569 472.259 175.776 472.535 179.353 cv
473.02 185.648 470.816 191.271 467.907 194.005 cv
cp
94.6182 220.743 mo
96.1113 221.949 98.0547 222.707 100.146 223.315 cv
101.18 220.673 101.164 217.622 101.303 214.702 cv
102.313 193.472 107.388 175.673 114.928 160.842 cv
109.304 159.859 103.143 161.5 100.788 165.598 cv
99.0537 168.621 98.5107 173.4 97.832 178.066 cv
95.9717 190.855 95.0801 207.546 94.6182 220.743 cv
cp
410.963 159.429 mo
410.902 160.326 411.715 161.371 412.249 162.513 cv
417.788 174.383 421.966 188.284 423.688 204.161 cv
424.31 209.877 424.21 215.978 425.359 221.771 cv
427.836 221.548 429.229 220.243 431.144 219.458 cv
430.474 206.33 429.746 189.476 427.802 176.268 cv
427.088 171.416 426.448 166.012 424.202 163.156 cv
421.574 159.813 416.691 158.634 410.963 159.429 cv
cp
42.0449 177.938 mo
44.5479 170.024 52.7178 163.268 63.2539 165.341 cv
71.002 166.866 78.1221 173.426 77.3936 183.594 cv
76.8027 191.841 70.7451 197.562 63.8965 199.276 cv
53.7432 201.818 44.502 195.838 42.1729 187.321 cv
41.376 194.247 42.6816 198.718 47.3145 200.305 cv
50.6963 201.463 57.7148 200.69 61.8398 200.69 cv
66.2529 200.69 72.9609 201.428 76.3652 200.305 cv
78.2246 199.692 80.543 197.742 81.1221 195.42 cv
82.2207 191.005 81.5059 184.808 81.5068 179.609 cv
81.5088 166.458 81.5059 152.996 81.5068 139.376 cv
81.5068 136.662 81.8379 133.562 81.249 131.663 cv
80.3105 128.628 77.3584 126.51 73.7949 126.264 cv
69.7539 125.985 65.5889 126.393 60.8105 126.393 cv
56.5615 126.393 51.4219 125.739 47.958 126.521 cv
45.3389 127.112 43.1494 129.419 42.4297 131.663 cv
41.4727 134.654 42.0449 139.423 42.0449 142.975 cv
42.0449 154.808 42.0459 166.152 42.0449 177.938 cv
cp
447.726 199.02 mo
450.673 201.315 456.796 200.561 462.766 200.561 cv
465.491 200.561 468.364 200.616 470.992 200.69 cv
473.805 200.77 476.772 200.955 478.833 200.305 cv
483.739 198.759 484.55 194.23 484.104 187.321 cv
481.171 194.915 474.539 200.614 464.822 199.405 cv
456.729 198.399 449.661 192.226 448.884 183.723 cv
447.927 173.288 455.08 166.557 462.894 164.956 cv
473.114 162.861 481.543 169.34 483.975 177.295 cv
484.208 167.146 484.104 154.926 484.104 144.003 cv
484.104 139.649 484.839 134.075 483.59 131.021 cv
482.612 128.633 480.006 126.605 477.162 126.264 cv
473.081 125.773 468.435 126.264 463.794 126.264 cv
461.673 126.264 459.307 126.264 457.11 126.264 cv
454.8 126.264 452.38 125.988 450.554 126.393 cv
447.513 127.067 444.995 129.926 444.642 133.077 cv
444.337 135.791 444.642 138.904 444.642 141.947 cv
444.642 150.379 444.096 159.973 444.642 168.298 cv
444.96 173.16 446.177 178.295 446.569 183.209 cv
447.007 188.689 447.323 193.892 447.726 199.02 cv
cp
96.6758 226.399 mo
96.6016 227.289 97.2305 228.586 97.4463 229.613 cv
98.8252 229.771 100.203 229.562 101.046 230.771 cv
102.369 232.668 101.431 239.483 101.431 243.11 cv
101.431 253.932 100.917 263.849 100.918 274.729 cv
100.918 276.878 101.16 279.338 100.788 281.029 cv
100.454 282.558 99.2158 282.51 98.7324 283.601 cv
98.3262 284.514 98.2168 286.153 97.832 287.585 cv
97.4248 289.101 96.6348 290.453 96.5469 291.7 cv
96.4336 293.283 96.9648 295.466 97.1904 297.354 cv
99.165 313.9 101.896 330.479 106.059 344.658 cv
106.512 346.203 107.396 347.492 107.986 349.029 cv
109.694 353.46 111.392 357.962 113.128 362.525 cv
114.291 365.577 115.195 368.813 116.6 371.524 cv
118.145 374.506 121.493 377.447 124.184 380.137 cv
132.194 388.147 141.332 395.244 151.05 401.476 cv
177.323 418.322 209.019 429.48 248.742 432.326 cv
279.86 434.553 311.514 431.542 336.279 424.87 cv
344.714 422.598 352.506 419.793 360.188 416.643 cv
382.354 407.554 401.651 393.221 413.662 373.709 cv
415.681 370.429 417.841 366.809 418.675 362.654 cv
422.631 342.942 427.224 323.26 429.729 301.34 cv
430 298.979 430.632 295.926 430.373 294.013 cv
430.19 292.668 428.923 291.048 428.315 289.128 cv
427.696 287.168 427.478 285.039 426.902 283.473 cv
426.501 282.378 425.144 282.387 424.845 281.029 cv
424.483 279.387 424.718 276.872 424.718 274.729 cv
424.718 262.313 424.202 250.113 424.202 237.326 cv
424.202 232.787 423.423 228.999 428.187 229.742 cv
428.228 228.159 427.749 227.096 427.674 225.627 cv
420.835 227.691 420.752 220.57 420.475 214.702 cv
419.827 201.002 417.515 188.805 413.919 177.938 cv
412.502 173.655 411.179 168.592 408.777 164.956 cv
407.468 162.972 404.983 160.902 402.864 159.043 cv
396.657 153.598 389.13 148.693 381.912 144.646 cv
354.476 129.26 318.876 120.876 277.534 119.58 cv
223.278 117.878 177.712 127.265 143.594 146.959 cv
135.908 151.396 128.517 156.59 121.869 162.642 cv
119.644 164.669 117.089 166.739 115.699 168.813 cv
114.608 170.439 114.046 172.872 113.258 174.981 cv
109.332 185.501 106.718 196.248 105.673 209.816 cv
105.487 212.22 105.334 215.06 105.159 217.787 cv
104.904 221.729 104.771 226.648 101.174 227.299 cv
99.2773 227.641 98.1758 226.965 96.6758 226.399 cv
cp
51.9424 120.866 mo
56.2139 121.045 60.9277 120.866 65.5674 120.866 cv
70.292 120.866 74.8945 120.399 78.4229 121.765 cv
85.2422 124.406 87.8506 130.439 87.0352 140.789 cv
90.1641 131.107 93.75 121.882 98.3467 113.667 cv
80.6904 111.47 64.0391 115.381 51.9424 120.866 cv
cp
439.114 143.232 mo
439.523 139.503 439.008 136.343 439.241 133.077 cv
439.714 126.491 444.586 121.419 450.939 120.866 cv
458.29 120.224 466.124 121.345 474.077 120.866 cv
461.872 114.978 445.312 111.716 426.646 113.539 cv
431.146 121.249 434.468 130.139 437.956 138.861 cv
438.026 139.152 437.456 138.705 437.829 138.99 cv
438.416 140.244 438.822 141.681 439.114 143.232 cv
cp
368.03 71.7617 mo
367.921 71.7388 367.908 71.8125 367.901 71.8906 cv
373.022 89.3237 377.064 113.511 373.042 135.391 cv
385.011 141.419 396.507 147.917 405.949 156.472 cv
412.435 153.736 420.912 155.351 424.845 158.271 cv
429.391 161.646 430.705 167.83 431.786 174.854 cv
433.891 188.53 434.343 203.983 435.129 218.558 cv
437.429 217.796 440.823 218.371 443.483 218.43 cv
443.09 209.456 442.335 200.785 441.685 192.464 cv
441.008 183.813 439.888 175.66 438.729 167.784 cv
438.181 164.07 436.992 160.293 436.028 156.6 cv
434.081 149.134 431.455 142.595 428.83 136.034 cv
427.528 132.781 425.675 129.966 424.073 127.036 cv
422.388 123.949 421.018 120.853 419.061 118.166 cv
417.095 115.466 415.211 112.767 413.276 110.068 cv
409.485 104.778 404.817 100.085 400.294 95.4141 cv
398.093 93.1421 395.453 91.0332 392.967 88.8584 cv
387.952 84.4717 382.659 80.8994 377.027 77.0327 cv
374.212 75.0996 371.016 73.583 368.03 71.7617 cv
cp
168.787 65.9775 mo
168.812 65.8687 168.738 65.856 168.66 65.8491 cv
163.395 68.667 158.115 70.563 152.978 73.3042 cv
148.817 75.5239 144.916 78.501 140.895 81.0176 cv
136.885 83.5234 133.29 86.7021 129.711 89.6294 cv
126.091 92.5898 123.085 96.1216 119.813 99.5273 cv
118.169 101.237 116.469 102.809 115.058 104.669 cv
112.271 108.339 109.48 112.184 106.83 116.109 cv
105.509 118.066 104.447 120.231 103.231 122.408 cv
100.897 126.585 98.6143 130.806 96.6758 135.519 cv
94.8193 140.028 92.8125 144.685 91.2764 149.917 cv
90.5635 152.341 89.7158 154.949 88.9629 157.5 cv
88.1895 160.12 87.2734 162.867 87.0352 165.341 cv
86.6846 168.969 87.0352 172.524 87.0352 176.268 cv
87.0352 179.934 87.0352 183.688 87.0352 187.193 cv
87.0352 193.364 86.8086 197.487 84.207 200.82 cv
83.6777 201.496 82.0928 202.728 81.7646 203.776 cv
81.1084 205.867 81.4883 208.748 81.3789 211.102 cv
81.2578 213.675 80.9551 216.073 80.9932 218.43 cv
84.0889 218.451 88.3691 217.757 90.6328 218.558 cv
91.2139 204.878 91.9404 189.797 93.8467 176.525 cv
94.7715 170.094 96.0488 163.642 100.146 160.199 cv
103.868 157.074 110.88 155.224 118.142 157.243 cv
119.119 157.515 119.565 157.846 120.199 158.657 cv
131.938 147.944 146.435 139.989 162.104 133.206 cv
158.025 109.579 162.893 84.396 168.787 65.9775 cv
cp
358.389 129.092 mo
362.063 130.473 365.606 131.985 369.315 133.333 cv
372.987 110.369 368.243 86.8774 362.888 69.063 cv
360.286 67.3799 357.028 66.3525 354.146 64.9492 cv
353.89 64.9492 li
357.247 73.2432 359.673 83.1006 359.673 94.771 cv
359.673 106.199 358.868 118.105 358.389 129.092 cv
cp
182.413 61.0928 mo
179.568 61.6763 176.554 63.2017 173.545 64.0493 cv
167.646 82.6055 162.087 106.997 165.961 131.663 cv
169.766 130.154 173.333 128.411 176.886 126.649 cv
176.326 115.227 175.601 102.898 175.601 91.3003 cv
175.601 79.3857 178.994 69.7334 182.285 61.3496 cv
182.265 61.2007 182.313 61.1216 182.413 61.0928 cv
cp
187.555 59.1646 mo
184.265 67.8184 179.713 77.4731 179.713 89.6294 cv
179.713 102.03 180.261 114.524 180.999 126.649 cv
205.791 118.854 236.036 115.337 268.408 115.338 cv
300.804 115.338 330.001 120.237 354.275 128.192 cv
354.747 116.601 355.903 104.181 355.689 92.457 cv
355.474 80.5972 351.951 70.8633 348.491 62.5063 cv
329.485 54.873 307.296 49.7959 282.29 48.1099 cv
274.565 47.5898 267.313 47.6553 259.153 47.9814 cv
255.295 48.1357 251.377 48.1074 247.842 48.4961 cv
240.451 49.3071 233.251 49.8457 226.504 50.8096 cv
212.353 52.8306 199.312 56.0791 187.555 59.1646 cv
cp
322.396 39.4976 mo
326.273 40.4595 330.064 41.2305 333.708 42.4541 cv
344.3 46.0098 354.647 49.5552 364.045 54.6655 cv
370.223 58.0259 376.245 61.2993 381.912 65.2061 cv
384.718 67.1406 387.715 68.9521 390.267 71.1191 cv
392.804 73.2725 395.298 75.4771 397.852 77.6748 cv
405.2 83.999 411.99 91.8179 418.032 100.17 cv
418.927 101.407 419.87 102.748 420.989 104.283 cv
421.812 105.412 423.284 108.186 423.945 108.396 cv
424.814 108.674 426.965 108.125 428.444 108.011 cv
439.382 107.164 449.992 107.686 459.295 110.068 cv
466.865 112.007 473.987 114.248 480.376 117.909 cv
482.796 119.296 486.116 121.008 486.032 124.979 cv
487.659 127.036 489.026 129.353 489.503 132.563 cv
489.503 153.172 489.503 173.782 489.503 194.393 cv
488.014 201.882 483.471 206.088 474.463 206.088 cv
470.3 206.088 465.652 206.088 461.095 206.088 cv
456.553 206.088 452.116 205.717 448.24 205.96 cv
448.521 210.136 448.676 214.438 449.011 218.558 cv
449.269 218.558 li
452.243 219.519 458.22 217.796 460.966 219.458 cv
462.653 220.479 463.671 224.918 464.437 227.556 cv
465.401 230.881 465.966 233.965 466.493 237.197 cv
469.408 255.045 466.58 274.285 462.766 289 cv
462.046 291.772 461.146 296.287 459.552 297.484 cv
457.245 299.216 451.964 297.341 448.884 297.868 cv
447.388 320.97 444.117 342.293 436.157 358.926 cv
436.63 361.827 435.569 364.536 434.872 367.025 cv
432.634 375.01 429.312 381.271 425.617 387.85 cv
422.185 393.959 417.888 400.452 413.919 406.231 cv
412.872 407.757 410.356 410.65 409.935 412.271 cv
409.501 413.938 409.536 416.042 409.292 418.059 cv
409.059 419.981 408.882 422.002 408.649 423.971 cv
408.183 427.904 407.961 432.127 407.235 435.538 cv
406.946 436.891 406.523 437.255 405.435 437.854 cv
403.468 438.935 401.177 439.655 399.009 440.553 cv
386.201 445.847 372.871 451.267 360.188 456.492 cv
358.03 457.38 355.784 458.541 353.632 459.062 cv
352.183 459.413 350.602 458.436 348.876 457.905 cv
339.043 454.879 328.791 451.985 317.897 450.706 cv
311.004 449.899 303.86 450.628 297.073 451.093 cv
277.017 452.461 253.727 452.86 234.603 450.449 cv
222.004 448.861 209.978 445.399 199.509 441.838 cv
177.683 434.404 157.171 425.413 138.966 415.1 cv
120.33 404.542 106.686 388.743 94.876 371.909 cv
91.2188 372.545 87.6689 372.348 84.335 372.938 cv
83.2617 373.128 82.3232 373.885 81.3789 373.967 cv
80.7354 374.021 80.2754 373.518 79.3213 373.453 cv
78.1807 373.375 77.3096 373.586 76.623 373.324 cv
75.7686 372.998 74.6777 371.575 73.9229 370.366 cv
71.7012 366.809 70.708 361.459 70.0674 356.999 cv
69.2588 351.388 67.8867 340.179 71.6094 337.203 cv
72.9063 336.167 75.5283 336.111 77.7793 335.917 cv
79.833 335.742 81.8252 335.528 83.8213 335.403 cv
81.7979 323.289 80.4893 310.454 79.0654 297.74 cv
75.9932 297.375 69.8799 298.823 66.9814 297.997 cv
64.8828 297.398 64.0342 292.346 63.2539 289.515 cv
60.6836 280.18 58.9805 270.288 58.2412 259.435 cv
57.4482 247.81 58.7959 237.074 61.3262 227.941 cv
62.0752 225.238 63.0352 220.77 64.668 219.587 cv
67.0273 217.878 72.8496 219.442 75.5938 218.558 cv
75.5898 214.184 76.0811 210.304 76.1074 205.96 cv
71.1182 206.189 66.0732 206.088 60.8105 206.088 cv
55.5322 206.088 49.8066 206.86 45.7725 205.576 cv
41.9482 204.356 39.2031 201.456 37.8027 198.12 cv
36.2402 194.4 36.6455 189.463 36.6455 183.723 cv
36.6455 169.163 36.6455 152.218 36.6455 137.318 cv
36.6455 132.311 37.2393 127.932 40.1162 125.236 cv
39.9961 121.286 42.7158 119.607 45.5146 118.038 cv
51.7402 114.547 59.0498 112.16 66.2109 110.196 cv
76.585 107.351 89.6191 107.26 101.174 108.396 cv
104.67 102.108 108.854 96.3755 113.128 90.915 cv
115.241 88.2168 117.816 85.7417 120.199 83.2021 cv
125.075 78.0029 130.454 73.7158 135.881 69.3193 cv
138.6 67.1187 141.714 65.3047 144.75 63.4063 cv
147.767 61.52 150.735 59.4575 154.006 57.8789 cv
157.243 56.3159 160.594 54.7593 164.031 53.1235 cv
174.114 48.3232 185.324 44.9536 197.067 41.9399 cv
208.967 38.8862 221.473 36.6191 234.729 35.2563 cv
243.606 34.3433 252.681 33.2856 262.11 33.0708 cv
265.409 33.0708 268.708 33.0708 272.007 33.0708 cv
290.769 33.4048 307.466 35.791 322.396 39.4976 cv
cp
0.615686 0.639216 0.8 0.752941 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.0%%For: (Wouter De Coster) ()%%Title: (Astronaut-Helmet.eps)%%CreationDate: 9/21/10 9:24 AM%AI9_DataStream%Gb",K$"Hn&fC8M>mXL%r:DJP;].[u`'u;(b5u8WAd%kM(9koiK4MUkWleK$bQ<OK\eoV&<akXF>cC?ol9X_CpUQ],q5<Pm*rk;Og%N[rjU-1U"fR"`i:ep%(j]h,J!</ootbOU*J2$gF)F0p.3e/M/TN(86.aeUX0N5h'NQ,`^HYk"`6!2"?_5PGA7dCW#!d+Nd3Ct0Rp%YM9"AY<<dGFf(G6l67d(9ohK1^bbI>rm'F,_nElX\+^"HmWBTk_8d5e+F-\rn+NVW5SDr;!A]X)5C[SrEjOb+P;%'+pj\g0@GoNd%DNq$f9BLP'lrC4$HJ1IE:T!0tZp,K.H54H!4bsuHh;3.,iUA%9#IH#N@AVZ3n!jf`N+XI*"i!g9<a^SrQ,goNR*\3?`MI5+p!WVB%?>9Jo[QXOAmrnOdr8"OZQ&o>Dj@L"liUc6;>6uPLe<g0kK(6#eP"=DA]qaURBA0+\%UumS:PV.3D>c(M@EGHLikl%.:l3)s')N`"%R^5<KYC>rr9j%;+rbsoe*&8\0o_3UlCZFYss*m0O#&m:HL-@a<oZ#44r@-+:7o73d4W8Hi"'SoS[QWj4@bW`5^U_7gcM4%k"m-g7%:6><2/#b$@rGZeads9h<h@0/_O,nY*B;;()gMJ$E'upW`8`9K2/C&?WJ=^'Y=c4U/ioBg<Ng_4Ima`'0aiEH@6%=,XYY&6Z+8<B-%T>HLareh>kVUhA5s"K0]g$,k&Pkf\*lc,]I*7q;Vg4_JoL>Bl5#\ahH@]L!?4G5:?(`i*Yk'-Y)*^;Ysr9<+BIi(Ii==>$8q11_$%?U#Eu^dn.>UQa^C_u5^=V:H[#kuF<sVMDC2Hc,:4C.2P.cO)l;d%1/C4bcrurSsqOa*T^6(-/<UIe-'J%sH24!T_#_T(JqoeH>4,%+dp?8qY4TA=EueC%1I^)NsqHY-7JRpO*<^[#DS:p9^1#EOq+g:Jo.c9Dh6c'hZ+b$oB;1Z@*h+TGE*42Hh1PtkB$5Arp1%HK0;Ed%jj2C?p&?>jo)6t*d@`]ab.5oO4R%g&rOkL8p\eXV4'FccBJn/Y(>/uI)ZJ8+N/fJ8%AYfH<aKmfa304WA_QS`]<FY95NcPs*?Co7%;;",!*;9`pl!^'-mZq8@6"egf<sW\u7.CBW$hCAIOr.d8NF%6FZpimG[c:BQ6VB,i+*Y;EOJt/h=.TqXSYKN#EZh#IOBm"k6:%1J%Q$V&-jkP#arpa7N%G]<igt5?WbcO13]1ocr[QW764PpO>KjNiZ?K,PCC0o_3GYPC'[=*;PpO(j/r6XsYcr#XlqAHXYZoYRKhh9SO%gO;5'EMNU2#5Ai9&[WBY!\Fj:BJjIGC5nnF^jgPK&"5f82+ZoTQPNC*WC>6E2h@:C`%mc`h/,Dm3c9jfa7Id5V5IoQF+^I21,YY$%Ml,OX1u]X#JddaSmBk\M]@CXR>E)[s<GQ0J[$A#X<n%I\6-F1l/[sDN[[PHQUKMNdRTVF`-I'%<28a#+Pk(8\UYTT@RZ0e3hP`:e%Vi`ms7aq]p+F_4D\Fk$Y<H$G-om4;Pcg#4-WQ4\1*Wjae\lX)km96RAX>Obc>-4+@dTTP,CJcYddeYi)juQWa&9X\#Q*&[20bQE'%/NVEKWs,Di'#1Xnc3s]B]lIcbR9ffAr*or,29X^hoKEg7"B$O2Z5O:X!G$!K6%'km"=-`me/=@\%]"$ngV?6!/4]b6'/pP+U^U;)%%]e/s[%/Q1+'?_e(,^]_9jj)>=R8("H4q(/h#d!HAdG&`^`3Y78IDOs".#ngj$4DgTm#1E#$fgSST`?iTge>c=op9mB@(DCJ0WbW%C;=$?(:=lANqii;(m(M]Kq=XL5`DM$e<=(!-#&MfE=sQ@Cem:c&f9E\MOST1Y/dq0MpjWdO"6)TfYW+(!UmCj<n*'H;*CpJ=d2BI%'M"9!Ks8o%a9,IXLTRcu2SscB"$\CIP;!KA0FWT\%m==(G0ko%?O%a9JNub6?U_36!n_-,YZ_uh?.3^OYQ\gH&Q@>D0l5&F2Q.-*%eb.Y#Bq)>Pl`c4%fZXY<l3K:l!1VaG[Y)7"$NjT=,XDVi+X)RN*TCRiR)/-H=$RE@nBO?YWN/5]$b\@l"e&eT^uffGHiu"Vf4TB)%5&jhM\:j^(LG5a>;4*bk=*DO0Wp\+.MN:`QQgp81TCf0*XDs9rLHGu`XZ)6R;N8'%H;>@BYXX*LrHb-GoXBFTC/Jbf1K)1*$1?!o%XK,0hUI:/6WhWfp8@GFl]eWuV\cZ2h6G?$C*^m\=AKH\U'`'6O;=L@EO%$COVmKZ\R'Pfj'k]&-n<B*r`i:X)A_3"JncC'<rdjJ)%i-$f;f:rf79+,FVn/qRbUrA%Rcj&MpclE$,loT&AqLbn&J+2o9CXA].op]Y*rNAeB::GuN2n,*[2Z9==dT>!&F;&NI3\:eYjEsg0%CIrV6E;O:t:`P:ZJPs?>j@A1FKMP.3.(PJY/YT=[W/)-\Ld4Xi"plfu&nMll2?4ZU:CMh,"Tas@Qtq5f"6C#Ef`S$hTgKBJi2;3P%9L25#5Zfp0BJr.u[_WaLOH1AH-j&(j6:4=K".@mhWU9e>H,Lp>4J/E`RR+!NNO0!AU('SN&%ogG(M?=*A[SV224Ua>3XgkdH7U7'%QB<M0JmKVDLU:2lBsYCuAus0BdUm2<E=*&T"e*DaXl@er7Kn4k&q/no54_@<7BFmMD/"k69JN<AiahBIIm<u\NNGWJDh0`_URfDO%$jbc))3ADS*$iLqbTU`NJKAs,8-<Qm<,mJEO>`\,-PH8$83W\E*U)"'^RH+>=X4a[+_!HFE>#r]pTsQhLi.#2O;.aF(2;q4m6^X_%#n<;[C_`U7euZ>$2@dYj#_]:QQjIRW0P/YMCQ[1[g8_iZoOS@g*?qeP(s*_Z_,)@t!=]2h'g/c5!jWA8qL`qlgB3@Us+gX$g3tfH%m%aK/G&U1oTga`FenM?oLKIddgNf_X\c4o)P,KXGPC2C_7&"d$bFrU*Y%`f[0eQBMMM9SQ_t#Eb&nJ(4E[RiPM_LnE!`B(B^`8GD%R?:euB43D6C*4'n0aTHI>:d9\Cn]cRKn2Q@M8bDCWHlo[nZll^iZHnM@&u9-e#=!FU;)nS0oK?KqE6S/5*84,T>WA(#unJg\O(.R%LX722QO'-+FGjnPs!b@/*2JsF7S%D03(a\V8fk,;RD(9CRF#_9^Ss]W/4E\G/LD9kSLE9VkX^!/NbCJ;44SHB3>.-*nZ,RAi3@N.%+h=F5qcMojZ(KPl+]0%o$iM[N\7,\R$G0U-G`h<G@L$'EkD&2_=K6ps66V'".`U!>d=hdV:Z;fMe2@oGl&`hN`+l(_n0^LR!s0+S%A3baq6[hI06@uU:ei_^Y+G+<E%B5cJ7<5"I[U5[ae%'2VS?[jl7(,\RM6Er9C;Zc^@XM5L>1IO;cdac26rN18X#R><L.K(jcjsh,%$gi<so9aDdZA'S\Zfr2YXUM%HY@jHa1ZS9j`q<Ksr/geSb52JbirHL0\3TXJ+SK@A-T)m_FA]aZ$bW=k`Ve8\h:<\aX!rre6o1YX%dnTX33NY0VBfQorN_E$?,uE&VO\4\NO]@&[AYQIta`M*lOt"S]Aa2%!Q,;Ti3^R@'1D<q`h%6oYaisriLJoY)1`*/RL@@f]+hf+L%^&Y_I\JqQ/B^Ub0YG'fdmZ6KOC$q2I?E*^r&mf"ee-'R*M>:h%eUZmeRq)Dl3)Cs)R-M[H%Ji-:A'8&gZE[1B3Vppu(+s:q=^]tM%Vh&?+aG]AB=$$@oY$%LU/N-,T>iLg1rK0@Dd@O].mCCJIe/\?-jP1GRRp'l.CRf-M.6IGlC0@7,<f9[F,5W`!o-K@:=MfPJerja3%Z>H',RHf.!.pJ47mVa;@EPc=O3mmj=87RG0V,_DkYe[.83d^9P'%\!m%W$thjr2>q)M]QobT/6*YVek:1anYT<WWRB&sX/PLe+b'%BIU6'nKco4&uJ*P-(:06AE%2Jj6\)k/0D*->19j5Bm",I]/f?sBlOJjVA.Ou(==417]&'WC7a[hAnN,Y:.K+qg[:"KjrW5'V\kn>%E6]Ak"hVf8Ab>%qO.)Ak7-7uho2t-c_;52%kD6[$#*0[aB^FfG:/#h+dDfT&0t.ThH])Hfet=MXe@')4U-WX$'8t0?Q8lR9s&iP`%@!pPf/GUt[Es"V1=^kOW<]5,;C6&:6Wn!HC`kp;K`.aXsMgjCOR]R>Fo;agJq:\A/O?%a_(+s>siLeML(=-^:WCC.[nGfFuKkCA7%Xk'^[dknC':+h&B)TFKPDS@sL5+2JM.]ulW+q=7;,JbH3!7`J'<0r\MK7ZDAQk)/Hj%:Pq9l;BF&!!PW%dD3))Ma2J#o@/0.it%,%RM;''8_V4]&<^\C8-*KiLW!=h)5r4_8fCd2&TS?'7l<:6gFCb9ZBg?s>0SeLFO,iElVCoW$#9@"BsG$5)EAdt`(2X\Pe(B7M4&=O%\]&Q5.h_<mRfY)]:D%kB,/`Y=mPtfs;]oCu/=o8d!u#\+(jdaKoU7!:EXm9%-2?JVeIkdP30rcJ8n")*YZ?BM-Sha<i::RD*(>mX%R6WN_P$=.QjA7U,+J`+[!ZkE4Z/dr7P?S_sFt'.*:_5KZ'8HY32$osk8D03"E^V)"1s9o`"1)BdS#(!neVNi*B!s*<']C]KWot%G%kN9]HF9'U#78b._cN]g1"D+M+ZSY-D@I=Jp:>h*tLnj%QXa`)5j.QtfpjZXDitNC6%#ZO733P#e!>;T)JH]DcZ2!fC<bC'e<8()s%fV?:sWVc1f3ce[sks_Ek>WIpJ9jkmq0*fVB-&V4e;_[0tM@!"BSZ\>N,U((19\a5\*"t4F#;Kp?7@n#;0=WZSoC0cI/JC\QdS@=e%pPHRV@#m9g2Mp*6P'GAB"7MJ?8Mp2haUlXU_*(0.WD:mQWHe\?b%Otu[kt$56WJ?@?=SU!rpS(0[A$!oopF-7`N[!f!o0K6pZS's%baN:7c]XQ9$@uu"l=%%<VIo+%>#O9W>iB/1)HYU5bVI5%D:<'>8Qb7=-Sn)p<ESWNc'CAqjKjb.BA"`o7-dUYV?Q;R=9?pr0_odU%5,0*&NQcouCJX9aR&.8.5-^%cgROu10#*]p=j*+rM6QR_\rs@b1K@X[AQ,^-gJhG"g"\ra1Cm5hbH>0p\s7P[9dmk,]Jt(F',MCT%k"^%Ll`(_c??&KYg,cUN&OeB"M+F\jlT;_q]#M>(]$?a7KXH!)`Qjg^`Vuslm^hLodpIWIg!Toa-dMjP+!V(.-+8JHPV)'u%VEjg%Z7mro20QOE?k1D4\c^1.P+6qgdK>b&',:Z>>"G(_F'G0d$@n`]=M?i#:`ELAF7'@rg09eRNmJiiJ.YtL3Y!U0?3fd52_AWo;p(Z?%.IS4,c&_\kVFFZk']u>m,U3Jaj2aYS8[HA^J.%57SQ/[?'Q,lt)5(Ki!A:GV[*g@J&g^>Ij9_&3MF:12'U'o`e-Q?W99tMsbA,&B%<&3%apq:bBUrbi*b6@!tcGs54]'HGtkWI$LE`/gZ3hE&7chSuiB]ZptZR!7Ej74j+bLtEf9('jMX6G#-4k\'NBkL%JibB8,:[h:p%*6K6&?BN;.17t"brtCI8TAq[%kV:'A0pr_G0j'WpC[t<HWITsCY0i>jmnhL\.+HW*R?^lX@R<'ncJa:K7dO<bRq&0T2+dD+CQ63G%ne#EJfp53&9hVQ'kDf0_.<I1T@HXgc&JhOc@rJ$c20W$-&lH=Lg5IU;/psr:d6+K2d9C!np^V7c9U00`.\7$H<\1$*Yboh6OVGqq%W:Yuuj<E%@RAoeDg,R+eHe[Z=9e#j\:"8TQ7@/bmB%G[ujgO2j)PINGlPuO30I`_7C^X%%4tTD$BJ,]'S+F5RL0`?RRH&@s*7&7_%8UAbP\^e:D?F<D<,VhKc`liM+HK.*sCf_M;8ai+Z>ZU)jbDMK]5h*((N6>0=k<[DH;I^#O3]$HKo7NM?_jd/6?l`4r6M##N)69L)%L+Gd#j?UP:*@Yrd0)?^Fij:I]<nS83Nti5V,]'*^A78+I[Oc?Wr=9Jmo3-QNS,%%2RV6#3Pc8EDDiVoHH-KR?r4L]//Z.Yh0K$V=%PQf"R'%9`-MU!J/`3+JTgj,([NdCB<Z_-^@7oC=lHhaQTdBTE,cA\saU+N,=^0C+$I4J<0B>$uN$cdBbA[(=YXbn8c9i'l-WB;>h%3MmG"AgO-MO.-j5S2?ICV5(E6DK-T2W>:q-Q"6tRm@o@r0#iF5K]rRP#Xn?^+l*>P/CJgDV*Ku[797Yo>gX`AKSflNBPN8$Y_XC@%5)2If%iu;Ri9KlA8I7G*<4-P44g%RUV(s;aB+J7\dq:?Za#JD/k&H5ndE2"!a^Z+t*P@1J4?e,6^)_NC<!/))nUTCUXQ;]IRZJ0T%6%PbdC4J;%iXIHo5d(Xi,jIpmFCPEm^oS6)]7&%\TEuVM>7$Q`H)11L+=gsKG$(>hKh//u!mjUm5S]Pe6t$Q^LY*`rS>m:J\Y=f4%;NocHj0KnoR<;*MF+%Y8C,BGE:.D)`2NX0*'UD>,B$71]j0Hpu.Jr,qfU,:D\9]rM7&>7-TW:L[e3Zn^jik)JbER(&VH+'V)-=^B%N[`AUPP21OJQ?7&47`MLT51b]H/,^J4R8jo$Od-XWqHj8qae](<V+n.R]IE1$[L]D/EMRhr(6"BN`>VTor^0FGnk!D#B0c*U?K^U%e[B5%`3d15MORm@'bos/k>_%7Voni&K)Wt.<`paI'$nc0XF-uZTXoTM:tT^<S*,61Z+N<)3L:A..D_/k/B973Di,iNQhhMVrO!D(%'[8L>nddh70nid?d?n1A<@n*0AUE1ns'FXiJ2mbjR,"6\&g3=RY)!L<r%J*k#@NOZT4jbf/rIA3mT3N28I>\p.#..\8gci[?T6"t%>1P-M/VgRZ4.>*L;`n*D-Vs>E-9GujHgGj8Sa^@=,jtfTcJF\.0cA^lWOoa,]!JFUXLa.3<=Mu7K-Y-"Hj%YS.i6BC\P,bH2'"b,%0]rGG7Kff&F1+A-C-'\:CS$Q-FIWWQL#jRN@jVN!kr;DWd<[ee2R.>'Gok7pn;3]hj0`So@RM_[X[J[8-PMg_T(#;o9uH(L3*d\O%VYUFa6iW'U_,;d:=#[ZMDCq'#Ff!)^]Ns5",g*[M<m,<iZo0Y(Zll>>7W[B:f?5B/To"u+(p9&.VIFX"m.M`)dM>]<@[;WH+U(LS%L.fg$S:/3!7i5&4nUKj!pXpeLVdeT0W>d<&8&=B-_,"W"S='r,Jfo^]%km(E_M#6\`\Eo`S%#=I06b6j1#CJtgb4`b"Z$b*@UWSL%RTC;bfq]!#TTMR+Z@CH3^>'hCL`Xk-DG:^ZTn:fI88Vi3WDuu&W#M!'3bkAD3t]Tj'="f$JGukbhl=S[G2Ckhp@6>QRCU2RDPn!q%,]d-mClXA@c*l>r<hJ+bG&u`2q8&-CJlXkJOXggp[`%HR@WQ)NJGb$Xq$2'5&<NrTVs2PCnMBbla4&\<7k7miBb%Z_$!HH*"Obd8%YEAjHLug4$VMqLV7^a5f@U=tC_2EP5(DSRP]tjd+>L:+0Hj*1UOLC!n"@`d**_rh6LB]dbaC/H85r*H5Ylsr3!`s@%B(`5[/S;Ab%2RI$[c^oeiUH(9$,8%85MHW%>8io+!qcXYWe38[KEsu"6@'tUR_ldJI3Xa6E[Uq's[<M4PY)u[J([^"DA"1#Lg=<WR1C7l38[k"4%CH8nCRZtfOi#9"9g8VZ1Ms9$V2-"q`P?mpipaW2pbFCns;"\AL4V]H=:04\809>VHg$?uso?0%Q[=")GjP3/3YE:6!!p@RDb;&\*%C7&__>=@=l@L@a)'2=InQDoLX[;O,!X.%50`+gMSaG!U%fuBmnc!8b[?e/U&EfSdmG&,F4fc,'3/TJb!:4n4<afP>9Reg,/m)#KM%=;@@s*Aj[0M*H(^Wo6Yb+7I?lX'U[U;pd=M+rQ*+`T#q]bAZnXe&\RZi9aTDHuU(cB`-nQ#bOWpUSSM]`.)8[Z4?<n[,C2YRWrgS%M:-.)qDfH93WRu!"D$PEB9*;EHYB+"R*_Un&.>m%ho`TuIn&9,HPne.VLL#5cM2osA`=i(=_>FEr'U%@%(IK:=AdBEn,K59EbjU0%rQ\:qn3cYM?5g'FXu"lqX@--\"n91U)DtFO-C=WG(Jp*e(@u=_Ec'I7Hr8W3,sTm.3heF>OkEfp/A%!;Y9X3qjld^;E[t;;^6OY9%75be]@iXd1A>rg+<]?A.OkK$$^6,K.ej[36.KG@VUUIq+=+#)]J3?hk)mC!5ZA[`HBWd!ueHVgkR81HrOXpLd-7ub3/ts:mAoE2m%Lu`Zu$WA"p/<ZIjEbQ,B"!DIgKP^^gppub.BSb9In.dO;>g:]a8!#N]a!Ig&6091!CS#;4P'OT$<-RJqfIWC\G"_#*)("3C_9)IO%R*om2W><]l^6>1#S%5H8DY^QI]=d;Bjf1PDABH?Bp"`bCVOS13q-e`8g*q7ASTX\_L.Z$UA6#KY\s0BpXL>3oBJ5HeBcQ'A+?oS<%>0fIq(V`f0G37ueWHO19BXdad]J[I&Df_3-jsnd'<MG2J6q^gn]],[IZX/<tj;R*bf+bEuUptZ+n>gWAIe7,WTaIh3iAW9K,^&o<%=)cjR[-HH,XlUZ#V]n*'+G,eQF0E'Vq8?`#nVm3gJ,Ch03VM0I<lTQR?K(j&DsN^*Li_,L!QFX1Ru=g9g2s)a93f]CnKAUW*llnu%F%Ge=rl*Zh+8JuCb\_'_Vsmo':qSF=1lT/sBldRqk.6)fFTIut!]JX6Cp"/u>SjWT/mra+^a2*P^:>lSnuUrfm^dp[f)_ta9&P=b%-@_&rjJ0a0k=P\J);:qrD,Z1t#%_J;K%j('E4\.,Z8qbZrb$<EATRKTF7eR$Hh:ljn]0eOO!Ts;1LT`cF7I<;J=DH]2A^jZ0)jL.%r3<g-@rq1\H<gBQ\JB@0/aVV'fJO[gF"Qb@>1h*-YSZD)fN00f@/&hGMZ1^.eXu<<!Gcn9_KfH:Z*7[;!3^kh%A/UV_eFUFYe=lg%'%e9c59/]2!Is[91S+6Z_jcoAO8&Ar]kM'Pc]cYa2lXk'=.Mc%&COETFd(=Ms/3")P<4m>Fdc4ija6je6hp<b!5>LePt.*@^Uf[_%_-]BkMMNMR^Pl(DJUbq'>_'BW03A-;Uu*7-@:SoJG-[4l$gnWZ?IoA46WEggo#/_s8&/[Xrd8cR73G=-Uc/YiClNA98H!upj>ZpT%'o^GJ')C&XUclCs@=D5d"#lp9K.?(eG^LQ+TA>nkSmpdo69\fEj6jce#P>=#RV$FW-tpX&"[33aR-1MGc@]8\&cnR?WA*puU\R^2%Hbhg4k28<XoCMH2S-KRXYa^f?h\G,e4f/FlA&6$h)T3\XU<h,;g!:.NMSaI[m+M%C4cj<dTgM!q&`Y;Hr(p1<aEK3+ZGVW+ODjWo%,\*:YCL-F/'sqJ%i:V)Y7?"f?3=f^bHC>N;q]C4o7hECn)#am!M<CAA!<;6L6F[(I`E=$WJ7qLm0oIO*X.gU\6j8\^Y0pRB5.`U`%]HW8cr]s>m!cs5sIT_3t_)J#-$PZXJ-ujOTqW'c+p#nLRrTB>R#"PC"NU#9e<fi=#]W',CYsI+ZN0WXJ;hS7M^0*9iY4M1!7g2JW%#3^/*-m#V!d+5Ds@#QRK`ra6L$9p=gUaP?AX@H'+SKY$]"pX&mk&cc@6u2TFes&rEn^^72;36A"Q2_q/YbJLI9qRt:c^g5H_"JmL%;*KSPV,=9bKTf9cNXZ(AJZL>ipt9pHle*IpiHg+5:]W')hW$QcH7ESU#EedSKWt%.4IH*2d$_enU']AcTaae)rCUGp.WuW<8:WjC%0Pu3&8Vfq@bCZV:OnDb//])DN,\BN8=Uk9qg,)+H$,Ap'GJUS]*f_bT*=J`bGfP,R*mB'kh_:]c?k90d7]Eu]XL':GnJjDlB>OL;%7#=KaJH8lLC^7/<#B,>e'XhMf@+sPknbVIUo3h9uVg",j^T6F))gAU$XY[\*K*Cn+I<&l7<p^IsI?hL0Y8pa]&_a%Zj&2/hi34-H%:(C/*Y[]gV%q\$e:I<C?iFp'&o3O-VP<&F#7Kcj5TEA.!M_+V<#</k-$`5ssa*MnMb^O`gem2uGc6@>:i$ASq'HO:nV!#P[B4oa(%ZCFcOKFG/]=9r;mYalQ&,KZ)n"4dW#5X7CH#\X<\-tX1Taa#T+;8hV-dpg?$4<8E.503=eq31[MA9+X/>^8LQG)gn)$:3([\I+pN%%K="fkF=L8LM"7^6dEo!Op7l/?seP6%:GAh\/Vo@,_3F\+9HTQ:([nX4]kE-JZV3RJFc']%^O>D[9n1J3!Pq(MP1C"3$cF@K`iP)%;!o*r?p52W6MXhRb[Wro:j`A:1_'h4S:TmX1XJbq`ORX?3;Z7>&?UXSHAA37=M^6KjIhXO=E-WA,7s36*09t$5to&oPas<LB5"G)%BRgY=&QBp+,N$ta6)8Q(F+l]%@4JM6"iU64#Y]:uAH]Xs$E.kE2Epn@e2Lrj-*Yc@kb,9h;]-\]'LP/%K/(R]BYh<p=.i<?)oka.%]M[Yn!Xq1e`f4qkH!CIW9!BFrUp'6>e&Xf0>67K.V0SA;q#F9$(-(l]0:"3S!3$#U0,7lZLAZFPC=s>46e#BCb_Z<N00h0#'`f-7%XTO[JaofRb_N]mJq8neHDALY3d)1&B00^Y<K+;i&SQHLn1,/ple9N@H5R5BI8:bHq#r#;rnqm0M8L`hdlpMsUL0cEYP\,L^0ScjU%!Rb5EO+=QH_)2UgL'S2%.3)*T(Zkdpim^*:Q34IpVpEC$57asgrCDGV&tXZQaa&CR2nTQ\U^?QR!5jas##o4PU]O6-3"]>lIV]2g%NmoBE1(dtm!\Xl@FeLHU,^:n+TX,AJU\,N3[Xjq5\6ss-]Z5E-3#EX5Y$aQ`!sA''73QoG0JKV<**aj2.jq00Rkqd_H"C6"X2@d'%oqO('+[TEI*[1q(!QGs'huWbk$l^#?`l#YG9r$&Z)?U'd!_Ho1cqcbiJ>F9=5o0g<Y*[.[6K[P7H]`8A"r#0]16hUSB[#a.J8Cmm%0sY2O.5UO2irGm"TMrW;!tPrB0srI_qFMlZ@Ikqe;7Huf9luH8ec8jGJgLpDJWO_hL>gEi?l5a:VG-_JJj!3/I[2b@!"]DPS/MC&%U]Nq+5mJMHH0_7WrW&=2JZ!n2_ENu^k2b%S!RTtgFMUA%+>D<I$d)'Hd.ISUJ4)-p"G'E00n:,Y7nKG.28Cb:FRL+\!7^\d`o.(+%+Ac"YjXF)@#Ufk@MrL+,SO^qlMZB-f8J6jgUgSjL22oc[&`BL6RCQh[j.XjY50GD=R=OQ8\csm1"tDoGKcf"o%37]@'sbD=&=T(N%J],?EfklrdJ:fE(SK+ki!FV5^(Qj,#D!iFj/=^s8'Q5PPc09M)p@WRC@'7*3Zh-sWkGtJBEFI&dTjcSQ?m(PR^S.I^GCd%&l);Lg%k9D6A62STr6$49i?=F,[gd(TrC`_r4TNgV!6\\;V!!Z"=Y6k>>!IuMJ+oqU%]dlApn'@(L_8T(M9,-psTVUUA2[g%>"t$M+gMRu=%0Q[^!9*^9$@iD#efb#p('T*ciV2AB:AP*il1ZKh%@e"P]i4,AaXQo]$2n!jH*WaUir_`8X8IJqa534GVE\T7f6R*\+ZiM_WZCGjA%2tY@H<1,A!6g9Ld+\EY2r,;XC/MW-6n,V\&(p+RNU-/JbE_F5gUdM)_N5D4S2?7>Yc]AmCj(:k2Rk[08$@uUI`le"".S#"3%9(fX%^=!e4BbFR)0b@#d+\a3i"u=b(<IK-aC7^2TXHZ:cI6La"?K`n?8RN6G^,?Qq6/=Ibr/(J?\*F$s!rXr1^c4(Oj=K_2M-,c<%MLM;%bqXsL^)'m>A74ciP)$!;FkFe.U7%k:^m5B?YX$,cJbi5Rb"KtZZ);Ud'&*J<=l9T?L(-_i(mL1u.P,"l!C3N/DQ!ZA9LkcE`JPGs%'EG_DRQP-$lMt@\#mo,*"^i7I3LAqDP,]TR]i29sGlRh79S9!1&RYgSR>Q<J+pfsmoi6Rr2[RW!!J>pb.AW94:m2fJ;5c6%p0Cr-%0[LG42GqU0)#K10k8S1JJY):_e5Q5b^gsD5FL*rj^'XYO4=\]KJEkeF'U$BC5QR[44dop$W(-M;M?N-U@AoDjirm/B^/GRN"9Z"B%FbdnEi8LW&mZ9D-"!#,G]*prg!FY1r_OCB<#3I7.Jk7+(!5W,L!![8sV&nb)4C22E0Yeh$($H#/&8DnkMXl*a^gWn!K@C_?_'>;\%)2gn9`VOuARpga*1'W=m-nU]f.>p?6f$0G1&n<PjkU*>B5eOnJ.*Da?2eI5'TWd*00ldqI1,@E'Nrg`\!Q5[J;,X>=SY?dufL#l]%5eVUd+O\qu@bf<1L=qN"Pi>`q78Y+"EVmbu!?rShVpS(Hh<G!>Y6$^MZ[53Y!H/I8KZchlMJ=`JWPCc#G"e!%U'O1jPOB_#7c;Z"%@u-0H5`dUU5T"i[JC#.CTa?#GR++6N'B.r$(U^a]JL.-k'H0"bd91Y+cit5`@;Q<*+>=,HCfOIY(k$Oq":8<9Jh%r*bipGUe/]p,%_uk\4-UQs-;36D+#r@j/ib8EI1cm<]e3lqSbD4:eTE7APbim4_-@!`e9.hH7!!'V\GKArVTPMb3h/`SfPS6u&SQL8';j@ujXC7c?%2I>YUgW*]o.EA6`$?QEk)WXFPfjiqP7"Hr%)+Y>t;,h/f@>#b%Xb^1cJ6o1T(^SFh0[QC/f#[%T6#>%#lZI_la:W9pLhDgDVGs+@%>(WABl0_fIXmfa#1Jj&t9>nUSotJ)\1XBQbV-"o#-NGjm'q!!m'keHk[Gdbs&HXYP)Hp$N8&4&6WqKh#Rt=*9!p/(MN<JI5i"%uf%_dWmJ2+f3A$@o[(6e3Xf,B7l-!O-?bJ.0n^@9c&?"7[?,_VDj.W\Vo1laENUE+Yu:,s";#Cm\=p`=1d27Ws*XVD8k9J`;Bg9c5fh%BgToV`B`h>eC3n<@Gi$#k<K01MYRLSM`BZ$oFt@XhDYOM*7d&7Nsqep7NdTD_'pXE[77E)>T$#:e@5iP_%ujb<NV^7R/f+-JH\2O%N[*0cbdNFOJ/G>6A:*hFb'Xkm75bF9#.UJ'<EWAh#WNO11Z529"8u1d@L5Qi$#%Os;OojdBH3"&PUcao9G](6fTOE38E9sjcg^uP%HT1Z*0A-g$Xm.CnH-eL2lp]o5!728+%#U%*J%G*/JdjY;4ILadVW(OLg]3:<?O&jR:<1U2:K7gZ6`a$O,,$W:PmKF59%F%@5`(\u%V'HlpI?fY)7MqL%)<T9*R=q<rR\:OpG.*jR!6df&WGt2/#c+I)'O]Pa])W\$7^^@,"&O#%!CpeH!6-tA`:!n<(kp\1;aCZtr%L.M%N1_-MeD@)YC8TtJ9FLq))XDnVW#<BlZPa7l!E,Zn14tmr_E*b$!BA4YVQK/!)1rp;L]h8hR(1006a&tOO,Xdo5Z^V9fP"^ANUir3%%<>s)B6h#4YF9hL6B.C'ElNWNSSO<]NLb!M0Fo*6)sYTP`M*>9NG\;A\TSD2aC)fW*ZcGY*>FBq:qn$$Gq^@.Nas7Jj=,/N9o@jg%BC@C8M</_FM\Eq;6om&3Z98i9.hb"noeisA?raDK1-2K`f`95s6^H@_ReT;Oe0"qk22Wq'#d-or6u@N5()l:"iQ*$fhfp*[*!EK`%:Q7R>8AfS\CC<CM6,\$!a"nC%0QbQ5Ld'_s3Wh0>G<p*Q+^"(E+I6I:5[X8pLXEVKON+H.kl]3a;Pr$a;?K;RN.Q\]l`ni4^lX2W%#h1D-_!-4f!2Hs5fL0K>)/CoO@0.&q1!p$oG56+d8\.BFOl]6O=FJh`'4(t:4cO"9js$a\i5o0W?#`c4^NS#V2#^,l`[HF+58AVP%@e3h,@nmhj\[uZo-3TP$/;0!-mHaWNoYXX9Pkj<]eJoEK27bPQLCo)7iYf^tl(DF+kh]>PNF9'[c+A-%C2jGmHNo*0NcNks@sT@r%^#kE"!Q+a[d8=E,h#pK\WsDH'#-O)c?L00roP?+S"%7.+j0DEKTSemt;objV=bNWi0Fr\J(?=2)T$/]o7^Y/V!b5U3]H7K%6mcM#%1T]<e0F)bN^bmh$)/),RJK"+pqhta[B.$XL.b&T79b&f6?o.tfg#>cc!<=ZW%3e7fc3V]Letst;E@1%A)&X#4.F/EdK:\*m`6)IA%5ci7B^qhB$#%"50.Ie/:"gM6eY&Bo0+JY;>8KqH8-r^E6]Fk;9?8?:#3e3Zu!=.h!!/]tDljbe4X?$qUi\M6M/FAsb=9WAC(lh65%/>%ITmh&1.C8#jKO4,Qp-@e@$<Ff1s!;Xq5\^6e]R\$lEBuXjFQ?-m,'<[p]r_;IF?C,@]Q3o?g>VL1UB;REnF%ZSoCbe-pCT`AK%W#?$c7pH-R_a:N>ToQ9qDSmGEb3/7&aP,RO)L9=t,Qb;GD%5A1oQedHe3KbrfJPRgWU,?mnr7LC)-;69AqGoFE!?djjq3b1&mu8!%VFE!i!f:o7=o;c:2pgC"?53N_=V.S>KA\^iq_iE<!6TnV.AD9_VctrRNNhVd]Tkfi`>Nh%CAoZd<rfS_.\t&I#.kE<=6`qu1=5b0%/IJ'>!5;$N#+E&p;,\]13.OL$==!P0!PB[VXVf.I6ABZC+OTAg=A]3A*q5.$KTu^YXO$(AS%TsJ7Y)K6^<u6fqMcu_4H:e?*]>Gj%/58r;Wm'V+Vhng-<8Bu@s++"c8[e\W%TW.a4%!C`"UQt@Ut/WN>'Yk<9Xm.CPTYND'eE[m4CJ[hs"pFWJ-5cZoL%^E=uC_JQDr[P%F8ja>YlqZMPhQ4Y0"gPkK0\;s!`;ub+tA80YM>Z/.tN"O,s@-<*J*?R\n"#:(e[IH:e.+-k$9;_6XW\_)AA-H&MR1iW9=O^;BBCq%P*tLLClmaLNOJI'4E)F]<genp;q3`K#Ap^nE2WicB@:e+3**_SWSQW(>\G6Z'Qk"-Tg?N__/YICo26f3+r%Js-/B]*^7\8E^9Kt_%at%%8C7kPdO]&oDr@/#k?EWcAJSBKSaKlU<XDn67d$e))R7L#Ch\F@;GojP_YlSHo=)=:=;KIB(+OrpDe/!6:A0GI[GsBl*,oi(<%?l5hW&^Q==2'LgQ4W&_39IIqB)DkA;OYS9mN/UT;(`W`6/0j[V"QnifaONPTQZ+Q`CtCYe_"-1=<2C%K]WlHo0qPYF]hO?SRVk)?%(65ZF;g]7]cq6<]B[dF^9f,c9F&3-nJZ7!(\/Z*3@:1PpEY_G)6E)_)p2p@;@:`Z.f\f>J;49-_5G+C3OL8PsA`?OnQ%9iT/$M\g%.M(/?ARHLW5_pXD'VHej!!1u<bQ.I%;+sko(?mHt<9[g+SI/^;-K+uaUiJmAAGB_1WXO!1Vjno$NFSXaUk,Fia"u2(o-c7.!YS\1%#s;ljQhn^10hai\4cM6jr1%))UA>#R!AZ0mR])+hd(Ij:!rJMoo/&"aj]hdnf2usBVtA8dfS!2Uo>W^Xl8bUFdcX!D4J.=qFNl<R%1R5=\eJl+dZP<bsnt1H=b5r)PM/h2T_c4jK>TO@?WM3,_8.C4Ii&6L]-jOO%CqpW8)+&AboHrHQ\M^@mV`3QX,:Uf)[3Qsu'^QJ*%:W9NS&Ms)I`C*"q81d&5CGt^&V28r+T8mJc<f=UP<V8j:97rD2etA>m,=W=@$FgjK#0i+%P@jW\HkT1MYtZlE9TY#"mg,`]-1:i9%2b1(VF98R?7:>D]511I%5dONcBhF8\#E?3k=rGY+A\%r=m26`g9%6t<B*@pKbnKU]poIdfoCuEAXR#$g/(qt]<&u8anMlk,SqIa(%_R[gt5^P:[blDXY+n&N"5L:55HkSciJL83@&gB`3a>F9Y1c".?r/[5u#YQu<QqJU@.lBcR>[Km$V&If^<s=,SV'TTJ1JgHcP^_![%GmT+Vrt$#^#t$>!HoZ/^i5!n9b3R!A=p5]h\"KZJJHs!e2NtgM=_.>+W[[5[eWmsT#mI7R;V7<GUWOdb`TKlNZH1,.I7dV:c2>@T%e)UNa&Fl"J'@nIY?tl/o!pU";',bcZ)$><5W4:@+!V2=SA3s`b5cT2[.4OO42-RQ*MSRGhE_n%G!-pI]ih@1)2U,i%3R5f9_+A;Z%$mL[:H*KQ:d7.%I5X8,or06L.k<mO(VfpG)%ntZTT1^"p!U</D[426ohuX`ZAB!`pSqE=OVKgJ;b7j1+YL9+LAV,Fg*$BZSY83'H%!/@aZ9&su*!9a/km2-#<$bZE%,h.,V=&l5\Tg)J:/--!'51XSL4ui6mgEeP^\Sk]6,bS8W,aM.>GTu)8BWS0=QgbIbj36SY20+IX%P=3U$p"0Ik2O-OFWh\^QbFYkE@PjFi)0FNDE6;/uST*#<d1VWOH\P`&SRuX6pfP;5286=@."'7Ckh-n)8nXfoS>CV'#>!*B-c'sr%^j5$E&8"$m`at(`Q[MK=9-Z8?F=n"Y52+8"_g'UiJ9*oM^ki)]P%6QRKYTE$2=t.uKKrXFSQ]]o((1,-A:YNH+kV_FA5X\89`RZF%,a_2'[(u=\7]H^;BNS1p-0;WcSUiY6mMY;A*NoRT?9Wm3C+PK?Jf->4ZP\@q<$cd:>"&\CqA?<S'8`*FX:SEZ$b<M$71\(6=01_g%"dbg8C(LDC5TU/s"W2T`A!Z6&S'rXI]FaLe&ja=R=u?M!hVGNt7f\P_X_oMM<LD1_&orkY.#7(J`@/3U;G<lSVd>[])3a)/Zl*+S%D@6P/"/RZ7\dAT*q(e"l98H9(-1Lj1C!Vc+MmXB-.k!Br>hi+1_UGh.VIGheRPTQVdg@e[I7mS1,,?KfL-<3mQ\g0abH2["I:%%(%+Nt"#Uuqr1'/:a-)uA.6mKhI3@U:^SM)N_"GJpab#3IgBA<a<b9=iL"jqiQD+rQc;4I@#8X[oVgNp8m/ATa"08W$NoDJ1$?a'b#:%%SG!F+_/nCoSr)bk.f(@Q@Vo1[&#6A[0EC"O%W&q%s]7g)'I+Nm3GFA=3X"(V\uK3oA^r*f*P__h2Q%%PduL77ft#^"h2O[hE#Pg%o/*o\^mr!1KeTeT>1hr#0H.1B0Y(iEE#8eA>R_Ul&nR,`c/GtaAjSUX#t.j&A0r!XLQ`%g73iTD8m!4G;Lh%V4XggS)JV[b2_UB3%&;ge*H9@281YWmKN)WQ@@ga7p%<Pi.eTbfh-c/AO<D3Et0@kD_i=gom-0jOQTrYu!6c7u6U@D]mV3"P3Bo+hN0g*D#6m*NkO('DE%AeKP*rcYiVeKbC=G'2J9kG2[(.Sa5DTl+q+<6Br#B&IOK]4R3kE66k^A?%/GMp&pGc17kbl=u;)-%s`$:a5Zq/-oN%f#5ifV]7-+%.J:8Hg#nl>eC)5s[B!LW1l2eECZQ2+`)mTr:dU8HVBR`F+3-^O>c^j9JM5q(@g<mp%6R'%aGV16UWf!<&@>b0cdfOq\(hQL9jQm3%3ICt,19UHWXrRCKTZK3&c%HpV/k6A[WG!O62mF^K4`a0=bnD)"*8frB`KPCL%HF/h,\PO]0TkE-XNU::>09/nPD>Fp'ECgS7DRp`%3<E\Nki`);\:GO5F*.JbrMRN%/5Z&'!hn+'"tg]Xn,THX:%2rQV:I4Or$`-6L5*=I4Ip5GPj9b)Y]*RC<n:9HW](tAejJ\88$]Kl%@'3Ub41Hb8pRQ4pblX*?Fk&[k.T&F])0f%p7lN(MbA1g:Q6-`Z\Mdqf^`f>_-L4^XM.@r>m.0fT$k1$U"u'&9=I'r*PgTYiBn!Gj%-1V4/X248N9BK0JS6`kAJUnpe<1%%tA"1WKJOp:]l1$G1B=^)c.3JhfQM%eih$'/kM=+PgH7#g_GI]PFS#Y4#Jt)?Y(>VVdK?K9'%%hOBKd60jb56c^f,!\^+'@8:=ABNeKgdoI[4?:(eR57Mhf6K,*%TMDV3t,"Lb*EsEeE9=Q!/-=8J]OX)?+pi1#7/S*;`?qA,0(^k%>bRZQnnbC$OY0t9BsrG'NWnZ5A@dYY&TCGKcK,1c5-O/.n]m4Qe%WQ"1QZ[See';h%oON0QKTen/CY>'H:/=G&7m*<>(c`h/"X55%A;$GE:3'(jYF?Wc_255NV+`fWOCY5gbE_]HSa;55")G;gP*ns8go<AEO&3qDLq1=!*:otW>_]X\Vs`%:En/`2TGGs[],ja_-Fu:;%%"4Vkr,Q9%ce*KsVXr2u!CU=EE';cn:^H2W!*qFs22(2)8nDIJN\[@T$-WPnTH*#f!7r3i7%gS;o_hU)<RAXs/t]B!!IWLT34Y\,%1M<jq;ohQOA!PDU3Rb2P1e,-&GN*0ERBi-Elm%TBb"+duk.l<p&lSG%k;YDYQY&d2#YgVo>SQEO.Kl2,nL.9C(Vt.-!.bdT2+A8h%O;_PBF;NdG_QH!2TM>fE6ZO#laaY_kGBFqM*?>`J(r\GmU.5>Yp-:8Vin)<*2?JdSK@dtj(Sl@[MR)be*3S,7=.*P6@;JSOQVUP8%OTq\e08F$,*ZiI$$>ieBKY@a)\E;:^kb/<U)cpn^Z>O%_)*n?-RAl<'*r;C2LOPu`Lf-":o&,)fb9]_hWc3GHet>DHl3VQq5LM@7%M]hRW),_KH](rVA.EPA6E=c\OcbY-M8j[_WMbRb>$IL(%8*7`\l=s!n/JKb&PlLjc,;"jo9p-4ra:#71/=jh"o0P&4``c("RM$&o%5Hc-hJLE!<dAl_1^#YS!kgY"?7Ke+Ti/rU)9ue(rI&fHJ:F3U2Rj\CDbV`m[HJBNdTkfdB,*PLu:/!Zd&nsrbM6qA\:,"CV$iF+X%O[f1PF4jB_B<X@nUZj;2F$#@H_dK?:RFJ&]Ano;P.S,L#Qu_%+OmjiG\6:3kRoh9hVDQO?8PFM5W[1#p8V,.!?P(+!K2`5)Ba'M2%lmZD#X#1*1W#8N.m\(^U<K*.s<KBAjA/`KHiM.GCfCjl$U+l1b`QKl8M$,79#pl#CG)aP7\HXHJ2(YJYnqpsPFC94+'WXW*TbR$j%$:\'%rqr!F-=T[&^PEW2*M4A%#W'T4,6:<&3D+i,LE7,QY?%;%_9VsEAFq-*(OPso6QHJ8'>sW+::u@te=c&k$*ae@g.,RkfN8g1%Y*bH1I:uX/H#jOY9A\[P3`eh+q2p7bF*@bY<S1/fWf]C>D.ihj3:H$Xj'QTS/_p*p+nl1e/q:8*e,=H>!5gcTbcd;$cAe0OG((9N%Hh_B_^GkP@L7Rl3AKT^->l"810SGLq!NgAAc,m=O\QZQ3go-4QSXCOGL]'M_g`,89Ic\S%iACQCs-gYdmbqe[4P/E#>.LmG!tGj!%IK&L?::Sb]YCCLN?-j%!6H!4"G3sL%/SFUVhjkgkSqM4_luOR0K>1Jts7^hKrdH`en';%+g4S"b_=:ss[C:/\rU/r"@%Yb/LXDSU%H@+-;k[`<Lh!1Y'9Ti1_T7kS_@=L=@4f:X0lQt\t/s:'t14F:"kRI94.ga)=XJ1B.Hk,aM3J2<iE\]$dTs`e@QP&.&Y+3J#cD9&5%p\m:+<@]4IB"EKc3Vb0Q1d!dE]Jo6UeLRoPm(T*?.`9[%Zp3ANU`T+F9rQgQrh.K"$D#A]NWlA.92JtEm!?uY$%a/W-$912$aMiT%)=R7dO#tC;rOpb(Bim\^%G+U)onSHK;?;4G*:R<+fGse9EGsX#NlJ,tOS:lH^!IT:*KMQGBpl*m.1dV3@cb4?1jf+b>8r?3j"P<i%VDWL`_MuHTfc6mfE<kjV_%3=?AE,GIL!-ha.WN9eVU\RSj"YC5VN&X'nX)3Ue)g+e_FriBQ'oU[HVE2n`V#WkiP*$4;n_p,Dm4T@%l&OVKe7@%IEA(EYPP9<A[I]m(aWb/@JNSk@B)#ojD>*toG7]rn<ib'Rgf3tFcH0VFmgSN?(MOm!f@?qL/Kp=ik96'_TO'r1GL&W'%QeKPs.u-UkqiflY$)@M6Blm,)pG'qW!c?_NbsIWShVR:V7J+;Zg2)9\!ES:KN<Z0Jc$+r$SMaWf]cWIE?qRoS5,Zr=&sJOLIV5jn%]@SJhO$`;V82mZB&$Y*9TJLKaI68GAL*[])oFmjH?DXRM(_%kAc<7$05B2ger9_RJ="j9YqO!jY#5^:N1;Q=1KDkgNA,j;bZiZhX%qSVPmWF4)N$+TYOAHV@V?F`<:8QhUu0hU"Ig9HLsY@08;>rM@jOoBNd+)VZ4qgAAWp1i(nR8>g,hHH@kDhA\$#O@4m$%_^A4QOa5%8`C6VdjL^c6>QT&l*9dp`S0U]cF?)%4R,X60\!j5QX(TWndH\fnoE]ZQL7UgI*b77>p(r!ZqS)2eGjUrD!FSUe@`=3od&B?W$dF&%:LRNrI:\dZ9`ogO#Ho)Ad@`\kp&;E]e$5mi^L23Z??PqWdW)2>5:Jl$mC26JY;LI_<hmD&r`]]oYH*'7p'7-$RG823ZTT4dNt4a5%dD9SJZ9FTSV%?06=:AJeZV2[*1i1+W7LZCQfe7<Pi<>N2X4%C@07H*'ao*U?ZPTc,o(&:u0#Kkg]7!?)DJR"8=3k;lbm1_2nU//J%EN^uih43K]SDsOP"^+f'@BDr>MW]%1FhZ56@Q!g3Ks"P8>(mS>YdU"'[Q:&/3:%'/]tnT)d+^)4/"_:MZVToOl4hj<VfhimF41cH%roA=Ng$9[OL=8Y`isVY4N]JlDlD2g2HPUKf>NOA<?K'M$o;(89(an$U/S3\jC<"f/VtJZ#+7mddF-9Q54Q?*Kfu@Ah8QCN9CWlOS%]tO+%r7,jj>H=dB&]7Cl=2VW9UA]-*0)PU`TN$'Ti&pZ1+pDfeKCE)48d'^TgD]YCrciNa@KEFZ)TJqWUCu/;kWD[Kbra_o(S>ZE%c_#\/]^*4;4Tj%Ce'>In1?"7cs%((CH(3.#]_;XtIFYE2\t?mVQ!pl&]"icu1Y@%2.T&HJofS#^mVoSBkj7]-*1\Y&nCrk2p&46`%)>D3H?Tk*#[m09[<G":hk;et%SRMPs%,jEJ(&eBM/o!K(PX1fAl?ekj%&1Z[eij/>.>'Uh?tC5L=ki=j$-FA_b[GA+(mjdi^Im9r%[4-d]'LI3"JulEOf";RR6>MKP:^Bof>HD`d7#;X\>@"]eK\-u*I*RGVP_B\*jXl-6,MUdM1L>Z"L_=c2q_6+1/;,E=q6f>^92Gmk%@Ld0h<LnU_`*-ds/l!EW)($md"O:`30&d%@AZDC]FT;,Xs-P_U>QD'Z3X!amjVRs:[+^/a9tJ=%ouE#k>TA`%,+?"/f9]a*MfJdi%QYC7=e8bR)s!n9&l</$.e4)]?"Oq](W7Ddc)Zsh"T?^G#ooKP?ib9X/k)6-sq6U`0)tC9I:MV>LlnlcKc^TDi(Fj78Fa^S`b3kAP%?b&O)c[)obrl$t[8cS89i5qY`rq4;oa7Qo<EP%KLFU]9Cf[DTeCf]065+0YsGg*)/\9Bc5GQ`53<Q/U>JQH:fRi<#)a$Nb<>J=>3%,5Bop^n4j#48f*oHr.BKot:63\$t6:0)d1eHa/TXSS>D=dofs@qi"RTT*p"\`T.kS\6(blc2AEMI5_,jq^pC<DRgJ=g@_>e=2_7i%WHP7DXK@hqn`8;9>F4BHFktAjqE<GA^5%+'p[qZ&4_oC2G9O_+cofWEq)\2pmA$jiK"$ZD%MnT>cfYflX@@V8Pg;hT3tHOY2<p),%Ao,tLogHKH^j18Z2ZfL<%9s0MFpW%#4.F-l[^rOrmS=@SHIEKFq;8+!/l('tCn#3]lDbO"RuHILaB2d,X4oNMb>#usPHinR/H8E^%99ORfZh3'XjlG;G9=`/BDJnDt4dSm/Eg*?taG[:E;Q`alB9T1IA19H?8i"Teqth`eDYRT9/R<NDCV-WK?ZS(b)=N1nh^s,)G+nXK%VJKe^)P\Ic9>_CTFm=N8S.tREaX&EYrp5hoh\utnmoI_Icp'L[_WT[#G^&?98^6tdKTe=QUbhGEbuY+P7lZ>O`3"Z3Y;a)tG#%L,%J(X-1N,JUE*t<PF>N9&aenEhV0$Lb?i_8MPB.>4;2o2@cYj%o5d7pk0gasBs>oih2r3(Tl10sP.8N-OTj(IPOGkEV6"8GBs5_mn_%gnGe54uk8X.%JVa5bcA\e;br5$cLU444l;Kmd5R)*aae^E::(9/5",Vf!"c@0kfo/+cFfFS3q>2oXr>%@ST.-%VE_T8DY\:Z&)b&%@Mf(8fS)^C3-HHr$jpEZ@MbNd`?oc5M-Xq,(I_$La2tq=Z&?F2(]OQtUGnm5:P$Ed3)18Dp2ZJ_`?k_oIMIQPH]2rc,ldd$pB<aD%?fH&"\fSsH61o@`P$\:`FZkn;8M7+eoVYJGrIrYQ$`(g8f5@ap%bhuBhrqAjoeI=_QX/P8AP+J([9$k)i*)PTH,pq1FqJlM`CU?%%hcQ?uAP++b:+s?r=3BkNG.OGm(\o"(2HR+6o;4IeRb,@S=FFE&k$[]A>E.0?SCUsk6gQk,^X%In8t`opCB^]`HLBk%Ps_>FrCLpb%N'?ZPbK88?9;Q^``fFhOrsmf\"4m!?)<'ne%\G6#IfYjCis2]W+63Unek.8Om$4SH1&X:cZns<gMg,,;RHc?fp=\W5m7")=:r57T%&*'`*mNp)`o<?O28AGDC=`tGbfL,el4;&3D+ouIiKr,YF&l8Z&9dF+@4NL5B?k&C\-5*O(l`c3KHiaF/Oaqr>#>I9k.P*Jacis#m%p;``;BkQqQW*c9nQ(M5K$Q]+#cXcKS<fVQFgfMN4f%u660o*0%%W6F^FXh;jP?rUkqt$UBgah>Ob]Nm_ER31S\\jW+a0>C>.W\gE%h=n8%AN8D7p8<7q,.)N\!4tD[&'@SFd.nm-lq;>B8r4Rt59:i1QiQe?LC(&rfR>k2Te/dtJGeQ`QaOBtjcWo';FX;sDF2_WD/M\n%gk;sEe^?CMI$0<-Z]jpKP6(%0M\J'"j+FG6&%K.kiUdg:fJ/mjoPhMlH7A-8b04>>l\J0W?qm\X8moBI2+4u)ID+i<nHF`2D'J38%kqZOU-s_r03R6[E8"nb=Hg*l-X/fD^Okd93E]5&gR<JPKBA3,S)kUj3]T%osZlYgZ`b5.hQkt1Jeb7e<B=_J7e)dPi\h%1:l8/&K%b\:6DToIO.ELJd\e&H+U3),aYBo4Nsdo9opC[O#rHPb:N.Y[cr3_h=tU[Gt.;aNN_]VZ)!2-lB7i%N-=olB5<f6*"Rp5V$Ymal/1%f(R&\k3fq+I,b-1k4B7^l8a]pIstnCkH::+ot@2;cTh:/0Rigj=DtnkFS=SJW\A+.gtD!hhqosukF>6'Qhp]*me5>s=Dk+hIZ(RQ%>qXqCfk?<:T$nU51FI:l>iR'tmS-CKZc-J,78dE-ZaT4eX0''W.fCr=laiEaQX*9[`qu=?hX4^JPeg>_rV=@rWuY2HZ,UHJ?bBX\%CRol]%4B-m?ZLu1SNm!^hAqnB#<e0PU>B3gO]caom=16"^0\$i'4-p,QG:5E_o/&5QN&3iOS$29?S-c4/Z_V<Sar,l86INYFST*i%+-2/i11n\n-e?X>;'a=h?`0OK==iVf)D@;nZ8#H>#)eJYXpCO*BX+)pX+!!^bGGPh'C`[hRsVQIJ%I,pBb;HaXJ&qpG#9%pFmg;H%01#8"Q[RMb#O@4m$%_^A4QOa5.=ou%42:Q:XE9n@I<AY)gn,W/ou^NX^X6WU0:LHlQ^'ga?$09V28$*'X9@hSWln!bJW1RP/)PBB%atBP@]/W[;c*qYoa#\SL$%2iQs61*)5YHTPDCE%0hfHF#RYV>^CL"^q.Q:]mZnbk!\S^Fq(Z_Ls6`iNS^=GX'X16U?rFR0&-V;(<%?oRJ^c@U@ZQ-F`%FL%]Kkb%(-F*!uYU[b*j)eg=:rhV;S0%Zetc,B_LZpD,RnBD!gX0(<f]fP'bKk<O?/09;$6_W\MTeG15r:3=t%g@>nHBp"mV?&C^@5@A]:EFrTWW-/)Dr(R"J6L=89n?q@aM(^(0R'[eqGfCcpEkaPNpW)G16<KS^S9EbR=N@fZh"d5cTl$7\:F.6,%L!Jk*rQ`N(n*("=$C?:,W_(13>ZP1B^Yu$8b"LUQ'he5k.T%=T!Y<@9)g@%#r=YHjY7FF$alHQ>_hhn&T?)+Xo@"&9keSTlY](&M%JuU^Gr2Vu<1J3Ht?/EW%bPMu,5LVQOCt0SOmd&H.CVG&s5nQFis"G?TJKa7*KP^qFHO'MCrIORXZ&CsjmCkf21E&5S@!,!.Xu^Hs%#(KsnF&&[EQ,enh9p7CB^s]5PIM?BtV,7[&(k=>J9`k6l]^.V'0uqK3n;i@ob9$_1<s^C<.^+;D.pX.nWO&.k6!R.$^otQ#IPpbl%b#&c9a42;g.Q[oYe#F411%l'V=U(Me'K_(V23+G7BFn1=<1m)b9qsOM$tU\r7o8E`Zh55[^pL>R[pEFpG,m7o=NadLfCno5Nh29.%-M4_=)A_bKoA%G;=0>S1^*rn;G@\1'UHTS*.T^#WJg[c;HfJOMLrS]XPCAk-jOS+3&U((eO%86p1Z?$LfA>aE:LW30dkP9tG9dS3%X.7A#5<ab>;Z>b!hus%.9]'C^I+B=OkuI$/PK@7p;.nNAk`%*Ra'IX'je#QJ_a\8mkT@#P+[)FuR;Puub42iBBb*8R)q#I7qKN9%%5(nAd/)/@7]Q<,;1Ys'n"ui\cWf/B#XaoS)T'l`f@9ttN=0Xe9Jqi#-U]7-</hCjs=XYc-#f.IFk<kJ*?0Uq`$*F_VYC]=7,PoCR%U,\oT:hnda<+m"/O9]+Bcg/;/lKg;*"D4rtpJOeW)rD/rmtUHFfN2-tl#p4^X?XK?8?9S0ql?Weh]RR8ACrcsl%HD3%kHG//Wq%B%^*-dbc[0>Lg=^hbr1SFLdbhC'(m!PIQ9O<Wmt8Yjl$L*WBu$6.e#0mm&aYl;I`U>UC6c*!R<irqei"8@ElAqd'bS(n1f<ASPKnD6%B.f1kY^=fj/sqCli!5Bkk&!YQjUWo;P**)s-b\)<^#A!(?W;ZQk+m@jjMd#/cCjI,?\+e\jHA$R^"FBdN[r8c?=A:an2('Bg?B[]%F7V;A%R"7l.tu#^4R5cJ/,@5,i?_9H*M?-91Ob87L'lk.hoP.ml5b*F"RrIbVPVaK]eN[?Y%XKAa`rmG>n&%GK,;t^5'Jt)s3J-Q%h@,,HecaKEk(5"\`bM3cM&W9?r0"Ts(7Q'8#Ko!X)iPT7eGNZdf<7C%%D*_-TJu*1ZgQfms8;D@ZZ'fhrpK0E+:@alI'm6WEkVTg%#Q1B)/`F7p5<9i&iON?c4?^SCeOm$/-gO1`Ot<\+#Ct7D28DgAnt\)*JR([R5C$0KgFKID6gE:(2!pY0F(XCVPJ,Fe\ak@?9V]qZ%^rEUKTNU>12tiGsm"K0iLPZtn$b5BKqt8+X]tj]nHKn8=4i9U0^\d%4pbCPUne)du7eM_RY?5;t`qtei9iF94!d"J&'Sa(h]!ZT"%]c?J,l_IE4%+<cNO`u6W-JrdrOoCr2=j9i'aH/S'ir]sM+7_O5+FLp?q,rN<,NNFS4'i\%mb\>V9)VL%.FE)c)CtsmKn`BFRd^@q%"[DWaG\MuKKH:ONj8%X$gqVmI0O>=V\lP"GFq\%16\K1i7PFoA&fAOo!s.Wb*O,#?"%BNJ0O\@A:_m)f&Fm\H+C6-1#Vko.D]$SR%,6bq\WK>mRZPjKQ_(S!`Dh/B4+\%8rrD&S+XamApTa^gC4;+g."Tpq3ZKXnD&h+qQ"hL#jN4#+1Se0"'R)OV=U:)/t"%?fhQj#n;%aF"XIP0]L')h]ih/OPKV_!F(13=Wn7LsPn,?oX<)JC!<9OWpNClG5_WW-^dQTs>`R*bX]UN1+^PZ9Jjf#_bh9=Ga.a]c&;%%AA2p%ct@e5?)/4PGS=5t\O`Yiq)lJRnM;@qa>fN[c1IA14A$0Rfm0/,8,:/)^'P6,aA"_mp_5nHmQ4Mo'gK(pZkEQ_r*?PN-!lK$N+AH?%R1_7FrE'BO@Vg$@JfG=0&MHC;dSpNi2SKGk=>&C*'h^N2.WRZ=/F+^/`@u1#o*ZEf??]bU+oI+I"K@)B.usotU@:.I36D7U[q7TU%hm0C;]"p&Dq$g/1)'R5liq<I"&3!n5&@Rjjg-X+S0bOeJWant0(%J<fmR^B6HD0aJ(,.Qcj_lA!@pft:[o:'VQ@YbE#/[o_7P(bp%_f6*BB!Nl/-_#4:TS`t]Bp[qEccAad86(c:U=uUjZ&gQe"'Pfa;dC]\ZE!qkSYU(1R+Y.cbD9.sid%(:m4c;rYIX@a/YHo0V%i2H%0*l8>-:[V6.n)LkfE_Rj@&%mEF9K&+JR+7M#F@2'U[%-bb$2+VYA,Hn=Ug;qPD/L/i:<fq,"m8>Nb6BL(p.;VQnVi!X(-hhV3IXo%/Ke#+DlAa+bR1@,8pGq9T6*YX"sHVP7%YY812`%tf-@D\qDt^8+X=*f-%_PBl52<'d1s*M+VeK4?D*e4:t01&5ReMEVP%R\GV#p5%1+-dI2&%_g8`issKSJ_#<<Ap$FU_W7[Mb6Y.BA+2F_MLX1"@"se]:ZHUhUeW";8:..M4Q]=j,Qurl4IY=*FGX?=sZnAuFAglOFI"%jgK,Wri^bNqmTmUk4G"Fe@;S%iil5;A+17,%stnf@MJbsU?Iq2ERh:kqr=nYJ6gk,o;"219e$do]il80gFI'l?Rs/)+#T@bd3'Y/%7A:/HY\e+(WV;NrlM-^e8UZ(GP?k+N"W4,>#^a$Gl5t?@nd4`ulV.$_/("^8b^X4Waldf+5@F9=6FkLa^j^4@.,%<FBASGR%I,!.%`C@tK6iu&=OsS-M<]3Y0e4;N`,t1&6-hS,Xj9Mc^Gk(k\@B&srDB*EaS'M_/h#Y:CN[:'Klm]uGHN*N[((Ts99R:J$Xhc)3IYf3)%*:9::!@=2*Ba:t%qJT!UgmC[g=Gbtb+"kd?;@\NSX.OisO"gQb1h`JCR[4<9H@=nUiT0Z=SakdlWg#C57JNm?/VD0@n?33lS`+7l%17&O-#,Al@]iB9Z',K<nqYAG&9n.uV@))875BI(kf^2C_TLl5VTABAh/cS&2`3M^[Xk0E3ho@9d)9-$oWY]BEhu'PI<l_B+bgAD`%]p$Q[FEG6[m*kL`bt/.mql'*oMj7ko:VJK*<utuPS>]\I>rpYg\&R.sS@?=Fd,2J!Z8ckZVJL:^Ml(gQ/+KG[KS9%]?Q#@:=S.l[%Rb#*"GNF&8&.[.YHmc<BQ'p+$X"=&=k<>5to2p.;"hjd2H-aAB3@pW=S'_oYJXtZso^TG@Yd2iG&39^5)CU#sG$J'Qa0M4VfD;/0%c5VJ4hR(`8,NtcZOo7X0^?eJATaZ-JSI6EriK).\!5j?)hRG=%R1B)2?=cGL?BaKApBLTVb2*D`_S7V]h>qFWGp8+9)H6NiEG%&o%NOSrQm7g+2b+$\L6eA$j,OPntVS0aBVgE_)SQDXP)8S\Rar;mMl/S+,&akd\=fOX+.Z\n>_obopUAmHX`i)#e_1O+\?1*='h[[JD%#%T1gj3bt'G7E?Ei/^[2a3\8jn8T-G3H_W"B0:SulAW=iqG+Y[#PdTlqc:0TT"I,PN:@fZ5b[);9`"eTPoT@FME+f3qk9W7md")\%?eP*'_i?V<YS(*fdjlufPAtNh)unHh49J'O[(?3Mk=pHQT>!7bV@;Wf9K3Ljnrr+V:1nfjdQ-MkSrA\Pks>c32DZ:iTH?rj3+ca"%pK)8Uqs;k.?FPE)A?FprerH6o_RAE0_KoD-it8VD.PO;/a.7*lL'*JtPIE?TQlM0![fKm<gJ0c+Hebe?k6]WY)duQi:oU!Z7tsr<%Do&Mqgc5T:-iKg(JQ9)F/R5jJU>f9VDtI+LI#K6!aaACKQ.g+on6KZ6e:j7_`XeLOqK/>*1HfqOH^t2cg[8j$G_Ve.^/[-ol$n1:%!eL!NGC205j@/q?WN!P"6$KakY;#pV1*#D^Xn7Ao.HP5C3PP&7YY[u;aX/q=D4j.3Ld6F#80Ci4?MYU*Yp?L,P.2Vi\[RFnGD9Cc%Teg/[bV!Tmfj-M,Ji)T`@Tj5!d-86NnRp``'GC1q`C)]ApTZ-5?!H.<[,Pu"M8e:P;l_lXIVSO\="p8(^`0hXG[oML:T?Q=-'Co$%IdsCT\m$PGia0)UmN#;M/+4LlIsZ=sMli#7l!\MC\EEDP\B9B/`NR6E?-X"<('4E%1CrhbH#6-]Ya=a^?>9-,Jb\'DS+i31\GoXh%kgf$P\Q.b:)gcK-KuKU!%-CG!4-A6h2$iSUIuN4u;*$kc?sGi5FdF:8mT)j<KBc@)V2n#JX]k5I??A\sNjZ1M?V<)N:</"#pIc?d%qWnY=b:![FVI1pQ9fSII&!#LI-X%4tU^ugf??\i1^%(<21!9C2Bsg#N/BQ[2PERpdX'jeR-IkD"V9Hni;LR"aBsG%gY]nI1'/*!?%m>Zj!8jt>r1[n5YFf)')ge>K)@Ahj!>L(4C?7:eR=_)'Kh<XOiC;GUk7r7CADTZG,Tu6)=DmZ7VABE?#6hdC@*h7Lnq9EQNHnsJ]%-30uCB/iksE(R65;ANedcBVJ&=*L^1(VMc#9>Raq<rRGWpVl/?s1MV3b?lqHP51mOra<`qRHXh9:p7'_B]0ZAgd+G_6''N%_=0HB%n74RV'gWV%Wgrm[@W1LsYJHC)a'GLb?s">$j6ip%Gr88c03tBRqFBJU^g>ojQKpP2i=fe]nt+lH"!u>]<QTYL4LJ)YNT>91'tS=\%gF6$p>3kl/rI\OVi0hpY8.55__G_sH=q&!L?YAr,5<\9_&KTMhqi"=k&E`7d&>OIS$D"[QW+&Q_3P;'G*D:P0BT1O)$:81AI?9,.%QARes\\6'UZ,^$U$il$7cLGYE62E01oV=;O<pBb`Mj,aZRsYg7FG0meik[NuF4H?6ni1fHI>a[^d;k_;kV6n/rc!@Db+NW^lc@C%%HN>/N2kBJL#q9rU"87a$%8(_#!hi$>EPX&/e_:iHn\X]aSakH+&aL(#%Fuj%>$.-T4X8)b(hgtMrR#T;2C5]n#l"=/q%A>%e!h-?%)7#:b=VBat;*kcT]Uf@>KFXG8/9CCWkoqoTA.uMj<iCg`D]$?iC%k4@4ZR<1c!BOb5<FR+hIS$GF=Q]5f8Xtjouc1!_P(<&EM3X<%cg5%r0nA(,Du7Qt^P>JC2g--m)*a_b7WboOd[k+\Ff'4]kMbXL!t\)Ug/rIXq(E,hPm\u3LMmE].A1[Tp7!8r@/.0^`KSmM=2i>E%1,]X9UtL2k?d$h:]c2">adfT]_FG]-L82H"n`Zp<5Q?.]fNmd/P`FWSHSaO*g;l^7"I#1n-%1lUZJ0nND*35*)S`CY,&4q5bG9";%4m1i5T<Omc@(8-T5uaJ8#5u4G_XuMp-DJ5%8M'GnCGLC7.B^<7(]b[Q"n1QUJA,#^"uYnjhfP_WSbG9IZ+`HKqQ\X,kFDiks46%c%r[RG1@bX=&Yl(=R*'a>OZ`VC!>Tk`WB>pjq14,FC_7L`/?@:+R"mYRN<J\V,TMs,D-+JAChD&7r=6.6;"?qJ$XomgC,7\=hA4tgK%4)3O'X_1(dB8'9@biRM[A1)RLQQWnJo@Z[\NQm\`r6@6TQ3m03\VCCl&7\YM40S2UnUq'6B+4'=lon\rX#1:ddsTPio2EEuDDc-t%]udY-riJo?e]9jW(0ra9)sIj@_R%.DUGp(cIiqtVb-OHCeOjK0X%X%N'o?!kJ2ct^_kckkYW&XW3e&=33l;;&p*r8'j@'QWF=-c#%ha7Gu1Kj9`jnXSLKtf#-=CKkVUQ`hT/:@\h[td9PhLS5eQj7l^97KKn<NHqK?@g^skD)<Qb&i<sm.DiVb,f_8K+:'<*Y\1:j("`/%Dir/`hB?A*@+_8g69Z1"Qer"s4opU4q`-S58`aLX(@Sl6/f"N"N-jUanT$]r3s0cL>^L(:UR/*WZ.Vb=*cJK"<h[=oLI`32NT]Or%bChe=$N-L8>ruQ/E2nH0nZ`fY?bt6X3*IdCG#-tf*!=gZ.5(/Mpintk$qg9W'ar7OrbU@SHA%mLl4(Bfm0pUtE@E,%/c^1s_pX?Z%RG*uBFL3X?ji^52?YVaCR\FaMdcT5Q.]!jmY+3J.(-ufM>W'b\?-[%V)Pa.I]YR9dOGA/u"Hd<LkCo2W>A5e:S&I.IJ=.r(?+"7i%@V/d?Ys3WJ\uV:PQFLh;?uL.I\Nm'rrWp#kn-E5j%ASWr=02/H:TWqA*]uug-MWI(]MiJor:]Y^YHH]1ETcXlSX7qM#%'OMY2:2U%5<?H&0`9p=qhscA^2ER)e]E=#kMN],05o]oIfJi2nCsEos8DfA^%'3NdVelAdOd*\^NA:'o8i%MFn\,pDZ*W7k2,Lka-1k6n,43N%f"G9L?];DA_eK)-],u7bh%"eDNW,K\Hd-<ul[r->g?JSFmn9,:XddEcpSZ8#I]\C?CgX@dNHQYV#J8I&CNnel:YO(_5;2;O%).2L%Cc1tCLMu;bp7EVb:O`01eUMA\)V(Gq^XV[qo@J>uhmS$JGB6YF]%4O.Fje!E^UrrN&[C')"0XZXIsmI/#PSEUDsl3fViAUT(U$)a%hnNpoGrpN4]D_-K06eI%H.)KTi3s<rp=5e[#MfVle@3mkr_qS-rc6(>]^0`9S?;.=/(aJuHdRmU)Md;;>ISBP_,o7R5@"6eg:bMX%ceFH9aZ"EnHMHU\XhDEn>PtUQXgPobaD^e-)kCNps3L-mqnG;\ed#F:I_@nYp>;(fcL+b`,5t[4h0O;_3*YpTT74IT)t&-&FR@AK%>;q_?s5)ufac4Dk:`Jjdn?0I<l'W.XRL^c1!SNX>Hc_2]mG@1gDKK97]gm:LCgZY]#K`/ST#&`7>PB$HDL_JVFZkX0YV$Gm`F%Ir%)Pc2mh>XDNlDFUDb?nu9]>H4fd,"Jd06'Qi`@p3mLIe>Tos\#_D.1\]\i[(hl^*[$2`eF_C4C6jQSH3#`XdNn;5fDZjhCQ*#9j%p%m;Dg0r-%s+l[/'V\DI(Q#P3H=*rtW@FKaN6gUcf3^HK(Oj1MmCqc<HP++BuM1^M!DO6_q@"Zk0U)?bN6&b)sYH&A/=+i0m+lHRpK%C66p%L@Hqe++(D.bs/?gpMYHZB<0MWqEOZJc1<#qJ(K'r\+]0-Dd%MYT=mb&B79i]?V>kHq+Gt0qb-8:n)']R&i%uRf^uY^q-`H[%3rVkjm,q5eJ%*rSHGZnWX4QcgH0YX;&<?*n[9e43I]A/V+1CWta+r!YRu^m'9.Q5rrG`7(pW`AHohkG;/1HJj\*:&;ie>@FS?6#I%m[RNr2[<[FI2Ldn^[A^^*p7G=Ap!LmZg%M?SirU8S0m@A8m6>gKmu,^!b'D?Nr<,Jf4O8hnhf[?YC(J?[;d$JrMB2,^&:[32]c=M%HVa(b15IVE$o)qnf3U]6Ltcfcs5(bdqL,dIi/a\OH_2*2h>Qs/qqC)flAsYYrJ.B<IK-2!DKLqg-K-st%IVgQnXUKlf^X(Hc7ekZ%Spbls"p\cKYin5fhLE/fK3/"r)^S29mb`CH3fWNC^HMAZqXjdWs1QO[CU_/&Agh]c_.9q1kYM%09$?U':].8#556b&eZI]QYE!!<%5J;s@p#t,#LVGt$QQH&@jB)DSDXDgmJ,6a'<87BM@IltgcBU9uYlFB?EUDGSdD<MgSiu;E>Nq2%SZUYugt$ra3K@=q7mHe9YMu$)%@EhTRf&#.G^X<qF"rVMb0Rrc\lQ$OtGJ:4C*?9Q=p\V5e*JhJ6_rU(@2q?XV5OT)Q/PCc_kHF>;9>5`-f_P-,=&9dlI+@#UIJmA9%#<Zk4?XNckOJW%6GM%O"'tp%2<)t)*Ip:8Vf$iN,'"pME?%9;,#H7FX$eX)bs)[SqSN*9<CV/3e%3,9FO'S:0(YIhPoDA!kgMYnd%79A_PSBJ`-6gjs?dCl[Yi1XAo[<e,,cQrIts%Rb,Vk0AG^C6aHhd8BY_-c$0qn:U`nS\qf^6?BO0CJtDF3fSd#Bc,oq(pI*,7f6Q%je/:XrW0c>c(<9<qR!te@/SWAj#6Q,p*oq58!CPmB7,V]gp5>F:A-[>QD<U/&/Oj!M2-#]9u2Q]6KDMgH4-E5e"dTGT3(?j%$SM@%<qI/THBpsNo')M/ga:b5>A1r*YJ.E9IQ2b')`g.^(B/V[ZUr90J%MUX]`"To!iG-6?iQdor)PUp.4iu3V*2^_bU`k@`@Q]B`I0$J%+=c2Sh,QKNaMIiGIknbMkMVg;37(pS=r-:!Ak?Y?r0tu(5.1CsDct!qX4ZEu06Z\bjfEKkBCRP]M8f*68gl^$3Fh6_6m^]ok'Yrb%:7a79IR`1,L+$M@5>0IRFgpj<*"Q@JlXIrOD^hh=dgelY*.\ao[YiEP+2\Oq1F^Y(<ffL0"0'K6$^(AK?/fC^S319s5(A<riBcLV%fT:?HG,=j5HM>tbZ2R3+_J/L5@8DA;3rT]op`G(N]rX,n4l&?t*mDdqO(T.rmFb:m&)6h@n#`p=J*[)L0MA,jZ"9Dpr4$m]rHe>,%RsVX"-XU+orUfYB<FsqbZ-3Nt.[]mlm!d4q3<j<6J-s#&\Ro.P%a4V>phMS^Y.e*'9dR8tfkK&i\,U_EIR%m>f>p6s[aNPj2ed,9%h[c46J,<kl^SUq@=*m!`I9t[!4ud:_gUV=#q!"H"0AANgVrHskh"fqG4F$Pcce@DKr<_13@U0uh#Ql+r>%,C<>/j$PC[_)J>4UR+%:R_m8hu#ZVJ6MU$Y7GC*^\AE-AARX.f%^(ca1\aFIQMNieFnBm`cn@6pDoQH%VT.Hmsp$:an&kdh`(:ZSF#+r5C!D`g%r%kp3,Bo%hlGkacpCgTfs70BS3q:2ls[Z14`34YGk&Ams!,6tC]A)6!:8HY4J9gPhim,8GD+%SkOt%*Z+GWqo:^\uA['A==iB3bGei.t_=lDt%q#rteGCKibmIAef_eVIqDY3DS\LD;oUf5)GGmeFqD<Hp58/Q[_SpX&hLR/3P@dmc\H!Zle6=c3Wn^Uq-o6^X&q/-2(7;i,AXa^`+%ltu4g##(tBXo8._]34b)ccJA\j"90]mtZs9L]-b$X8e`1;OGL.qV'hVD!jO&G2M]#BfH!kh%oHEnl3<g<uMqaY2=,Hole`s9%q&Y%qTYAof'qaEIk*TQAbBtKs3H[+BsP5>Yl<[HHSCeYO+-m(XhB"L(.H[Fr<`6/m=HNS>FAWZ<J_Yfdk9R=UG=;c")bK=_"6?2]q>7_%h\hhbeQb)OrOs7mbR@Qp<E?8bZ()D'(&TH:T>(*^B4(])nDK9fm18MpJ+2/Gs7,1D(W3Y][i_b6o$]LPGiK<=Qcm/CnC%+khuE3.%c*js-gp\$R^O#.*:Z""Vrel-hR6?V-jekb$`:mSAs3M2U_tcC7pBTHKiA5*C`bOlpNUIbBIaMNb(9?>18,)!AQZ%?BY?QLa%pY_[%]Q<cCQVDo+oqdjhIt$qR&+BF6lgioin\R4<'s3$fi4UpBia'"J4oN4lfE]/THD3h\?Q)kNYP`LcR^i@\b0>_#p4[_)H$t0P,`C.M%Qf#@JjGVnK?N90=p\'10pP6X./gTc-8*;pWIbK<ll?'Rdpu(!nm?l7m]\ZEP[^#!X]kM7Zr6OPMM#$%G#Ihac?iSa,]BKU!pD;T+%LMqQ[s..&[ksg'lrU54u]A)=dB_e-0YAI&'V/&#>eU6)^]UqE6Ej5SoST>UmJ+ia]rJJ1X?U"DZE]"<[ju`>,Y6Vf_]`$YJ(YX8N%IeW5:n,Dr8oD,>.m_a\O.L5qG]npMg?98)`ICmHn#TfUtQTfn^DV.p<p#sPfBCig]NOA19[ShSIQ+rUmkJ-u][s.7gFShC4kJ'+6%2WYq5Fn]qRe7makn%SICr^^mEmdBr4E5qPBa%*Re2r6R)qsa2m&h!6#f>^mb`Ik5C5CIhUr;<bqf<3jspVEn3D@V0qG]<-J_7`dF%YIsPddjGs0$Q&hkjlhX"D`f<u<QjGVVuJH*>$ddB^&?X!/mc;9JR_g-m<8Kb1Dg$S=.W[piiBP<4TF/3b<9)"DpR.KCr@:-No#-;%G0IA#-D:;+c/HokIXV+XO2gqo3jqKVjeW?7I;j:Pr<$j.jPk4Wi@k)eUOTsWBstr,O'R8.YB,J3*gAUTqGXnPmGk]7dI1/Jr7SVR%pQ()V[U9$DOl&D'q=b]^H!%rOd->\RM`j'R?TpIHNt:K;o69WXrbM7j)s7]cEoZi1bBNP"(U"q9$CC06Y:N%gl`]1uSH&N1qc^35%LY:?LnkZoBo\I:Lcl@FZnZ1slrn?0IY<9DogO#PV\o@Z<oWA$WrpI\IT3_HJ#@0C7omW=drU&h+#9P%9ou3ctg\?#+iI?18-+c9o%0+ZBVo"ha)d1;"nWt8MPESi\.ebm_C="iDlpuRb_a8,YNrQ?MtrH<@$8l?ajh7NQ7:&"+#hg"hd9m69C=)Pd$j5ESOgO$A6J*kdi%%r]2Qg=J6s2h/@.e*i?YA:r[.cOV+)\UE`/R8^$0J,3dRpVlIM?[M%UB)1BFhX%XbV5i;0RPWpro7qhJ+<S:;Gkp?[-6cdkpcIMG%#B*n?]$8TK>Q2-Wjncs,I.^,MJ%g#@K=j&=j!.e3[nr@H3;;T?f=Q;$?8=+sK0M!$qu4KOmB4,%kO@1]R^d_/O4PJ'EbYINj_m>/%mt^H+k8J%Lo1lZ5B)`+Mo#JeCRJLpb_=l[G$P0`V5Jbob_k#4+VBXeDCD5mKo$V0+Dg_T(j,7!R%sKoRIIHH6G7O$\QaaCe$gZI`%j78iBn]T()SI%OUq:B>%;S2\?)=Eud4o#!6?MW[]_<nSDSM&NCrqkNhMtd7!=m")/p5?%:Y.X@u?%2[+K<&)2IG72upuU,j%^1P4%B+E6pr9ECPT\l=qc@>f[r8-DOpFkXW&#Y&@Dr!Xk_gh*(nV5<5O'f^rpCFEUr:4FZQ7!3i]5Kk.iqpV$_rI5pk'u5OI-L!%_,T'*%Gc*qk3U(0<L*%t9B%,EhDn'gJ?_;g_^8hX>:O:p`,eS2Ck2YK[jjtS<HfabTMbh)O4T04Uk47oq?S8-I2obMA<\_\p[0g%,iE_tg%Ic^,hqsR#khEA@J`\YBH6a(ooZ1nQNkXsPlA$>fMEBJ=,Rk&+mh>S!U&tY\riR(jgZiYDic[GhS?hsQPV>/'Dld'Ak]`-"n<9C4t%+8l!2fraE/T2)DpIFIujj2UQ-pOC?o^fn^0>@2mT_hY-Sr,K"?o#Hs=_iLuArb/?^iDk^YnkgSYk6mn'm!o$#]:3+'IX^V!iRp0H%asI=PVbNGdE*po1GOCclIoR:iroBR98@Kq%&)uP0DnWe5n2ku5HYl![F78VBeITiHOgS9*r8ACiE<"qL[iaIJD)(1>J%9\!o()ZI%;S)AF_nXp)>jiJWjkKFqXneM@5QBa&f2',;],/W^pVFnj^HJl<ldE'2n:!S!q:!gST-]$6cbK@Bc.Jq<Y.aDmj_cim;BEK!FQN4K%O3[]jkH;Snm>k=drVZ3/Q]BsND0&"P4gpJ:55=J+>Nt$'If$#]gRPmHO`I/N]4m2udFl9.jSnq\FsDonrr2ZXh]9H)jPeofj-*-5%l'S?]dE2(&nX7?Ukl-kEQ[\u5M[Kb3htcj5_'`m@*9%2$f_n8Un)$0lBQWA+CEL=@^AQ(dPK%g#f5&]q@&k.ApFCI?GAgdbo'B)_%+chZ$Q5tJGjRMa0^H[,?WUis,@KO^"p%+gSFSj2=cTfBYp/pV*oGcPeo\SCs)tqT<pN\_]r:+^;*54LUE::2iYN3`*+2<#EoD\aD%-bf0+:N-2@X7>E?I/^$&^W%Afk0rXZhY8mp5VV'+355CgK+bo3qY%ni_afc=%@BETnZD744F6&"QOg6Jo&F'^GMiA`j`SBboD^r,%'n,PEZ&^!`cKB+qrn?tXc+CrZX,fG*]_V?CF,(Q<^O,q==8*g7[G?S7<EK'"oAtIAA%mE`ae/(QpC;Y?o#l1gr:!p>s0&b1lF&]8%Wjbo>8"G>kmT&`AVJU_Ng7,!8^NX+8q*9`;H@'r:qTa_;5CE7k:Zkd%Up!t7FnU_dpWnQZ++AFo]0?hoIJNZdCAQ[;m#Oqk"bH3T%/jr8Nmc2LdY>Dqk[d`r5(YGjJbIRS<&+7,ZmTUODR>ZROroMPm)Z>_$jn8S=?7Z&uq30]bak+jeIj89Fl.i+6Vr.LHcTAVe\)7#V%dFIR&-pRVto#"CCj-4uTnuqZS$a]WM_<p^ZIV$R_rJs.TIe2pVDL#6c^G@M3n4f55]Lf?bfVWDp)!gba\%sHS`cD$IMdJWWp@J=!%FntUPA!?b*(VQ<Qq;T]SG!<Zdl_HPn3<-P,=7Y6UIe8359HP*i^\ZQcG5:<*(]M)Fjei>Jrk<mHWJ?hd5Q(Ih7D?u)DB'WKn))LF%In&2glE?Pg]_H6U1d:alch$gbGFjEPkW'X_Y?s;9o!0]fQQAAr8'X9MRNVN_\?qXsqYA[JhZCLebr5C`O.Z8TDs-9YH^F_\rSiHf%pU6sbhTj*dJ%BsfnDO#"poF\0`La_iqnbEr5C[LTcs,BJI.G_!iIp(cV$Xf,*kqX4l,/QG>X&2_b1&nq28cWAj8<Q)]^qUAX#Io<%4DeA!I(LA)^6FfU;chbtiD93N]RG+a>.AWuAbkVdop"*s4h,obk5%_`k&5a]rk3+]0"u-_GB!775;2KdDtcI%(Xq8cHn7WI](!X[%Sf_;3`f.BV@LIK=?HO(Ep9u9;n)jH@VcSqMoj%IhntgO?Dk6lSq>A6*D[cAXT)80I:Oi.T3cu@/ifio[pu&d%b<MSHbPLhl3?.h@%:MdZCo&f0jV178"PacStq=MpPjit,uI_RlBq!a->a)CnAs*;@L;FLYtp-':_psIrLd``$+]n3@,5t>n["+T\%X?kSV<nnuiPID-4%gS\'TkVg9+;t55GDuJ@p9t[eOcF"GA4..)g1qE:)J!6X7OZ6YiBiAkV/pe`oH`@gm2aP-#qp_%O^[L%P`&m-7h)bCblt]uGYPib3%R8oDA$Mhre#CGY.rom.LkM`;OCCe/,3e,WT;_)-Po%JOTXRusnYPd;uoA3T4nu<bsf=@=/dA66TV*+FO4aHG5He0[m&GFDVK"A_(%6pdlcYt&6eWQ_AMF=o+NB?ku&mogDL;'A$^[!3qI9>@!sor*jt/sU!tRHJ+/8]iMDmJ.jq\2W0d:GM7W0J7_0*S8p*[-X>f`c8@-%nK2)DItkY59FI\OingN,p;p^7$o=/6k'q]$D[PP(3%jpYEIZ6q.Yb6IUR;&F[595q^9)<::If8GNAa)2c)d!#]WT5'gI)!Xj.$GQ%dlbi#s0lb#s#&I"T9`;Uj%jSrg]%Aaq97rY+1M/GfC(ltqq1qU#%PLsDK6@ofo2EdQT(DI<]0Q%+TKX`p8e<=\X!PO;X8]/LJ!dI%]sQaEWku"7WGQuD7&(3;g9Y^2;]W@)6a3_H`Qj<WZ=QUS@BkNX6aHYhD#[0Jb0d2&UaTOd2c!.(ormMcV3OrnAZp7)(o[Kqn+DFp%<;+KL_tpo=3BG\PeS2GCXdPB*3]crt<3gp5Qc8Z<bkoRCcSj:<(=N1U)6#GeqkK^8]eh!lB[;#S0.OuP;N=LdT7iFe:R/G.+-2nW%3i.8NhWqO:\*_\H/PQq,S&W_I)TCS!^$8DdT(eOo`lG$u_%,RiN89IOdi.k5PUO("mZ#+n%)[>K3)W#e[a5k-*qN3/MTpFf2RdkD%f;BfMcYO?IQ<&lmc<fh4.I<rfd<KG?)Y^RXUWqs?`STpOl;.)5pQhBlSJI[g-GE!tX?<c5NATdG^C"ctL)e_50oYge]Pj9N?4"&!%l$#]LBeo[s2W;F)2sbPaD2UZsrFOaA-/6T8%l=>D;`iAtCX6cH4%!G([Q!P9qA^:*I!2`S\$U->K[J*-Co8W7]eTdAHnLp_)on]+%Y*>\[@@?lW/8ZFXP]L,r9g^G-Ia29c1co)R)JHcA'IScJ`m**R`EqkYl;.)%pP*i\kD.Z59Zk3N@1.OsP*ir)-VO=fC%gm]0Y`j7%lNE\tCO?W@k*`M>,n=I$V%_RL?oF!$m?_9[>]1o)43l%GU&#]4;>X6?C]A/`3s/rVp@",-"FDYYRDZV!VYq3%fZVk9OR6B!`nKPh%pP`D%a>'6)AE&TNc:Y;Y*PsM6D6/Ee*IFWFAkoW`HYp[afbjM\Pt!_oeU,`:Bmji8m#5ShP]8TF8,&$&UiCmi/"nVmc16<7AY%dT%=I4&VVCkecAL5hZX\0Ou\3C]A:O4P7A5%'dl^&Mu?-H(/rGA\'N/<*(B2?@>TTj8.0-bhPP>$R<lKk[Dk0+QK%>8+5S\8CYZ4`0m%fp-!9EEl(HU7cJhNV),q48)Dse\flU8Y!Th1]I"0<:<BVHgc9/IqL;@d%nuA)Ac.9Z-AIMi(C<#)O"\:%%2Gtm*?ogQ&CUUYn:do%EP:,Kmj,?u^_s,2XM=(FI#!Vj\*[R9BWj@(G=sKVn'p5bVg;DoV0B=)YqmB>(e:iR]4YA.C;22*CY*O4rA.6Xq,3XTBBiaAaU@sI%PbV.hDGsHd5%Pr91sVSV<m"BQQ4:r^'F.sF%<5fG^=#6t.J@*6eG</3F_g-XTGV:G1GjuE:,WF<Y:D'g#Lf$^8Ej%l_`[hY1(h`p%QZ4;gK-0GFCad+`YmdK2[mi9/qB9211asQ[k0;P][9K<*?YT_uiN5';RGQcRaNflhGFGt:MpuVd'.Od-c\?'30]BrlQAbm1Zo[op%Z,IuNH<D]JDbdu`\Fli?`OiOSPu>B;H]8e7p7#^OCG"59>DuKu^=Oe,?LLmDWqX08Znjo%.uDuC`jfJ7;*</Qb:Ci//>c1qc!kJ,%]>8Z)RV^`GTXc-\4-?(Ca!eQq[6?E#.Mf[2W)MF5m'TTpYo;4Lekd<CaK<W&f<9<(G>.DQqGcp-DeNd*@SY>$O>4uV-E.]H;^Y_C%)9lX!%s$jf%P3gK\SSQu5Zhe)j"uArpmj7r,t^)ghTAHh?a?":aa!MEFiiK41jL40C&LpSQiPfcdn%0eXd,G3M*m]<5HsrW\-eE+%MoQd"Yt8+SY-!<uCsFF-@9_(]fsDCYC)e\e]i'fo$k)3kf#UI^+-MHH,WfN$:hp40YY8X,:*\D.gA95g]sk,+SIoR!kP_*A1`/_`%]BHP7,^'6PU'WqraD;!CRh<9$eC"Y,RZL85l_K4AX5ho)qq\trQXce$Qecs$'*A*9MI;u_)n0sdOk0N`<d"ZmR:2clY]$$kY\?2<%epLe_CD8khVAG*"9@a@NV1=?*;W+P-3+sq6VeitCN.,VWV::RZCRo!Kar+<"-lJACL:m=eUDPq-I;5S7ldjA1"*8'jK&^67Ro!j8%Oep.#2!ubrOo7_#LM6kGg7<LIJp#d*?%rs`B2$HP(;qtHA,TOp_`Nii&l+VLdp"Pm1VlN2:GiKl]Ci'deN;Pjg)61jn\cDAXr6O8%2bi)!*&4]T'"[WJ$<j<TB+`$p'\f85fR)/ISJI3=-5NL:A/rsnSFpZ)CD78gh'mEjS#:'U/i1M2hGC+d51aM^;n]$anX\&^k%>V/%T%eQ=PF3FRj$)7@KmR*_T5gfLA=Y4W*GQKe)\'4dUSP.i0qM:/;)XY6Z`@a\d+2A^`o36"VJlE8UEKJE6:th\Pc;6*OK)J'l@dF6%3j&.U2q5G;o[$pkPXXo:oV&6V'jM$.I7i(G9#GPT(iutd1SKmuZl=lW!S=SWRVdi%mbkdd-0(WNk%(ZFXqC$.Kd-1l5Pd`?hD[T;%feh2-S'S4Deu@M(n+bA,HU4tRlqeB:MKRW>_"*^J?Oqc@\T-rCLDri-a%C-B?!D&"Z@6__\%p7L's'W1r7&+EERRa^Cd,>V>,POk%^#(oHHVp7afI'BC8u@:QUUXLW,r4SI(6S+XiYIc?9&<D2)I0TCb_A#T6(k[iF#LbEf0@jmp6tNc'Sj&@a@$G`E8EFY;V'0:>45F/%WH\:)dClL'AdX\:C..k+'5S+&M<q^BAnm:p&1JI&/ML7!UEj=e94A_W;KT68D^a:Yb%$!"e^&@FQG:gYeFfe-Ss?g"W"]$J.V8!D%CLuo*cHonI9n:f)C4r^_2*B-p$IEfeMHadM+r"j5FqKEWV%"a(0P22E<`6##F`3)Z]:`s5cSZ'(/*?`7GmG)-B^3^ncq<P0l_NC6%ekY],cIcIUokA`lLrg8M_DE^tT6:g3P#kgB+Z8Ft4eCf'2AB*/MiCe5Le:==eck)GD$]OcY!"j=m;ni89k_\2M*[W/9R0theu%"p%,Ab-GBt[<ETs`c>UO,;U`[W)f9@H@%0NlY2VHDuGA<NVR+lcb$/@kaAfmUUX9%ab*`@h-4fr-fkA6Y<`6!n?@h4trfmM(ir!_RiY%U(c+]1fEd5CS^]HB/D9#pKMtM:iY_(5\$F`pqTQB%06a*d&qAPQqLTh-@Zcm"27Z);`5Y@$%$GD#bPT^25u),;4R;l]^4r_-A2oL%XZ%hSb5/Z6f(ub^e@N=T\/-u;UR`<K8o.X&RH8F*,\%CL'R]64CmVY/9TS8K)HgYc.T_K6jpTI"r,DT`4!M#LV;>+J[*S8KUZJ1e%lJ@][Kis.frk1e;inf"3T5#D8%6Zj6=o;!V)W\9T56cDo<Z2<cj@VB,3X3*halQHQ@Ud^.JS>gcODtB_,b(]*7MQU$%<Y#9)K/X(%B\d\nC26;r5`"kNCD;,tGH!gW]A6]F)4^RH9l6J[)t^[6O#J=oULd3[ITR'G_CVJ-Zs=2R6birLFYGA;`5T>r=(mSpK_ciuW[-Vt%;@6VQ;D[J.47tPFepGgdBK`I,ljQ?.[+etpN#45q]1m:AV:d^N'=T=LVI5<\E9rt!@SAt.!d^9:NCgbJ1\4^/7r+q7g8Bs+D.pns%hR)XOmF^-IH/="O;:l2W8,]E0+K_K2TkV<nRP><?TuH3hGXKBTM+KVMK5i+"P2(5dC(CgDknNPRj#]mdS#=u7X=\Qeq]6-qBZ4M>%K%/CUK)O#RAA%cP:1:SGYL]Utc[/;Hj-/0@Nk-h]FL/dnKUb0%lshO21t-C!;iq8o"PKYrV-oP0&d)2Rr7=>n^"sBbqH.^R[-r,E%fFiO,pAb++k([JinWl4Io=[ob]kT.$4l7.75I:0,s#WD/BB-;UAo(rmH0Ig:"]35haTeO?a-'7g,lL1\TQqN#;+\Q:_L`)r[1WQl%NOmn/eL<1fj3cnmIEJ_2CmXFaV+0-eY1%]h>"cQ\:QOjr9po9@ET1r+$knN21S]dn1!+TEBm`+uoja6OQsD-s?omOd)]BY8CeAWf%R&:AZlh;=Z89]'DVfD=XKH2bb9hR!JrEcDp?M0V1cZdD'U1S:8-8"DBjHbW)pW\?m!q<@TN:!$p'nY"DY-AE>F@qpCfGY5!#(>hI%`A#udm*b-*lP+\!<f?8><35NY[A?XOHuGjh?F?)Fa.FF.Mjh&4K7SZ*ks<VRj&:6>XYbctQ5>i-8T:Un[$:]U&i[.RmOPE,RUX<K%D(41%P`X,dpDO4UQlEt&%h3\:NQ\2mQ*PkAds@oq6bVA=UO-F]/TWQlpEsN9@G;7D>2mtH1fN,0d?.@:l?59]0b,s0j]Q:?i>.`k%[tL9/KkC9iUOX>kVj7d+6DQum=W?Xjc0&,2lVqYupNpOp05SCkKJR61f%M;FYU7Df4KUGfSg,)l?oPWK-<<_\s%5*(/Q$J(alKn`%,i$*+H]<Veb+?I>]fsE\_lp_]e1$mUXgHZ[hGWh<cM1`$8O]2&"cN`$rM7S#dqMqe!4+TC3Lo,a@WGf]MrRMMbq?F*\TVh(`^d8B%Ia*B&oj7>j#ZH3sS(pK4\$_2jfmKdJH@L6&^!AbbHXXBt2#a7s)ojFV[+c;m%R?[^1Tf>R]DSq]"J@=m%RUDUCe,#\fGa$;WIJg'%V*K?!aBkJoFu@=12_D.rrjbL%qpZNfqn4es(H$,BE(I8Z(`0Va-_Z:r[KQt<;O.;:1(&EI'CNY*OC:W$@j`/;:0=lL/"P&$,e-,d%J^p0"naTY;E?u<jrhW(D3n8T+8F$h%.m%5REkpOq4H>VL=<-5*dK\IimX`d6Ri"1[-;U%#j"b^$*1_t[Y80=NT#i+a@U*,?$2%60%eS(UWj<\R."I>M_K)W#MEUT(Zf`"k=FDkl+BGthXn-p7W=>bhVd_r%.]/S>WJDPiH6$`R"g'I,GaMG6^rX9Ds54RK%,IB,o;C0R.%GZ.gTN4@O;QQ!\HC;&lX[/S>id*%8#BqSDqDj^f_RJqH-7.ah_(RR%RSS3raZnq9OHmMP'9K)cRfq4tKM5/cCBnZ='hJ![m#?F^V%YiZ&ejSk]>!3bNjl&YJnf/B3=NCIT&Q%juUD`ef>l1'L?]6jT!('d+KL_;UqZ6k?9dV7jtC_U+tg#Som2G]b),b:pDZr5WP*6p)R%S81k,I]+iT])gLLhs1u"6L@dNoq(oDG/kuKKZP]"2@`R$0!BF2<o+F.IgU'H+*"4#M@o4g`un1bGRR<f#JATZM(>U^>A8ca--)X7%1]oc!%Vr2&T>f'A)So`p^$3kMrq9Ba*g=eXG-V;`Wh=GfiL#.0/]m"9Jr:W_T_KY5U3iCWlb'G[M;)&pc=r^elnVUQc5=TNEl`m4%\b6'"4eVkq_4surV4@:X#^Y5.*'8Rq&-V'u95g58G&5P&$!0SIbm?ICI$H7)G4Reh/]NYNB1g13pNFRKcPP.4i$.@Kq.-6c%#qZQ%8ZU&:)J?[#P;#tg]5T0dra]BTVeg*^(f<,K[u<t"3@I@*$o8Ahm)E_DBb7-kfrDBB5rfOAO;VKTHcCQ1$^ITpL"RK2%]%#+0J-I6%h/u8HRd`"*%O^3m\28sQM]5d&*!a5/U"I=[^RlS'$_"NON](pmWVO^]$a$Mg"0h.6f,]HrS>*6hC]n9*j3WLa+5'CDVT1^^IZu:s%VUWmjdUfBEBq&nQJ5%qQ><l]-l%iIY&G!?a$36ZCchN:Ne"ch&f"#>G\%WJo]h6_?iMX2&_7:a#$jdmPamm$BBsJa&Z.-e*58NK7%87NR,NRtV^m.+:I2905W(_u!KK$+;DaJ3hXJ4I>>^onsBZlPf.%0Xn*N!B6ZF(foB5D.!?EiCpQAfJbX9SoAT(B$M.=>#W8'KR#1%E@N$>!N[`fcdV+QFi$gafjp%cM=p:smmTrUiJ+5Y>_*"u\,gOog4O8n\d"$Z2?:6:m`"lq7TWt!`4K.Lki"p'PN$]:0FP-*0N_U7%@k#\f"4uc]1Wb;7'm)Ho0GN9G'94qWK&E,HZ7Es3$F",rMNu/c&O9";`8(j?0:(U"A[s".`qQ2SN_l7>po<H/]ruVS"[l*fd'CQ=%A0tq/$aD"jjp6XF]/`STfq/V\.#)*GI5&;W:I.e[P&,/ANW^ta)1Y5QE7d7a=[kP&;L4b,N/V?W@R#Z%VQ!(PjJn*qb0XJ30il5&%J\;iEmEXp%d'QLu_dElS+a>EAgAk*_ll3dN^V!cI#*Z]Z@S8h9o1c_Y(WQe-NuQ$u-VGi7]4q>Pi4KIi'Q(JhT<$um5r6`&WOG$H%&M%h#i(dP*.3Uq['P0As'AH\[d"$W$XYMg/!ETfQ.4iV0J`>2ApLK2r[l_/;2/O]3jhZ+"_maF/J]2SpabMN/#*]Z^=Pf%r'Bm+P%JEe-1h-_F%X:)WKKX(Z(=EHmrNj,q#fs8e?d:UHd3D>@u9DjkOrWi?5!+f`[+[g2L-]E4]';TnKE^o"Gd@J03a'rf"1tOP0Z7aq%%]An3gqb/-G9Sd0u[EYH'9o)5CI8`HC1WG?8:#V0l"#Ir&`JVp:mP+\s"R;^(YV2`AbroJUYSL"?.]>C$KCpHf%J]6`V%uf/JdWkO%Z7TXM%&c^om#g);-\XjYl9/\SW/%QOfltliLgCc?)i3&Ode=IdF*pSVWiY\\d%C^Z0$PnDSE\t8PrBcm?-E?PiR8f?WgHl`+MoO'%<Y.5`88j\\-YXumccM;C5^=5QMf:dD,R0?bY^+@(JH?/M$$A]m,BfR0IG#srfl]TN*%%(-0=#36\-[@KpS.AJgeB,;fd:(9]Wj%!%*]A`8$WI-0.?QO<K_lI7gb14jc/eRYP!qDl@X[ei&tK=<'rW;QF;\<e%j8^n$)O.Nj*#c\G2M`k-kun)ll/jn`6to#_':s2R%n"B%^+3/jiB/%Y685]*Ps2Z5WY[Ns[Sd0MZ7[#;_kmh&h4Vh_O8s7G!:(KWUb:VU14a;BI_XnAS"]WZX&6b;F-FjfW#+A5-N8&2(ZMU*%SSS=KN+WsgL]E/m9o'B:!o%5oa9C?Z.1NG6#M7l]'Ei;aP#_;:(jhH)M-!RJs4srnTLo%Cfo9fH:cu::q`Zmer\8C!knM4B&3ZT$%\G)u#,Z/lA4$>I=[7d*CjiX3>P^qlN\S%dM#sH$j,UEi_=R?&G)-JTJ\ps_\K6WCr/H+9%d.s,Q`RD#tX=O<"J]+\R8]mcT&gg<*%6A">DWdbW9B*O"Jk.GN1oj3C=)eW'_KmAgS?aX@Y-m_s^h6[N>.AJ#M@+saXnf%hG84Z!$P5i<bXHeQOXKWT<`X#ch/(YF]6;GN#%1>6oP3uP;m-0;?rJp(?KTqL>5FD_G0Y?`[<-+GH-)$c8AAL+de1KXZ.UY?*:]2<l/R0\SM4'[o%ek,9YHcm,hfe7?Wbu&pE<[bJr%ASb&#GT.:NHGi?`bic:2kV`6h&1l!-i"(gY#&AkEg0F`"YPa#iS7.e8[QN0`@H0JTs."LX$A$hFN+4OpUPX<p@j!59!'C:L7boZ*%r+&L,,_-uE-*pH"@T=07dn&(Y65Ao6#dX(i0jZnX.1=-2Z0a+p:D<1CacHg_E+(XZGR-'ZKI.Bi9=KjF=;AW'f@oql_F,+'bX(#\%L'Al+Bb=#Y2PP^\N6o.l&th'CPKVF.+jHc5(\C:=@0o1_Lu/Ma(5j,r@:>';o?IES<=2qD+2UX\As<Y`-d$*hn$/i:@%,d(P"^hq%b3Ur5F3Yhu[&E;]Op79HO%u7AEKee[J5++.8ZH=j"9?Xd/$@L(=^"b:?nt#"-1X^6j8a6Z'SPA;*Bg<[K0p#\8_4Lr4Cr+iF]IKF%-bV(1e8>cKNkna,M!WSeeUK9""%MRt%a9G5d4():d+RZjqp3oefBh"WrJ/Q_a2*c:!b]>^O]keMish!MQRA,2Q_D[IKZ"@d$2L0@%-;hU1:($&idc!d]75D6V<^Aod9WW+(6IkY[]*'C&g,4`JJg5*?$o]a2ob/V1;P9`&<Z3^%^]7/n4NtLdkXPtRI&]kU&m/$l"9cE_%'hi)Cl!\aEG#0N=DG<hBSt[dSqtk`*"t,u^]HT36MW0YiBPR$2:@%)K]!/\!G*2p12$M5=M^X3u2PB(?K>/3Cl3'iD"eXqn\PS_L%N/t5`JV)oFf(YE`$JJJB+<XI_bR="F&n.^5k*(>1ja%'C0"T'fL1JlGm'`DUR^P`oYdqK]VnqInN^2+>$6G+l`lZKq8(s(<?9((J%G-fl28eQ)pdW>CMa8Q=G0doekmOH8/YVe*U@$8/L$/Y7hD.lkQ(J\j<9NMMW>8l/R-)VE_^eL.k:(2)!n\4k^rF^53"!.(FADpU7%4Y'ni:JdsQRhT:M!o*>6fl,A8]Dmh6T8-,Lp=67CR<^o7!>\o"Om%VG?80q_0`&A=YVusaaYs==3DpJ=BK.ibGoF2Ik_qEt&acIj%mEZYM']"L1QE&&d$(]'G+2MiXJkJ$MilC7iMhiH/-;t5H0U1dqR)3)1(F?ceeSB@<#i]:H:l]?-\/(FD]qoPP`]Jk=?Ium/H6P7(%d&p7'CmQG[n1o;`N@_(H=V<Y(>KtZ6fBI+[FS"OO)5Ctr6GLkT>Ea>"Z$A$K5uYAC9O4+Z<3/6e6P;mlH#d1j(t'8USGEt<8(__S%W4B2%DU,`][sHl3f2<Y*2ihdXV;5GK4Sp^?E1'JB=tX4o-Q7S;n%?VF*C_hnH_0DBP(rp$cf'T,VO(r8=ka7ODs,C)@WKus];8pY%N@1kV2FbCH<a$??]X48PE)*!RBer=V&,3iad=;!sl$;r0E7bLETa]i[ZcpgN=IV(JZtg;&A1C1'0^0"Om,4bV::pObp7=q$i'tTa%%@0",DPiZbaU)[gCSD,Le7lKs\A;XR#Q4cO\L[(nD*VltMoW.ogSf9K/@+P4rf.CO<_IH)FEatiC$#71CCr6P&k=@blq64PW+LZO%P6H&KirZG^AQ_?[Qm?Rm?^eKr?#Em%MG3<3&?lkhC0BoPM&[?$k]@/Pip6p9`.A`eksY:tMp3+I`oTD.-YUoga1,rWK-Er+"-Smk%K!Idi"&@:?9ePGY9[#3>G5s2h7&0OQhpe@bIQklI-s^I`E"bDW=h@_Wd^$N-)SqF0L\)*B59q\",8<0GEVkSU(gRsb":tR9!/qIl%5ZAD&#]8$_8joiK'MnKPq/*aOG;e],D/DPfBfpCNYdYG(H?$boip2,l/p,L,Q<XgTY,fDu5ilfq@#]-<D%A!R;9W2kBU`npIn&&$%"C[aE`fS2cRIPC2f].4P;IN,J1_<6oSTb#Nn%Lc!Kq,uBHEJ9!es\+#88_bu[*#WVj)25dUcu,;FC_M<Q8st%YaC/ASWVnMi-'hY%Desu5K2.lV4A42V9#4<d?JLgS\.)E/ETKp<\7OdO<8;j(=Wda05"ZRk)jYH?8.QHuOA`[>rlr[nJ6c6+ZGS!-RQ'C1__"Km67FZ$%c0WJ_W"#,].A=p&KBM=4M.$0/?h#-?G(PLFATAJHV5h`p19F?3maS,-EQ0"W+Okqi`n+Tb[b_C`EJJfg$<+beX%`\B,Jc]Jb%.DL%f`F&gPdmDX,KDYH@*3$HU<cDK,Rr!<CKaA$;8jt`0FMhFj]Isd^-5#\lros#jHD?rEM_4ONO5<G>L&DKA#SS<.JKI>)4s^*[RJ3I%`*=)>,MS;p1/&At`?R-XG14\'1?/#foC@@(qXF8ZPGa*Q"XI2&o46U(OtTc0Z^@YI/U\o3X"8D/99RR^HdL\3;.sIV!Gs/u)Ef%l%G+up<a?-mlIF;fHEfq2#H!.'(-,WF%M4ARk@W1u[&FD1Jj\=eURN%k-6Vp^sUrN5kJWF&2_c*r'QqR/,P4GPh@)<kTU7hsJ%F(/D%4Tupp>Y!(<G)A2Nlf=b`SuGf=i_nRNgF&N0A_^*A'd_G_3m$)u4+T0#5nSi=l9;?U.&@@>]dP_B*B>'RXpRDZOd.e)]p+^!6<uCs%I7.C4ZJ@6$MjR$(/M:<Nh^0%QDQ9n^/Bodf^pu3n!b&/m^aPTr<a/<b&g[##7_;^]@+Yr%Uo!sDb1KrR()n!$_fR^`oa3=NU2;PZ%9?ansS&2@b<Ui+X1n4(=ghSo9nO*"TqE>H\lrLggIdm_MYT8eP'G@JN,[1kI@<%@o$/4`$6PT0s.bus,9rDNWAo*MB63%ju'/WT^%N;:Ek-K(YXo19j(_E,5`TQp;.H2ea,HnL,R),)uUDO0f-fsI;MeCrU+dhB+1e_b3cQ^[q^9B4j%G4_5Ur"Q/2Ii?L9[]S>77^&6\%PMuAui!2\d6%9-[O%5Ur]N';R(@k54s,;/ogB7TQ6hsd7h1Im=g[Aagd2@WW?b6aYEH/6n6^p6/@f'nR>^B$nY*RWnNT`NB]m'AG%!gQ7gO>!2]>eBZR,ls,o#_=KVAJSZla[HIbnkp&XOW:Zb1bWPXA?Z&_0'kt0G\4Gs=7j.eet>m?:MXA82qg,ZGEG$'Dj^+]>SAkE%9][]ABHCa@RGGZ;CkTBsYF_EK-#T<L-_>_e(TrG"iXW10Q6m+d4XdKl[$'OU)'"RTgaLTuV3"-Y3p=%0H(%0Qa$Gh,+,[qJTp1q1%p,tu$+<K;E??MV`kgSbQ$fgFbARVd*O/18r@$rbn(/LS'7>qP1XM[jA60/#O!Yh[do[o+qptZBjY4Cn1)8/t/"<<r>qMf[#b1sF_%W8Lp+fAoO:Y2oeg@V\&"5'6M,gc.8)Qs/E_,X@k??%UR\gW,>`0jIO3IG7MD4'VKjD@'8Ei,3s)*D?5G_m8*,>^GreD9%1-J.,p8%BLDjMN)2kIno0QG>nAP+mJ\n*qg8b7i1ZLlc2pYc[1*X:&@pp7n"f0-%;g&T_ff#%(,;@".B3MBJ@;5AX)DE>"#Eu4]Y8am)?!e,%fI5Mr'r'5AY*pu?.G+aL9g2l'1>cg?G@,c9(2dt['(+H&09/%%drro0`H,[oHbIYr2WU(-C]K*RBGN,FqT+ZRfG`ZTMnH_L\aBq`%;?$+qAa8uMPm5qf\a<P?*WN\^q4NF<+diNlF<paq)ehX;GWWK.UdEs?j=P?@UJ[%^Qul2Oh2rS-'$dlO\s'Bb,4Utbg^MYG=PP25%U)js<3rr+We]Lqa+>7\*_0=GrTE)nN<rh3&;>0r`)8.O1(9Fm>7_E2=!u;T)L;kFIPdZ&%6a-4^jHa\I0Kk1=@hGf:D-(6?-;i*Y%9mn:\A.0F*rFbJak7X`SWFA.Pq[@osPMk.-1jor/P(Ho)ZRXLq+AM:tA*p[8G]Rtse-T=/ZaT0\<qQ%kg>EbGc+7Nd%)DlGbpHC:%NV/5<Y7[@pURffH&0^,L,Fu!prL_.1!@_"I^Z(VI"#6@b0n&ikXbX[jG4b"/J5#:HruK4'p5-rMJ7?ZEi0Fcm,o)WCllTV5YYpOT%<'hX<4(;a*-.+rN*J5Anrrp8r'_8T.L.JHT+.l0`kCcOGeIRNEs-$1_'ZlVNJeQ'E'`T^[\'QTRHL@[6PJO:Co.+rRjr'5dC"!A]%%:Qb,.j3Y3>)OANcl[4t$$*NY`C:8-g":-0JTqoWb#,XDQP"J)Pd**Z9QW?6?r=2L6o=s?&/Q?FjnVRbnNueLKj^!f7Y!e?U4P4`%3)IQp7^6Ohn\AAJX8n>[A-q1[!2q,SYE1naYs8pI2,h?p!2qJb.Xk,8<T%/Bhi`BtBXfhS:O[WRaY5`.$]@(:S+<b'a3Zp$>s/_r%m#``ZoHfI&GSZ$2$3FAc:b/l0LL<cm't4I]4k82I\L+%,nO\ilWOcL,!iiPb*TX#tM+^R4_Bs9#*jBKW9f(q#&qd!)#sErdJsq'"%[lECM@BT5m;a]Z*VCY@M;YhW&*(#l(^.-7)71M]TknO-Ik2N[=3[rQ:AVqRkS7DZI<]obF;+$4#+t]r!oCQ'.!=1AS[WtCF3k8W:%"]p@2'YG6qgdb=g'>\i$L`1,5CeJ@Lf<]rc$Bm7A=]h;bRO*-R<7fUm4cY^WDZ)$5X[c1D<`bn-BeK)dVOB=l+BBg8I7lF`$aq6u%XVC=;H3k7K4=r)gV%e/+<Qdk,6'5[K"=7Q647QX#BR60^P"cNuR&9(%e^@S<?7b@Ag2:dGGmXNW;Vrr:J6Xm&-&fNM`:Z;DL_?\J%r4K?;]U?E8c3of@9dEJuH&^DB:UWDu;;B;JiJO'eMPXobN$Q1c&!iql!bP$c6X;g3ALImf*L/\0].%qX\)3u(/_19JT"HY4?5C;o%V[oS*<X%=fcF3cp.rbV(V5OTi&dF<ZXO4LJhUA4``)J[?Q@"mdJN^"Q*\gOOZR@sR\,]LNMdW`fZ3#S&W<PU:E_L2ad"ohLPOapO%!rSpiE0$6a]4AJa(2),AGVOG;0EsFG,seZ@\A4GlSd66p,XkVF<j/U$83+L*P`ffZ:/r.4>H@l&lgr88!,i]D=$-dR<4T''7KtE[%iGXa%`EJ6riMEfBL\B;t'U>JM$7&\N,(Ds'QB^]4N7Um!&^I2)X4]IhB#jS-PlMS_G.Qt>&9_]>M"*gof%IT[<d[S6p^bKo-eSZD%l=J$=:&kJA"C)R;7G0@)=!c=`MLo510CYrm:SK8,AY/F,;SR49#8dS`dNpb1?=fY_VG2s:>$f?=8<ij%WcXG/><T*f7[Ik@#I99l%h&%WM,$^B8IR]C0+YdBuB`RrGPs)@;j:JV=EA34J^cX3k4I;4i:>2L/'l[)AY-A=h#rOj\7eD"0"-l`"8+L&sW+9`H7!j`F3%Xc8%6r_Iud4+?(-'$Q4OHJ<k2u.C2*iec3-CD%>Ccos-c2V*uCE.+@,E,o:Fp+UU[R3^2`jo$`*H!D$JmuE%9=[MZ&7d5=1GA/c4n=ik%$<uVnH/OB#@DdWB5u`Q9Y#a0f\)(]E>Bleaet'c9-n9<=gCB0^Q<9s?gA=C<Ct$Sk)e:k,ECZs96,`tbOtN[5#DA>\prK_UeeKXd%H(N%p)&J0?*/R#_i$<nAKEr:pg_+`&bFX*n<4X4mLU/fsHBk'1K0mO3/IV]5f@[T<C@SDC]W@RkEs0b,kU9k[a`r+m=H[.Bn:luF%J@9^Rf2;A+.7542"0QY*P/AYuTd\NGf7;OcgRoB$J>FCN5BpM6(2,`:"I_tX]g[&VX>0pqL$41eW\Bi-!PdZqjEj/a't]6r#h>BN%BiE9mUNhgBPT("%A<*lQ]*ahc6r>5W7:V]_;*he8CK4YHF/*\+9St`d\Gs&u-KZs_HjUB0c]1ZX:W9%!%\"MBRcTPZ]OVg)h3M+\%L)E)hAnj>6/"d>9+WH"Y>n5_k8ZPC+Z'5SAG;b,P>cHGTB!W\=6#Pa5'lukqOYJR_c+Ato.]Y$i+pU/Q]i\fB:7O:F[8_:M<,*#5%6%0=a4L2[F1+6\IQCZ[L*[9Pl,q%@/3?6iJMT`r`W!J!GXR]5k&VuO9<e-S.D)F%`Wg/jXZ5EIMMH`rZ-<J6g1@+@K:b,>oAf'@-%.?M=HGuZu]\uDtoq5>#./h"uo'(/Wi7fj]_B7b%4'gb+6%!F.p6Z5$mCnQII7_nU6^lLATQ]iX043=AVo2+#.(1`G,Jl0Go$/o(-%"lYl:-VR4TjX)`3R=msU-*>0S8c5@#"1XMP;VMbZm2;T6\)amcKII"QK&IqU]/I5g/Og)&$!pJ%rbBeX#i2F)".N7KB3nVekOPTM%>4c7=>tW5@j</t@\k2!N,NMZY3JUp`.q%M:8b.]&NXQ9,.%[3j2Kr&u",2A+;mOr3K^5qiV6^1I+V7*f<;aGm&f>?b"XWd6P#nXF%"%W3nF6ld#/kVj2.g&%W(pV"=#GmQ<`&!pa>g$7@#,$mN.TR3ZA%K/$[F'EXEg<:aYuUmfFK,@)8q7(;1l-W(ClTOO6"UP9g.+?e%<>93Ws2\ggPlV3:T=oEI;WT$=[8Ie6^8F^?a$c5:-jf*:ji0UITBDN+VkfcKZ4p!/"@$i3+fK1_`@bq;`BtjF,4s3]44\*=5;"=e%K^<BKm;(q1>ZXhC&1'JfIanLQpYE*0**!)`=B`f`<U2-7W^2ccU=qMh92S*FMQO0IQE9G#N<49?nBK<n8ln,'NSmq)(o"0q/t<27%6s'"c"hn1?<Ng)#at2T7i%?mEeCbm_kIi7FGD];jPf_/jSL/-4o(+3SUnF7)8-c.:JUNbM?Td'WVAD>8T#S3NeL`ZS5=MnfoHJmF%-RFL_JoX:?0HRb12]NV_):?_#Sr4LZ6=lYZ3F&:EgUbC0Z8=SA&6Gl<:dnXdhMdHpij+].$>h+N+u\lm'M6o$H\K%d,40nC9uSDW%B[W6B+q/5@e]Y%qPZU591R.91/%;KSGZ5/'Y$>%k]neJS'Gj!/hjp9tm'%K?RRrd9n4`]0W$Dpag"Y=gQe?T,4buoC@1nINF01Z2%d7Y.0j@G-?A1r(:I)]rql*?HJB<9ci$S'KFc45IGc]OKOB,.]'Pa(cOE#"3++jVopOPj.81$4`$1d];0<NHIlP!$4HinZP?Ptjn=%?pf\M'ptIP!F,bl:Y]A'^m9bO8EZ7-Oroj.W!'0F9!RMD<cF_=CW[9_RpOZ>q+9*7W_R."Uh]<aXN;JYbU.D4'\OaNAN18^OR1j_%+b_Gb%[9^CC"L>'Ql/tGEcRol<i0:B\;O23h"%iqm7pti_AVkD'I.se?YRcb+"$:fWa$%V"P=Hui-7`UlACQ'2P]@9be-K9J>S^Z%:(q28mFMdn[OOf74`1MM[Oe(?_](a!(n3m4WguIWm7Fji<g##4N)")e`,@!=GBP?4gGmfdB?F[>aiH$%NW=<OV@#pI&dYqtlN4]C%`7&cCep49,8!OT-HbQ=R8R,fT%*CHfqOYLJ?<.?mQ;X8]i!mVC'-;k`WoY9EXs@&CL@XYTKsXCF!"?RL9a3@;_1=Snb2U;BNtAX/%m^R$$e&)p>P6,.Ri0hu@-fWTQ*>NZn:Jd)HU#P6#Wo;)De8.#u'.\hCL1`WKj>G9:^GaS^%ha^+qQ6QC;1_H^BVrZ+E<Xka=F_h_%\N<sM(=bZM<YTETCVl8>@"(QnMqS/%XJke3F(:3YT$fpLFdGUf.<)PEm/43E"clD1eW\'\OaD,J-na=:as/UjMS=\]abUC88EUNY%Sr#du(Ntq)R(:1Zb>KRE'so?hS\eO(#6[KM>$.$M`_bG<=u?M!<Fm?pJEK.%'^sum2DR.ncO@Nd3^JTJZnYTZE_32C&C5.>@K2l=%?*q>@cikEW=rbbdZ6,NcKe+s)W'O8J*g24"Jk:+C"u?1SXT"m^26scir;b,-9hTHMJ&HMi:81$)&YLtDd=I8$>X7(19VE6tPeeP9%fQ37.K3m1afaC5@@7:bAT(4YmPNs0Nim3tTL_Z>.kH%)c(hTPV.3jOeeB<$"8J>^ihC)CE'I?b/cn0kqAqEjX>A0*;$4OQF9fYIk%QU+Rd$ln=^8(KjL)1ib^aFeV,pG5LGA1JK&H']a7c=>,4?NukcP8j?])AK/5UhU0&^?1UIH9kHgUC9puI(Y7*9TFuT0pYLagA)tm%3Oj$l8u3cR/\8Hrfc`\T#0dbaF?uR<Jd<a=eIMK+]p5Y'&,2*+33S+5XR)YrGu!X)-]4B$UKas%3t]<?hHQ1;XXGa.DO<P8pi%!2%7!b^FWNWL6TiIc*<($FQ`Gm[?[^f[!N(`eS=R=VYDJc;g-RL:?<KOF9pDu&>der1F;GE'+Fh9=;D:K=enl^&@9^Xu?V#$`MAPYig%nUtY-jlR4kJh#RHh5Dfo!!m,8+W1?5P-Xat]c8:c,+[cZe"Ago+:oNF9Ks9!W:[7k?pIYF?n;r6/>4uFXJ`s!;Qb``-bb5oSDAOR%C'GNbLmABN:ne$(Vl#8@eRcjQ-P&14eS`EALj=*Qa;oIRFmjn"#mDt0cgi.o\!pdp<W3VC;lE@MHDO&@`r4o4Qo"O#!/da-'_j+X%5H9<6F)iU_?d^Hh2^b/C&*2eB$@bl<kfG1o_ntV+UJm.s=(,;.#m%BNg!pnhe/JQfPMq$///8S]lOC.>9+Fsq81O:q^%RqK!%qR-%/-DLX]o#Jim_bn+2_:8CCYPdYfpTOZ13IO@0:M.JY/3-QXo^7^<).?$["kSSnl$`/e9WUpgr2sSG2q_Z`<0-%alQKrJk<]K,Y2?^%pRH=$fa(L*A`AL2*fD@X7$?t17R.CTg/9oe9!+s?ZNmP/pi&.<k_9@DCDi>JT1W4uW(XsW+h\/BJ^u;PY?]lWTcu5L0ZL2kZ8]Tu%`Jnp'%<6g^ZCG]N$)&1I/P"NYm#Gu&(&<T)1DMp*M?H.%kNF`-nZdSWeiN.p7EH,,0rcIsb4^<fLVo\#8hgt6O>=;C>erg>aO)Hr%BE$cClIqB^KSbnh).)M!06`^I$^9BqeON<KP2CPHe3?'jMTB_^TNin8Fe)bWaP5sV,Z(#%+?,&?W_L2q2%l#a?upIWbC2ii+\jqp%0f\!X>Vak)kfZM#SlC>X!HeMJq;N3@EF_*(]U0D=6'fL%-F-Ye]W=)(O.o7<)&Mc.;j5#@1t`G`N(0INjSBZ<g!31/K_pmbg*kkP%gX2u[EhbHL7:n2jnX5ag9]iXbk*gu.PI\?88>TH!"JW.HRLjG%-Ts8L>79JAaulk\_(Q1Q]1sPE!k(teharR(&Pp,i3p&AJNe'sI%DU6>Al\W*7RpN><6tJrERAd&l)-<W?/fqfC_VY]e2l]Q[b&U?$@s/A?MrG<2`Nac=YrJIQGr#H)A1s<)9+GSaKe^R*WY/He4(Me.%j=1neK@a?'D3%dAa4q1m/\G)W,l#3pNEIuI29.4%X6pC`^p;%%324QZ:0.&mFs0`fREafq%1QX$*]&%47J&N_W!p)8L!j+uWruP/%6o'iQ5(,EFPSZM3$(iS5o30)fVejOorl$M%\.:\1SranNc;W!PdTnscUi'Q303N,]A]Z4\8t%4C.QJYl%O?]!7,.WLae#t<Ta(j`%MAPi:e!#+2'"H=Nnifl@$N:Y`2FbrqE`$9l%.<B?^k($7.7'Wi3E<Ek+:h40k57Nj2<5>E<In$*M,8^R&/HD'fOLjiNnXruSDF3q%h&-\kC/A(.8;N*oH1i6!h:IT[V$*u*Q<a]iY(lSg;Cb5;Wd73BcqRXtPsWqg\<ap"m_E9%g@'%eFDmhPXYL`Z9<?0f#K7@>X%HSd%[isGXj`cn3+'kD_@%],`CfpjO$nA"SL`jb@c3AGR53@4iWh^_1dBQd,!s!4o6)H7;+icbJ&s,'QL0QS[3);+r@<=k#(;E\hPKRp\%3K79S_IB?fQmG4I&TgJ)L$E%d'tQ!#h;AW`(Par.6YVB'HHK2fT@,/'"&_RFQ-u)M8gE#?j@j_JZ'eH4B8?kbK($d)ek2.hAp.r^%%<?$K-Vm@9.%8dn[[/j%??%1tp7(]=]*`V]0*OZ2eZ:$`Ji!WI!Me'P7Yft0^!FqN0c/T(`t/Q&kY`bi;Zac@1Jjpp:jl8ej]S+.%;Fu\:/pRt1.B7rNa^g?+B]?s=(76gd+\kXB"SaAJUSC+[!g.`0KQ"hh7jQqF&L,`QGKN0*mQ4/_,tT8/*4n4.V2nLi!-qQ<H'C^%%nW#Afk]5inSp(Knm#8S!.PQKZQ7tMl&k^7pa4uolliOCGpcro+$LGQ>Mn#[LM52?hV!oVE-g_QBYiJElkFNGbg0,/Kj_!,e[8&"q%[E+R4djkdLO4?]76H.$0Ys_25S5hk(WUX/)aI]ntcR;ZHYgfHg4d3GsF%eR/-+DrFm8Ep'8jt(%5;3L_DkL:,%tgme9WjH,8/UI/%)euT?nT2[G)n(q"l,%@MooSV)'eGU+FB5?r^<272ZUC&.4*TjuFF_9q=(,^mBG21d@IEA,"Nbko,8Ee+`9X<V(%<diE0ipeK>9[l%d3_+Z:AKM#PCbV3ajql#S9)JqIk'&rS"e!:M9<YkJC9%OEm5OOPu[KVk>8kJ$K/`rMVJ`/.`p?bW6U^Y!i\l$Zgh\-R$sl[B\?Y^%!b35iJrAm;Z=&2oE=XWAnG"*:),X2-;WCl8O7:e*-:'bdmqMXf`/+6L5>jI68).sOk=i+4Em\1SSKkU]W-NOJ3W!p@'sp-p`h-Mu%<tJ72%lu060=IiXYUuO!%'#!*2H[8>\+i+DF[Ch@4pSU0F:E@"&Uhc"j`MJ40u8tQ4j9r&8pW/#RI[c&44"XnUg6kkQ;QKDmPZBi%*o0=;dk*m$bGi/28MR6Jg+tdX"S1n1S'BriRe@Ge>1RNeRdLI?D>Q]"k+c$-e_%6WO&AlTR[3k#'(!e0LTtR;mV.ka7E<@hNWb\R%Uh=^tA6_Kt2H/$MeOc$AB^op:-hQ35X+&R@WRKuYj`VKLn)8h#*(ARqb2:5pY\I%WZr6SGoOh]tEcE5P;S>p2mS``XZ0SpB<")CX%l.d7E+T=D_:G`;U;C.I+(s!"%8KP4U*o%h#S$ZI:Pj*>$SunD7A`I!el@!61D!?JDNBnOj+FHBdKJ<_f/Sl(c@=p9;'q8.]'n#M.%</37T!D\744/sQ\q%sj(/2N23BVrPP-9P*g+c&e1cI5ucg(mkg^_\oZasG,f1jE?!!E!4VL=)nBK6S8\2Nj=M9iWGPr^LTtCG(Ud%lp-N/\B2nl&9*qL6NToX\5l!jRsH@A/@Y0G-"'IT]p<^U0^:(3&-_rg'&tj7b!Hg7+hX-%JOsN5-<J>nYB*=u9L>%5d$@8+f#V%`%XrAZJb1$2"M/;6$BJ5JQ:[6J&+[&5T0>ULQ5Ug;8dji=MoDAq)VnkG2!I5MeqNmboY!Q(n"_2?Y28Y3YPYU_BC/eMF\fK]5[G%-a%;"%ZbSV/eJ)SHlZ+5ti(D"t<.'<FZED-$m#Z+:#,<>^8H@[/om1SRi7.>4DUAPg&\5;Z<@Ts547[i6?i#7KH`'UrlYam<0`Sj%J3%_XTOoK.=F/F6ka0_,aPU,Yq4(MCVm8jWW5TY=$KK,S^Wd!Feim,bAX=US?NmbSB)AZ9/n>e#-(YfHiO&pP`%9lBNlmq@UAL#[sA]%,/pO=l[c>hd+n10X/.*L0VXAmW@B;*gOE?eP?aN#Scn;E67,Mc[TL?kBH-]i`gJ/4KZ%!PNBr[7)dBA@.k7E3*h0OEBEK^c`*=cG%K9.qj(J*8dm+FHn^qp)q',6Q">*Mbl4@7<*j3C(=*5ED%V'(h@pFeftppuE`B*sN?LgF&ZeEjP>rj=0G:_qDreP8_j,Xgb>QURYn%s(1.j%1_CB4^BF\jlA^oN%50p;N2P-J4\%MHU:DKS@W-#8UQ_^4J6`NS5IC;7`"`YXU,_P;/J^;>If8qmu_c"5E`EsWDZTXRQntY%GB3Q8k_YX?E:9\!Qu2QPmUYYbi&2-53%^s"<LKkt<q8eGcY-`Qa]i4@jJefC6)[%,MJtZpqFDEQWZ[e[AOUoi.JcLI7>fEW+q);F%pEhgHE_.c5ogo#bI?3_&3)uY'c/2_^:SSnAdFA`Ip'<^5Tm:;p'K_Mq<$AKCg+0u\N^`NoT$_mYl7#?/6*T)eS07#Abim=XQ!mM9%qdk^Zob>NYi[*[%inN%N*)j!2MR\1pfEjmRUjmYj\hnu#2t9[Bb<j&WMGi1j[K46EY[tjYRF_HCXort^-j_TUpN''+8P#?A6p*U=%maA$?`P$Y>O[l0+\3gg?U]SYj%J22n"<g^(ruGj/9D:0^<T6k>6+TEX-rOe?RjiZ\+!>)P&-^P`*T>*3$sfW+"XsP/G+j9N4RlH<%gN*U)Y"1?^^`];+d?:\Keka+FpoSq@md3q`U+/S=^`kn><5D!o('qp-`X8^=]-,X'Ri#7,^d,1R3.e+Vd"<J2=LkcNg'D_r_X;DP%$ON;+`]tCRR#n5DT/F_*ZI^JGG3e@j%;&MHH2PKrX=CAFk6cOk/;PWGk-Mn/.DcM?8$qs*COsI/q)4L-'ca-YSc\60]MO5J6Rl?8%c)BK\0hI:iX_g=B6hFrHMA\B6(>j4$;rZoK;bB`X8u2?:7n;L"YI%uonab[qL!LO\bTaFoA\I6O@<phnN%Q^b.FHQT*SIJ5lcSHK%0>=67K>s-28h:80OrUYtR\oXm,caorpGD^(h!Za&*H4pZ]%,"FV-][kEWHT#E]s6]"D:Q0\-dHM'\4J0PUSWVXCc>uNe"^B!bCtk%bu+Nb#c!F]<:_Q">`_Oa6@GjUc$L#W<%SWVDGDAe*6HuZ*q&]4bge**_$soD/1nM9jpD]\eWoB5_57Q5oJmLWcP+[A#72PSj"-bD%V!T_D`.G7c#8092JuF5\C)fR#63mp`aOR*qJHMe-78;54'Q[sp_6BRK^Xq"O0!2_4f:ag6Bk'TQ;c#e0YZ*U2=9Lq$auG"c'(O#V%PMLK0jNC-&A5<Sll+%oTJH$L%WV<uY6C>jSZhQu!<)#e!,;;A@<#+oi)FgJ70seo(EATg_W@)$$[\]*T$qM[AMSlq$)0ccu%)OjN%1k\+QQgC/[PVjp+LBbm#-/[SkIFu[n7_"#+[Q@.#\g[nIH"@d8&!*,TFc6;?fn>[LiZG<)Kj56lT\<`$dNC5:NG3o"+d$92oh[?D%[)Q2:bGe)FSs@-?Ob9E/"Em4h6omZ?$;8Wah,Y]W"N.VkO/oE=eY7W,/4#;FH-egXljQIE.P<?,G=UDm!]ds,]3"K"OLkj=;i8N@%N&<k*,lu[QQfW*]Y\>>)WI.'IY*A<hPM?*C8J!9Q%\OB\Z(c^+DNY;45?Jm:c9YM+0K<O<pu5KK8o>?6,mmqERS)88,9E+./!X9?%8f(Ir6>?M_eBlL*BL=%hQ3"'bkgM9/YCIG!%:thLp)GkM:,ng.#,J"nR3\rYV]$Zs^Qe'e"Si&p;"7Y6>C_+HEZq0l>a?mAjkuq\%g'V;fe92u.&<W<r9C-BPes,r&gHh3%%qW*7J@\SL9Q]UEcA6Qu(Vad<1@(uA"8?!GH46B0"t[0jB8\U7CP]>!L&h9]QL2\i,($[S%0,<GZK4A/1^*I??237>\*O]IG`s8fSkb-D@6/cjh!]\-*X)MWh>Y0BA/0Pj"nL^CV'!^I?PL1$Y2^JeQC^p0UKdqa?mXPS74"+r5%Od[U.%FLV:@6b/&ce^pp6R?#g]*;8>9[;/p:f<hA=RH!o>tPP=!iMqOejD%:37j+#ML0u..%rF`O4&(<%[hj3kd8p?K\K+1![J#n%.B<4bkksFkC;_@,o`],rHl%>2KgVkcOsQ=P1r=,G20XY4&^3_D%K*>BW'IS,EM7N?oTuF^V3ZH0mt!<8*23c]9Q'EdqA_XD:@j)'%.<nU_)G)CPY\'S@N9[Wc&/SYu3%7Y)SOq$]M@Gs=>S;f@nE*tSLnP$!4`h5]]"[>7e4U6;b*nFk#4RoM/PI!qWfSfl82mYUDV9/@%iW4%SN,mpXaI.YU5p-qM'"NaQgQBkaAIT0"E?7*MhFZdoU6)E+'DH+:X`<n^V<3ru^*c0:nVWN:i@]H'3FDk6ikd4F)\E<Y/S+!g%EF:KR1R!H9PDmgf.!6W05(Trj(0qkN@nkFBZ_LO^53%f9M[l?8>WKHD=??SijBP<@;Hk_N6!>RJC2SYF<DCa&=u%);V:8)e;QT`9%>dO$,@C"P).+!j2eD5$'-,:6o>)gR)j6$Tk<?sE_4U%qu'oIcB1&0:mODA,9P#T8kT^Sm=ABQg6M,"g#KM+6P5^c[D[L=UULLXMM%Lp!bC8R\S8AK810W(LY?[Y]t"$qVkn*W@E"4MsMRR4D%).Z$%O"6`2'28G"4K&VOT9B-'66t:+/*hNJ9*d(m$/g5jH'SFRMDT!;l%p&n'[3VtnET;#SA.7,o?7BA,3kFLJ/b72[O;dEPXj@uLTH?M"`B8M-[/A5l(nq+YDWq8q,b2d7;a5Ts<j6VM/k_aG6[rR7VfITUU%A*&Q6EPPjDJd]gY0t8U-_DA).M!":Qq$$p4+t__HD)l0t@F.dZ7mj)jZeM+"4-JPN428Xi+p9B/*7^d"J6-J&$d[Kf9[jsbg'S:?%.>iQ4Tgr&tMM;ga;iU^\G>_-@K$m9E5_Zc-*5ossarX?&NZN\Vah13:\e,mV@ON.4r)b"=5MhTO'653VP+M-/jK:d[j4q0;U$6+J%`)"Me6A3'<5:WBbb/<Bm:L(3[BOs'#2)?G=c:V4peXApMIb[o^BF)R"H*M!qMMIX0`>FXNTMMu.Oh7VTp_p=589UBR_6D>1EQFiP%as$Q2PpIV52]4W+Z[c[*lEo<m+OIMcjX3S/H<4/6h5P5\SNVH2*YFShh1dr>nE?hib5#jQ>lYkK>WYcp^_=9:8'e#"oTLJ1jBTQ5%Ve^6pW-lU!JAG(E2\(mdi$2ALrSCHc$rpTA6_NF??M/#s'iX*7.juY?AU3UT)?R=#Mqma.g`J-D%C]5I[tPin>&!ar*O-"!>K:'Z%o<Phe0@/@HP`)+I'8S)=fjW:VA@1J^p<c"t/L-9B_$aMpRK;gsa1UC$p5"Z2!`ni41)8r?+)%Wd+-=+H]5)APS?WDjo*g/,'afQ6%ep;Z&j;G2`e<+4/<6^A-><EQXSMP+&CIX:aK^UM##']Ye79AFN7Onu&2L\qrojnDo&A30Un`2PO&cAX$b;Ff(\L`#Hmb3un<NIMj%:0!Z)\TFPTWOcidD[$Jf5AgdR$2?f/rp+)JSjR*2;K[=8OM[8h3(<O+GE%+C&?M;ditD3-+/h^kT"Rs31=FEXGss%joZ7#5L!9.u%U.bkCQq+>pW!$\;'[&e-`)O!_/Ipo/mJu1T1BYtWH\=aT&#rKB`nu>l$(+,(W)/CpaXP1)Wa^f?JORU["A`e8I,.RDAX\eolI(BL%9]pM^pjfW8.eF^p8MK,_/p#q-Sru@imC?cR&i>dUC4f_gqB<*ZS-h7=!4(Ss_m)B6_"(%0Ud@_S.94P/%kVgUpkJ,IN&c2ZGWS9V%LDOp/.Hsk+PYY`]HI,MhUIKGNH?tLrN]nMl>Ut_5r%F&Ai.IVRP_\>b@WAPRrXbr\\H&,P(n%2Q-rd7Ad"DSA%1Gp3L_A%*2o]$9%1cV4IF>n>54bg7sBIUY&i/6epQX#H)H^/s=+TW'<U^:^%M%Z459Q]plL^PZN<?F6uHF^WG+]g-G+TQub68MM5B.5DL+,f&#^.G&/%k_T[u0-^XOVB`R#*)IIiCgECcLB;_fj>Fp(1e5C=-4c$-L2;r]W>[itO]j39P#<nOdiq_Z7#.J5Vo)N89P[&+8bN[tE"_IY4]rR-%'NM,aRUW5ib*o%K1kY,NCEb;@__MG;m4c(.;o("%'W@J%RK3+4O=dBH1H,^`.`&H2FPEU//4##Sf1_LhLJ2&]/-#[[\B@df3b2,R%Ft2#m',7Yb[;<-FU,!:RJ?D?o,IC2]H1mapF%lb4;c,,Kb?,A577"CKmLY=T8l/4r0>90l",b#!C]R8l#K$V7MF_hZ"tlM$8?(JX%Eh+=']DU]H2&$4^MX)3X2ju'O;XCIOn&/\Ib(VBA8=td^i*_7O#iq%O@Q]HPY4;Y(\[*O:CPbN@^()sqNE9PW>NVeZ,=!sH%Pilr%Q<[X=1h,N2Wln=mAuKq`Bi-kP[X_$k0?U:4X/;U:<QYd"8uN%/l9=@L0tFC;[%`M<D$2GSMPKIZ-H60G:]W$q:mWIaTfrrDBrE;Y%:nl-<\rsU(A#bA9C0jEs-Fm`<OWlp<I":Fb*)oE^G#U"4EqK8?9&rt1/uj=iGc\Nk_9r_EF7NArGsK;FPWiMjH2eVkN?&VKVo/CO%Y"14b3YQ9CWJ?1f%7;eMXP;GuO"`l9*B;h?6$_2W2,kQQTH]t[7R:Xj:3aP%r=,4\$=!e`lX:C!AqqN:5.Hn(2-N'7=JI/[PY\kq%c,sWVpDc$FMkS.Q-Tm<S_1Zmlm_bfMWEheiV*9GN/?G-)L[).h</D_*WFn:7**J5khJ8^E5!p5IIMBcjW:nC[V:BuIW*uKra%RE4%d8Dt?OE*T0("&cR-rJ=?XA6`/1"_:eoSAALJkoH!Z:^:BapN_39U(W0m]d@FJLMt]iKfA\a8N3AODoQCdNE4YR9AggAM6K_3+]Gd%!h=lJ(3:]l0dh!q%8'JUAFD"*0EO;3dUW>B$/o?!4T)Ku2fBA1-)Gojga"I-NHBUeDi&Jo+rCKE:;0(X1.[64-^caN53-q-TVtRE%H?'*BN1g"[2<A;$ZHB>r]HINi"bss.N!Ed&6DSVq]rQg["k=76TfaYm'Y:AD7F3L>dSaA!2%?.?1+<J5:V=K;TOK7%\q<D@h81<k%54[T-@Ip=a9RnW#&5d1c8pI.aW(O1J$!'CS(jmfE=lF**@-DuY`sUZ+PEqHp1HK0NHsN^sh6*ahRSeWX\i^/Q;20k*$&U=YdZZ&6%<pA2_'C]N9*%Hk%q<\K)_rI2MFEss3\!"V%`sCGB*TO@?1`MjCfaKEn_Kn_u&#K3Db/H_u56;nmZIHb-m[aHeJ@:*Ok]&>5AIc;/%K%hhc3(jA<b>O7p?MD/F4E;SpFWi_E=ZZo(o?0Rc:\9<aZJhS:ZY.-/=0nNcXci9LTgc<BGb[So@u[Ba(f!h#2Sl8gjEu1tj&iF2%=kNCE[f&g+B.?oY-\:V@Jpdpdn$-GqPs.5tSoKF74F,4'jgE.eX2)4*3E)4(1m$faPJV#W;#jYGTaE[`^e..r,f@HjMU"s%%k^b'%%g5g,_rZVS*:T0IRC+jdif?2X@;`>kS2+@UQl26XWur]`8!5M+K4+d1rX]eA)*IAaJkVD^?u^7d%"GkD7Y_Es)L:8^<7>C,(#]P1%5NH_&5WjDP.=&\4:';=1;2jDnW!U6B.LuW^;7`CCVnaVBUri_83aF_(MW[csQkJM^RSKZ*6kjUVD5mr2C8*.GmhB'46eYG2/HVQB%FAe]2mR^A?o_gaL+!e.jUP\@i?P^)"aut<?Q<7:l-MNRJH6eHoZZ>T^matfDn"OX_CHtCTrL\<efq38f'=s4=hD95mdUY(dO"'fJ%16hj/\G7F3-qKB%@6qrt[>f2X'eYE^cU/hA`I4mo#VL/]^7.:)l!0Fp#WF;[I.8]EH<c#^,btV?^+0FO9/i3B8]K0*;]Cm)C%+Yd%7lVta7P0`O`9/t$)s4FM`&tZ64pYXq)KY".8tpR7(WJ'\+H@+H;2n'lSl"3A6W!A[5[iRnPu^Ff=qCAm=VZ$OX5mrOMSPB^9M0]4%r_0Bp[A<NO'P;C</04iC@[.L%,u8bHdrB;=:7>jQ8Qg?OIh>NQ=;QUZ"Vf6Cf/+aU(9gn.?1=,+NVSTqob,nde<A)4p&7XeN!#:*%`RTT-35,3q-TDm+=c'>4Gn$>l4kAMK;D]d>MgHXjkXT!o"g1&7DSK%3j[H&Um-^-<"7)$'C#C4OnCFl(;)BEWo%BFnUM"F!dcnkt%M-mI-kDprCjsVL'#bHiG[K0r5b&XAiOVS@b=5Ds6Y)sI<0fNDX+FB+h(DiO$!@;4#^0ACQ?q:GD/C1Z8S*XNOThgQM?ej\X<E4I6%K\*0h,9@<?XeMQnjs<c\,PZ?P_J#0pNbu?BdkIhGZ_lIhA7WWWZ`S1FoRC3l-G'FnfhL[GjE]Pa_9:T0<D(Kf;G)9oB][EJ(^'hM%5>Fh/Whb2$Snu=m*&9:ML75=e0hA;G@TUhNnarjSF$N/"APCaX-[**n*g<;?hG_*8P2(HUI'dYW"IN!<GM,k%#"bPI?BAEP'$nt:%9^BKh!)XB_$3*lXgoM4=5qCo0Kqg8dER!Rag5LKB&_r)2'kYpc&X1s6:urG8^f7fuNnU^^S(n^C*?d:AIlZ8"(@$@J^*7STa<%+^%>0[he"^hCoN2/-5=a70W%^jS!Bc0#Jhgd.`nDY=YiN`rGU<SiD%`MLZ;&,+^<B,9tc@5B/;C\TZ\Fn&$l[RggmJbqV:]9kJf)N:m%GO*R>+$@:1q!LNHbMFn%hgP.l_;BJ2*rYrns$Etlg>f),?hsWheGfo6@_K8~>%AI9_PrivateDataEnd